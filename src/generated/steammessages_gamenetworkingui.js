/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    $root.CGameNetworkingUI_GlobalState = (function() {
    
        /**
         * Properties of a CGameNetworkingUI_GlobalState.
         * @exports ICGameNetworkingUI_GlobalState
         * @interface ICGameNetworkingUI_GlobalState
         */
    
        /**
         * Constructs a new CGameNetworkingUI_GlobalState.
         * @exports CGameNetworkingUI_GlobalState
         * @classdesc Represents a CGameNetworkingUI_GlobalState.
         * @implements ICGameNetworkingUI_GlobalState
         * @constructor
         * @param {ICGameNetworkingUI_GlobalState=} [properties] Properties to set
         */
        function CGameNetworkingUI_GlobalState(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * Creates a new CGameNetworkingUI_GlobalState instance using the specified properties.
         * @function create
         * @memberof CGameNetworkingUI_GlobalState
         * @static
         * @param {ICGameNetworkingUI_GlobalState=} [properties] Properties to set
         * @returns {CGameNetworkingUI_GlobalState} CGameNetworkingUI_GlobalState instance
         */
        CGameNetworkingUI_GlobalState.create = function create(properties) {
            return new CGameNetworkingUI_GlobalState(properties);
        };
    
        /**
         * Encodes the specified CGameNetworkingUI_GlobalState message. Does not implicitly {@link CGameNetworkingUI_GlobalState.verify|verify} messages.
         * @function encode
         * @memberof CGameNetworkingUI_GlobalState
         * @static
         * @param {ICGameNetworkingUI_GlobalState} message CGameNetworkingUI_GlobalState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGameNetworkingUI_GlobalState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };
    
        /**
         * Encodes the specified CGameNetworkingUI_GlobalState message, length delimited. Does not implicitly {@link CGameNetworkingUI_GlobalState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGameNetworkingUI_GlobalState
         * @static
         * @param {ICGameNetworkingUI_GlobalState} message CGameNetworkingUI_GlobalState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGameNetworkingUI_GlobalState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGameNetworkingUI_GlobalState message from the specified reader or buffer.
         * @function decode
         * @memberof CGameNetworkingUI_GlobalState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGameNetworkingUI_GlobalState} CGameNetworkingUI_GlobalState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGameNetworkingUI_GlobalState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGameNetworkingUI_GlobalState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGameNetworkingUI_GlobalState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGameNetworkingUI_GlobalState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGameNetworkingUI_GlobalState} CGameNetworkingUI_GlobalState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGameNetworkingUI_GlobalState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGameNetworkingUI_GlobalState message.
         * @function verify
         * @memberof CGameNetworkingUI_GlobalState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGameNetworkingUI_GlobalState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };
    
        /**
         * Creates a CGameNetworkingUI_GlobalState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGameNetworkingUI_GlobalState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGameNetworkingUI_GlobalState} CGameNetworkingUI_GlobalState
         */
        CGameNetworkingUI_GlobalState.fromObject = function fromObject(object) {
            if (object instanceof $root.CGameNetworkingUI_GlobalState)
                return object;
            return new $root.CGameNetworkingUI_GlobalState();
        };
    
        /**
         * Creates a plain object from a CGameNetworkingUI_GlobalState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGameNetworkingUI_GlobalState
         * @static
         * @param {CGameNetworkingUI_GlobalState} message CGameNetworkingUI_GlobalState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGameNetworkingUI_GlobalState.toObject = function toObject() {
            return {};
        };
    
        /**
         * Converts this CGameNetworkingUI_GlobalState to JSON.
         * @function toJSON
         * @memberof CGameNetworkingUI_GlobalState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGameNetworkingUI_GlobalState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CGameNetworkingUI_GlobalState
         * @function getTypeUrl
         * @memberof CGameNetworkingUI_GlobalState
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CGameNetworkingUI_GlobalState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CGameNetworkingUI_GlobalState";
        };
    
        return CGameNetworkingUI_GlobalState;
    })();
    
    $root.CGameNetworkingUI_ConnectionState = (function() {
    
        /**
         * Properties of a CGameNetworkingUI_ConnectionState.
         * @exports ICGameNetworkingUI_ConnectionState
         * @interface ICGameNetworkingUI_ConnectionState
         * @property {string|null} [connectionKey] CGameNetworkingUI_ConnectionState connectionKey
         * @property {number|null} [appid] CGameNetworkingUI_ConnectionState appid
         * @property {number|null} [connectionIdLocal] CGameNetworkingUI_ConnectionState connectionIdLocal
         * @property {string|null} [identityLocal] CGameNetworkingUI_ConnectionState identityLocal
         * @property {string|null} [identityRemote] CGameNetworkingUI_ConnectionState identityRemote
         * @property {number|null} [connectionState] CGameNetworkingUI_ConnectionState connectionState
         * @property {number|null} [startTime] CGameNetworkingUI_ConnectionState startTime
         * @property {number|null} [closeTime] CGameNetworkingUI_ConnectionState closeTime
         * @property {number|null} [closeReason] CGameNetworkingUI_ConnectionState closeReason
         * @property {string|null} [closeMessage] CGameNetworkingUI_ConnectionState closeMessage
         * @property {string|null} [statusLocToken] CGameNetworkingUI_ConnectionState statusLocToken
         * @property {number|null} [transportKind] CGameNetworkingUI_ConnectionState transportKind
         * @property {string|null} [sdrpopidLocal] CGameNetworkingUI_ConnectionState sdrpopidLocal
         * @property {string|null} [sdrpopidRemote] CGameNetworkingUI_ConnectionState sdrpopidRemote
         * @property {string|null} [addressRemote] CGameNetworkingUI_ConnectionState addressRemote
         * @property {ICMsgSteamDatagramP2PRoutingSummary|null} [p2pRouting] CGameNetworkingUI_ConnectionState p2pRouting
         * @property {number|null} [pingInterior] CGameNetworkingUI_ConnectionState pingInterior
         * @property {number|null} [pingRemoteFront] CGameNetworkingUI_ConnectionState pingRemoteFront
         * @property {number|null} [pingDefaultInternetRoute] CGameNetworkingUI_ConnectionState pingDefaultInternetRoute
         * @property {ICMsgSteamDatagramConnectionQuality|null} [e2eQualityLocal] CGameNetworkingUI_ConnectionState e2eQualityLocal
         * @property {ICMsgSteamDatagramConnectionQuality|null} [e2eQualityRemote] CGameNetworkingUI_ConnectionState e2eQualityRemote
         * @property {number|Long|null} [e2eQualityRemoteInstantaneousTime] CGameNetworkingUI_ConnectionState e2eQualityRemoteInstantaneousTime
         * @property {number|Long|null} [e2eQualityRemoteLifetimeTime] CGameNetworkingUI_ConnectionState e2eQualityRemoteLifetimeTime
         * @property {ICMsgSteamDatagramConnectionQuality|null} [frontQualityLocal] CGameNetworkingUI_ConnectionState frontQualityLocal
         * @property {ICMsgSteamDatagramConnectionQuality|null} [frontQualityRemote] CGameNetworkingUI_ConnectionState frontQualityRemote
         * @property {number|Long|null} [frontQualityRemoteInstantaneousTime] CGameNetworkingUI_ConnectionState frontQualityRemoteInstantaneousTime
         * @property {number|Long|null} [frontQualityRemoteLifetimeTime] CGameNetworkingUI_ConnectionState frontQualityRemoteLifetimeTime
         */
    
        /**
         * Constructs a new CGameNetworkingUI_ConnectionState.
         * @exports CGameNetworkingUI_ConnectionState
         * @classdesc Represents a CGameNetworkingUI_ConnectionState.
         * @implements ICGameNetworkingUI_ConnectionState
         * @constructor
         * @param {ICGameNetworkingUI_ConnectionState=} [properties] Properties to set
         */
        function CGameNetworkingUI_ConnectionState(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGameNetworkingUI_ConnectionState connectionKey.
         * @member {string} connectionKey
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.connectionKey = "";
    
        /**
         * CGameNetworkingUI_ConnectionState appid.
         * @member {number} appid
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.appid = 0;
    
        /**
         * CGameNetworkingUI_ConnectionState connectionIdLocal.
         * @member {number} connectionIdLocal
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.connectionIdLocal = 0;
    
        /**
         * CGameNetworkingUI_ConnectionState identityLocal.
         * @member {string} identityLocal
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.identityLocal = "";
    
        /**
         * CGameNetworkingUI_ConnectionState identityRemote.
         * @member {string} identityRemote
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.identityRemote = "";
    
        /**
         * CGameNetworkingUI_ConnectionState connectionState.
         * @member {number} connectionState
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.connectionState = 0;
    
        /**
         * CGameNetworkingUI_ConnectionState startTime.
         * @member {number} startTime
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.startTime = 0;
    
        /**
         * CGameNetworkingUI_ConnectionState closeTime.
         * @member {number} closeTime
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.closeTime = 0;
    
        /**
         * CGameNetworkingUI_ConnectionState closeReason.
         * @member {number} closeReason
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.closeReason = 0;
    
        /**
         * CGameNetworkingUI_ConnectionState closeMessage.
         * @member {string} closeMessage
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.closeMessage = "";
    
        /**
         * CGameNetworkingUI_ConnectionState statusLocToken.
         * @member {string} statusLocToken
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.statusLocToken = "";
    
        /**
         * CGameNetworkingUI_ConnectionState transportKind.
         * @member {number} transportKind
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.transportKind = 0;
    
        /**
         * CGameNetworkingUI_ConnectionState sdrpopidLocal.
         * @member {string} sdrpopidLocal
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.sdrpopidLocal = "";
    
        /**
         * CGameNetworkingUI_ConnectionState sdrpopidRemote.
         * @member {string} sdrpopidRemote
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.sdrpopidRemote = "";
    
        /**
         * CGameNetworkingUI_ConnectionState addressRemote.
         * @member {string} addressRemote
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.addressRemote = "";
    
        /**
         * CGameNetworkingUI_ConnectionState p2pRouting.
         * @member {ICMsgSteamDatagramP2PRoutingSummary|null|undefined} p2pRouting
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.p2pRouting = null;
    
        /**
         * CGameNetworkingUI_ConnectionState pingInterior.
         * @member {number} pingInterior
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.pingInterior = 0;
    
        /**
         * CGameNetworkingUI_ConnectionState pingRemoteFront.
         * @member {number} pingRemoteFront
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.pingRemoteFront = 0;
    
        /**
         * CGameNetworkingUI_ConnectionState pingDefaultInternetRoute.
         * @member {number} pingDefaultInternetRoute
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.pingDefaultInternetRoute = 0;
    
        /**
         * CGameNetworkingUI_ConnectionState e2eQualityLocal.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} e2eQualityLocal
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.e2eQualityLocal = null;
    
        /**
         * CGameNetworkingUI_ConnectionState e2eQualityRemote.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} e2eQualityRemote
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.e2eQualityRemote = null;
    
        /**
         * CGameNetworkingUI_ConnectionState e2eQualityRemoteInstantaneousTime.
         * @member {number|Long} e2eQualityRemoteInstantaneousTime
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.e2eQualityRemoteInstantaneousTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGameNetworkingUI_ConnectionState e2eQualityRemoteLifetimeTime.
         * @member {number|Long} e2eQualityRemoteLifetimeTime
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.e2eQualityRemoteLifetimeTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGameNetworkingUI_ConnectionState frontQualityLocal.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} frontQualityLocal
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.frontQualityLocal = null;
    
        /**
         * CGameNetworkingUI_ConnectionState frontQualityRemote.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} frontQualityRemote
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.frontQualityRemote = null;
    
        /**
         * CGameNetworkingUI_ConnectionState frontQualityRemoteInstantaneousTime.
         * @member {number|Long} frontQualityRemoteInstantaneousTime
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.frontQualityRemoteInstantaneousTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CGameNetworkingUI_ConnectionState frontQualityRemoteLifetimeTime.
         * @member {number|Long} frontQualityRemoteLifetimeTime
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         */
        CGameNetworkingUI_ConnectionState.prototype.frontQualityRemoteLifetimeTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * Creates a new CGameNetworkingUI_ConnectionState instance using the specified properties.
         * @function create
         * @memberof CGameNetworkingUI_ConnectionState
         * @static
         * @param {ICGameNetworkingUI_ConnectionState=} [properties] Properties to set
         * @returns {CGameNetworkingUI_ConnectionState} CGameNetworkingUI_ConnectionState instance
         */
        CGameNetworkingUI_ConnectionState.create = function create(properties) {
            return new CGameNetworkingUI_ConnectionState(properties);
        };
    
        /**
         * Encodes the specified CGameNetworkingUI_ConnectionState message. Does not implicitly {@link CGameNetworkingUI_ConnectionState.verify|verify} messages.
         * @function encode
         * @memberof CGameNetworkingUI_ConnectionState
         * @static
         * @param {ICGameNetworkingUI_ConnectionState} message CGameNetworkingUI_ConnectionState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGameNetworkingUI_ConnectionState.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectionKey != null && Object.hasOwnProperty.call(message, "connectionKey"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.connectionKey);
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.appid);
            if (message.connectionIdLocal != null && Object.hasOwnProperty.call(message, "connectionIdLocal"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.connectionIdLocal);
            if (message.identityLocal != null && Object.hasOwnProperty.call(message, "identityLocal"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.identityLocal);
            if (message.identityRemote != null && Object.hasOwnProperty.call(message, "identityRemote"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.identityRemote);
            if (message.connectionState != null && Object.hasOwnProperty.call(message, "connectionState"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.connectionState);
            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.startTime);
            if (message.closeTime != null && Object.hasOwnProperty.call(message, "closeTime"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.closeTime);
            if (message.closeReason != null && Object.hasOwnProperty.call(message, "closeReason"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.closeReason);
            if (message.closeMessage != null && Object.hasOwnProperty.call(message, "closeMessage"))
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.closeMessage);
            if (message.statusLocToken != null && Object.hasOwnProperty.call(message, "statusLocToken"))
                writer.uint32(/* id 16, wireType 2 =*/130).string(message.statusLocToken);
            if (message.transportKind != null && Object.hasOwnProperty.call(message, "transportKind"))
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.transportKind);
            if (message.sdrpopidLocal != null && Object.hasOwnProperty.call(message, "sdrpopidLocal"))
                writer.uint32(/* id 21, wireType 2 =*/170).string(message.sdrpopidLocal);
            if (message.sdrpopidRemote != null && Object.hasOwnProperty.call(message, "sdrpopidRemote"))
                writer.uint32(/* id 22, wireType 2 =*/178).string(message.sdrpopidRemote);
            if (message.addressRemote != null && Object.hasOwnProperty.call(message, "addressRemote"))
                writer.uint32(/* id 23, wireType 2 =*/186).string(message.addressRemote);
            if (message.p2pRouting != null && Object.hasOwnProperty.call(message, "p2pRouting"))
                $root.CMsgSteamDatagramP2PRoutingSummary.encode(message.p2pRouting, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
            if (message.pingInterior != null && Object.hasOwnProperty.call(message, "pingInterior"))
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.pingInterior);
            if (message.pingRemoteFront != null && Object.hasOwnProperty.call(message, "pingRemoteFront"))
                writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.pingRemoteFront);
            if (message.pingDefaultInternetRoute != null && Object.hasOwnProperty.call(message, "pingDefaultInternetRoute"))
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.pingDefaultInternetRoute);
            if (message.e2eQualityLocal != null && Object.hasOwnProperty.call(message, "e2eQualityLocal"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.e2eQualityLocal, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
            if (message.e2eQualityRemote != null && Object.hasOwnProperty.call(message, "e2eQualityRemote"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.e2eQualityRemote, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
            if (message.e2eQualityRemoteInstantaneousTime != null && Object.hasOwnProperty.call(message, "e2eQualityRemoteInstantaneousTime"))
                writer.uint32(/* id 32, wireType 0 =*/256).uint64(message.e2eQualityRemoteInstantaneousTime);
            if (message.e2eQualityRemoteLifetimeTime != null && Object.hasOwnProperty.call(message, "e2eQualityRemoteLifetimeTime"))
                writer.uint32(/* id 33, wireType 0 =*/264).uint64(message.e2eQualityRemoteLifetimeTime);
            if (message.frontQualityLocal != null && Object.hasOwnProperty.call(message, "frontQualityLocal"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.frontQualityLocal, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
            if (message.frontQualityRemote != null && Object.hasOwnProperty.call(message, "frontQualityRemote"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.frontQualityRemote, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
            if (message.frontQualityRemoteInstantaneousTime != null && Object.hasOwnProperty.call(message, "frontQualityRemoteInstantaneousTime"))
                writer.uint32(/* id 42, wireType 0 =*/336).uint64(message.frontQualityRemoteInstantaneousTime);
            if (message.frontQualityRemoteLifetimeTime != null && Object.hasOwnProperty.call(message, "frontQualityRemoteLifetimeTime"))
                writer.uint32(/* id 43, wireType 0 =*/344).uint64(message.frontQualityRemoteLifetimeTime);
            return writer;
        };
    
        /**
         * Encodes the specified CGameNetworkingUI_ConnectionState message, length delimited. Does not implicitly {@link CGameNetworkingUI_ConnectionState.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGameNetworkingUI_ConnectionState
         * @static
         * @param {ICGameNetworkingUI_ConnectionState} message CGameNetworkingUI_ConnectionState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGameNetworkingUI_ConnectionState.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGameNetworkingUI_ConnectionState message from the specified reader or buffer.
         * @function decode
         * @memberof CGameNetworkingUI_ConnectionState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGameNetworkingUI_ConnectionState} CGameNetworkingUI_ConnectionState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGameNetworkingUI_ConnectionState.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGameNetworkingUI_ConnectionState();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.connectionKey = reader.string();
                        break;
                    }
                case 2: {
                        message.appid = reader.uint32();
                        break;
                    }
                case 3: {
                        message.connectionIdLocal = reader.fixed32();
                        break;
                    }
                case 4: {
                        message.identityLocal = reader.string();
                        break;
                    }
                case 5: {
                        message.identityRemote = reader.string();
                        break;
                    }
                case 10: {
                        message.connectionState = reader.uint32();
                        break;
                    }
                case 12: {
                        message.startTime = reader.uint32();
                        break;
                    }
                case 13: {
                        message.closeTime = reader.uint32();
                        break;
                    }
                case 14: {
                        message.closeReason = reader.uint32();
                        break;
                    }
                case 15: {
                        message.closeMessage = reader.string();
                        break;
                    }
                case 16: {
                        message.statusLocToken = reader.string();
                        break;
                    }
                case 20: {
                        message.transportKind = reader.uint32();
                        break;
                    }
                case 21: {
                        message.sdrpopidLocal = reader.string();
                        break;
                    }
                case 22: {
                        message.sdrpopidRemote = reader.string();
                        break;
                    }
                case 23: {
                        message.addressRemote = reader.string();
                        break;
                    }
                case 24: {
                        message.p2pRouting = $root.CMsgSteamDatagramP2PRoutingSummary.decode(reader, reader.uint32());
                        break;
                    }
                case 25: {
                        message.pingInterior = reader.uint32();
                        break;
                    }
                case 26: {
                        message.pingRemoteFront = reader.uint32();
                        break;
                    }
                case 27: {
                        message.pingDefaultInternetRoute = reader.uint32();
                        break;
                    }
                case 30: {
                        message.e2eQualityLocal = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 31: {
                        message.e2eQualityRemote = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 32: {
                        message.e2eQualityRemoteInstantaneousTime = reader.uint64();
                        break;
                    }
                case 33: {
                        message.e2eQualityRemoteLifetimeTime = reader.uint64();
                        break;
                    }
                case 40: {
                        message.frontQualityLocal = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 41: {
                        message.frontQualityRemote = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 42: {
                        message.frontQualityRemoteInstantaneousTime = reader.uint64();
                        break;
                    }
                case 43: {
                        message.frontQualityRemoteLifetimeTime = reader.uint64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGameNetworkingUI_ConnectionState message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGameNetworkingUI_ConnectionState
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGameNetworkingUI_ConnectionState} CGameNetworkingUI_ConnectionState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGameNetworkingUI_ConnectionState.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGameNetworkingUI_ConnectionState message.
         * @function verify
         * @memberof CGameNetworkingUI_ConnectionState
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGameNetworkingUI_ConnectionState.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectionKey != null && message.hasOwnProperty("connectionKey"))
                if (!$util.isString(message.connectionKey))
                    return "connectionKey: string expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.connectionIdLocal != null && message.hasOwnProperty("connectionIdLocal"))
                if (!$util.isInteger(message.connectionIdLocal))
                    return "connectionIdLocal: integer expected";
            if (message.identityLocal != null && message.hasOwnProperty("identityLocal"))
                if (!$util.isString(message.identityLocal))
                    return "identityLocal: string expected";
            if (message.identityRemote != null && message.hasOwnProperty("identityRemote"))
                if (!$util.isString(message.identityRemote))
                    return "identityRemote: string expected";
            if (message.connectionState != null && message.hasOwnProperty("connectionState"))
                if (!$util.isInteger(message.connectionState))
                    return "connectionState: integer expected";
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                if (!$util.isInteger(message.startTime))
                    return "startTime: integer expected";
            if (message.closeTime != null && message.hasOwnProperty("closeTime"))
                if (!$util.isInteger(message.closeTime))
                    return "closeTime: integer expected";
            if (message.closeReason != null && message.hasOwnProperty("closeReason"))
                if (!$util.isInteger(message.closeReason))
                    return "closeReason: integer expected";
            if (message.closeMessage != null && message.hasOwnProperty("closeMessage"))
                if (!$util.isString(message.closeMessage))
                    return "closeMessage: string expected";
            if (message.statusLocToken != null && message.hasOwnProperty("statusLocToken"))
                if (!$util.isString(message.statusLocToken))
                    return "statusLocToken: string expected";
            if (message.transportKind != null && message.hasOwnProperty("transportKind"))
                if (!$util.isInteger(message.transportKind))
                    return "transportKind: integer expected";
            if (message.sdrpopidLocal != null && message.hasOwnProperty("sdrpopidLocal"))
                if (!$util.isString(message.sdrpopidLocal))
                    return "sdrpopidLocal: string expected";
            if (message.sdrpopidRemote != null && message.hasOwnProperty("sdrpopidRemote"))
                if (!$util.isString(message.sdrpopidRemote))
                    return "sdrpopidRemote: string expected";
            if (message.addressRemote != null && message.hasOwnProperty("addressRemote"))
                if (!$util.isString(message.addressRemote))
                    return "addressRemote: string expected";
            if (message.p2pRouting != null && message.hasOwnProperty("p2pRouting")) {
                var error = $root.CMsgSteamDatagramP2PRoutingSummary.verify(message.p2pRouting);
                if (error)
                    return "p2pRouting." + error;
            }
            if (message.pingInterior != null && message.hasOwnProperty("pingInterior"))
                if (!$util.isInteger(message.pingInterior))
                    return "pingInterior: integer expected";
            if (message.pingRemoteFront != null && message.hasOwnProperty("pingRemoteFront"))
                if (!$util.isInteger(message.pingRemoteFront))
                    return "pingRemoteFront: integer expected";
            if (message.pingDefaultInternetRoute != null && message.hasOwnProperty("pingDefaultInternetRoute"))
                if (!$util.isInteger(message.pingDefaultInternetRoute))
                    return "pingDefaultInternetRoute: integer expected";
            if (message.e2eQualityLocal != null && message.hasOwnProperty("e2eQualityLocal")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.e2eQualityLocal);
                if (error)
                    return "e2eQualityLocal." + error;
            }
            if (message.e2eQualityRemote != null && message.hasOwnProperty("e2eQualityRemote")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.e2eQualityRemote);
                if (error)
                    return "e2eQualityRemote." + error;
            }
            if (message.e2eQualityRemoteInstantaneousTime != null && message.hasOwnProperty("e2eQualityRemoteInstantaneousTime"))
                if (!$util.isInteger(message.e2eQualityRemoteInstantaneousTime) && !(message.e2eQualityRemoteInstantaneousTime && $util.isInteger(message.e2eQualityRemoteInstantaneousTime.low) && $util.isInteger(message.e2eQualityRemoteInstantaneousTime.high)))
                    return "e2eQualityRemoteInstantaneousTime: integer|Long expected";
            if (message.e2eQualityRemoteLifetimeTime != null && message.hasOwnProperty("e2eQualityRemoteLifetimeTime"))
                if (!$util.isInteger(message.e2eQualityRemoteLifetimeTime) && !(message.e2eQualityRemoteLifetimeTime && $util.isInteger(message.e2eQualityRemoteLifetimeTime.low) && $util.isInteger(message.e2eQualityRemoteLifetimeTime.high)))
                    return "e2eQualityRemoteLifetimeTime: integer|Long expected";
            if (message.frontQualityLocal != null && message.hasOwnProperty("frontQualityLocal")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.frontQualityLocal);
                if (error)
                    return "frontQualityLocal." + error;
            }
            if (message.frontQualityRemote != null && message.hasOwnProperty("frontQualityRemote")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.frontQualityRemote);
                if (error)
                    return "frontQualityRemote." + error;
            }
            if (message.frontQualityRemoteInstantaneousTime != null && message.hasOwnProperty("frontQualityRemoteInstantaneousTime"))
                if (!$util.isInteger(message.frontQualityRemoteInstantaneousTime) && !(message.frontQualityRemoteInstantaneousTime && $util.isInteger(message.frontQualityRemoteInstantaneousTime.low) && $util.isInteger(message.frontQualityRemoteInstantaneousTime.high)))
                    return "frontQualityRemoteInstantaneousTime: integer|Long expected";
            if (message.frontQualityRemoteLifetimeTime != null && message.hasOwnProperty("frontQualityRemoteLifetimeTime"))
                if (!$util.isInteger(message.frontQualityRemoteLifetimeTime) && !(message.frontQualityRemoteLifetimeTime && $util.isInteger(message.frontQualityRemoteLifetimeTime.low) && $util.isInteger(message.frontQualityRemoteLifetimeTime.high)))
                    return "frontQualityRemoteLifetimeTime: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CGameNetworkingUI_ConnectionState message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGameNetworkingUI_ConnectionState
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGameNetworkingUI_ConnectionState} CGameNetworkingUI_ConnectionState
         */
        CGameNetworkingUI_ConnectionState.fromObject = function fromObject(object) {
            if (object instanceof $root.CGameNetworkingUI_ConnectionState)
                return object;
            var message = new $root.CGameNetworkingUI_ConnectionState();
            if (object.connectionKey != null)
                message.connectionKey = String(object.connectionKey);
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.connectionIdLocal != null)
                message.connectionIdLocal = object.connectionIdLocal >>> 0;
            if (object.identityLocal != null)
                message.identityLocal = String(object.identityLocal);
            if (object.identityRemote != null)
                message.identityRemote = String(object.identityRemote);
            if (object.connectionState != null)
                message.connectionState = object.connectionState >>> 0;
            if (object.startTime != null)
                message.startTime = object.startTime >>> 0;
            if (object.closeTime != null)
                message.closeTime = object.closeTime >>> 0;
            if (object.closeReason != null)
                message.closeReason = object.closeReason >>> 0;
            if (object.closeMessage != null)
                message.closeMessage = String(object.closeMessage);
            if (object.statusLocToken != null)
                message.statusLocToken = String(object.statusLocToken);
            if (object.transportKind != null)
                message.transportKind = object.transportKind >>> 0;
            if (object.sdrpopidLocal != null)
                message.sdrpopidLocal = String(object.sdrpopidLocal);
            if (object.sdrpopidRemote != null)
                message.sdrpopidRemote = String(object.sdrpopidRemote);
            if (object.addressRemote != null)
                message.addressRemote = String(object.addressRemote);
            if (object.p2pRouting != null) {
                if (typeof object.p2pRouting !== "object")
                    throw TypeError(".CGameNetworkingUI_ConnectionState.p2pRouting: object expected");
                message.p2pRouting = $root.CMsgSteamDatagramP2PRoutingSummary.fromObject(object.p2pRouting);
            }
            if (object.pingInterior != null)
                message.pingInterior = object.pingInterior >>> 0;
            if (object.pingRemoteFront != null)
                message.pingRemoteFront = object.pingRemoteFront >>> 0;
            if (object.pingDefaultInternetRoute != null)
                message.pingDefaultInternetRoute = object.pingDefaultInternetRoute >>> 0;
            if (object.e2eQualityLocal != null) {
                if (typeof object.e2eQualityLocal !== "object")
                    throw TypeError(".CGameNetworkingUI_ConnectionState.e2eQualityLocal: object expected");
                message.e2eQualityLocal = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.e2eQualityLocal);
            }
            if (object.e2eQualityRemote != null) {
                if (typeof object.e2eQualityRemote !== "object")
                    throw TypeError(".CGameNetworkingUI_ConnectionState.e2eQualityRemote: object expected");
                message.e2eQualityRemote = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.e2eQualityRemote);
            }
            if (object.e2eQualityRemoteInstantaneousTime != null)
                if ($util.Long)
                    (message.e2eQualityRemoteInstantaneousTime = $util.Long.fromValue(object.e2eQualityRemoteInstantaneousTime)).unsigned = true;
                else if (typeof object.e2eQualityRemoteInstantaneousTime === "string")
                    message.e2eQualityRemoteInstantaneousTime = parseInt(object.e2eQualityRemoteInstantaneousTime, 10);
                else if (typeof object.e2eQualityRemoteInstantaneousTime === "number")
                    message.e2eQualityRemoteInstantaneousTime = object.e2eQualityRemoteInstantaneousTime;
                else if (typeof object.e2eQualityRemoteInstantaneousTime === "object")
                    message.e2eQualityRemoteInstantaneousTime = new $util.LongBits(object.e2eQualityRemoteInstantaneousTime.low >>> 0, object.e2eQualityRemoteInstantaneousTime.high >>> 0).toNumber(true);
            if (object.e2eQualityRemoteLifetimeTime != null)
                if ($util.Long)
                    (message.e2eQualityRemoteLifetimeTime = $util.Long.fromValue(object.e2eQualityRemoteLifetimeTime)).unsigned = true;
                else if (typeof object.e2eQualityRemoteLifetimeTime === "string")
                    message.e2eQualityRemoteLifetimeTime = parseInt(object.e2eQualityRemoteLifetimeTime, 10);
                else if (typeof object.e2eQualityRemoteLifetimeTime === "number")
                    message.e2eQualityRemoteLifetimeTime = object.e2eQualityRemoteLifetimeTime;
                else if (typeof object.e2eQualityRemoteLifetimeTime === "object")
                    message.e2eQualityRemoteLifetimeTime = new $util.LongBits(object.e2eQualityRemoteLifetimeTime.low >>> 0, object.e2eQualityRemoteLifetimeTime.high >>> 0).toNumber(true);
            if (object.frontQualityLocal != null) {
                if (typeof object.frontQualityLocal !== "object")
                    throw TypeError(".CGameNetworkingUI_ConnectionState.frontQualityLocal: object expected");
                message.frontQualityLocal = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.frontQualityLocal);
            }
            if (object.frontQualityRemote != null) {
                if (typeof object.frontQualityRemote !== "object")
                    throw TypeError(".CGameNetworkingUI_ConnectionState.frontQualityRemote: object expected");
                message.frontQualityRemote = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.frontQualityRemote);
            }
            if (object.frontQualityRemoteInstantaneousTime != null)
                if ($util.Long)
                    (message.frontQualityRemoteInstantaneousTime = $util.Long.fromValue(object.frontQualityRemoteInstantaneousTime)).unsigned = true;
                else if (typeof object.frontQualityRemoteInstantaneousTime === "string")
                    message.frontQualityRemoteInstantaneousTime = parseInt(object.frontQualityRemoteInstantaneousTime, 10);
                else if (typeof object.frontQualityRemoteInstantaneousTime === "number")
                    message.frontQualityRemoteInstantaneousTime = object.frontQualityRemoteInstantaneousTime;
                else if (typeof object.frontQualityRemoteInstantaneousTime === "object")
                    message.frontQualityRemoteInstantaneousTime = new $util.LongBits(object.frontQualityRemoteInstantaneousTime.low >>> 0, object.frontQualityRemoteInstantaneousTime.high >>> 0).toNumber(true);
            if (object.frontQualityRemoteLifetimeTime != null)
                if ($util.Long)
                    (message.frontQualityRemoteLifetimeTime = $util.Long.fromValue(object.frontQualityRemoteLifetimeTime)).unsigned = true;
                else if (typeof object.frontQualityRemoteLifetimeTime === "string")
                    message.frontQualityRemoteLifetimeTime = parseInt(object.frontQualityRemoteLifetimeTime, 10);
                else if (typeof object.frontQualityRemoteLifetimeTime === "number")
                    message.frontQualityRemoteLifetimeTime = object.frontQualityRemoteLifetimeTime;
                else if (typeof object.frontQualityRemoteLifetimeTime === "object")
                    message.frontQualityRemoteLifetimeTime = new $util.LongBits(object.frontQualityRemoteLifetimeTime.low >>> 0, object.frontQualityRemoteLifetimeTime.high >>> 0).toNumber(true);
            return message;
        };
    
        /**
         * Creates a plain object from a CGameNetworkingUI_ConnectionState message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGameNetworkingUI_ConnectionState
         * @static
         * @param {CGameNetworkingUI_ConnectionState} message CGameNetworkingUI_ConnectionState
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGameNetworkingUI_ConnectionState.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connectionKey = "";
                object.appid = 0;
                object.connectionIdLocal = 0;
                object.identityLocal = "";
                object.identityRemote = "";
                object.connectionState = 0;
                object.startTime = 0;
                object.closeTime = 0;
                object.closeReason = 0;
                object.closeMessage = "";
                object.statusLocToken = "";
                object.transportKind = 0;
                object.sdrpopidLocal = "";
                object.sdrpopidRemote = "";
                object.addressRemote = "";
                object.p2pRouting = null;
                object.pingInterior = 0;
                object.pingRemoteFront = 0;
                object.pingDefaultInternetRoute = 0;
                object.e2eQualityLocal = null;
                object.e2eQualityRemote = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.e2eQualityRemoteInstantaneousTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.e2eQualityRemoteInstantaneousTime = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.e2eQualityRemoteLifetimeTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.e2eQualityRemoteLifetimeTime = options.longs === String ? "0" : 0;
                object.frontQualityLocal = null;
                object.frontQualityRemote = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.frontQualityRemoteInstantaneousTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.frontQualityRemoteInstantaneousTime = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.frontQualityRemoteLifetimeTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.frontQualityRemoteLifetimeTime = options.longs === String ? "0" : 0;
            }
            if (message.connectionKey != null && message.hasOwnProperty("connectionKey"))
                object.connectionKey = message.connectionKey;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.connectionIdLocal != null && message.hasOwnProperty("connectionIdLocal"))
                object.connectionIdLocal = message.connectionIdLocal;
            if (message.identityLocal != null && message.hasOwnProperty("identityLocal"))
                object.identityLocal = message.identityLocal;
            if (message.identityRemote != null && message.hasOwnProperty("identityRemote"))
                object.identityRemote = message.identityRemote;
            if (message.connectionState != null && message.hasOwnProperty("connectionState"))
                object.connectionState = message.connectionState;
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                object.startTime = message.startTime;
            if (message.closeTime != null && message.hasOwnProperty("closeTime"))
                object.closeTime = message.closeTime;
            if (message.closeReason != null && message.hasOwnProperty("closeReason"))
                object.closeReason = message.closeReason;
            if (message.closeMessage != null && message.hasOwnProperty("closeMessage"))
                object.closeMessage = message.closeMessage;
            if (message.statusLocToken != null && message.hasOwnProperty("statusLocToken"))
                object.statusLocToken = message.statusLocToken;
            if (message.transportKind != null && message.hasOwnProperty("transportKind"))
                object.transportKind = message.transportKind;
            if (message.sdrpopidLocal != null && message.hasOwnProperty("sdrpopidLocal"))
                object.sdrpopidLocal = message.sdrpopidLocal;
            if (message.sdrpopidRemote != null && message.hasOwnProperty("sdrpopidRemote"))
                object.sdrpopidRemote = message.sdrpopidRemote;
            if (message.addressRemote != null && message.hasOwnProperty("addressRemote"))
                object.addressRemote = message.addressRemote;
            if (message.p2pRouting != null && message.hasOwnProperty("p2pRouting"))
                object.p2pRouting = $root.CMsgSteamDatagramP2PRoutingSummary.toObject(message.p2pRouting, options);
            if (message.pingInterior != null && message.hasOwnProperty("pingInterior"))
                object.pingInterior = message.pingInterior;
            if (message.pingRemoteFront != null && message.hasOwnProperty("pingRemoteFront"))
                object.pingRemoteFront = message.pingRemoteFront;
            if (message.pingDefaultInternetRoute != null && message.hasOwnProperty("pingDefaultInternetRoute"))
                object.pingDefaultInternetRoute = message.pingDefaultInternetRoute;
            if (message.e2eQualityLocal != null && message.hasOwnProperty("e2eQualityLocal"))
                object.e2eQualityLocal = $root.CMsgSteamDatagramConnectionQuality.toObject(message.e2eQualityLocal, options);
            if (message.e2eQualityRemote != null && message.hasOwnProperty("e2eQualityRemote"))
                object.e2eQualityRemote = $root.CMsgSteamDatagramConnectionQuality.toObject(message.e2eQualityRemote, options);
            if (message.e2eQualityRemoteInstantaneousTime != null && message.hasOwnProperty("e2eQualityRemoteInstantaneousTime"))
                if (typeof message.e2eQualityRemoteInstantaneousTime === "number")
                    object.e2eQualityRemoteInstantaneousTime = options.longs === String ? String(message.e2eQualityRemoteInstantaneousTime) : message.e2eQualityRemoteInstantaneousTime;
                else
                    object.e2eQualityRemoteInstantaneousTime = options.longs === String ? $util.Long.prototype.toString.call(message.e2eQualityRemoteInstantaneousTime) : options.longs === Number ? new $util.LongBits(message.e2eQualityRemoteInstantaneousTime.low >>> 0, message.e2eQualityRemoteInstantaneousTime.high >>> 0).toNumber(true) : message.e2eQualityRemoteInstantaneousTime;
            if (message.e2eQualityRemoteLifetimeTime != null && message.hasOwnProperty("e2eQualityRemoteLifetimeTime"))
                if (typeof message.e2eQualityRemoteLifetimeTime === "number")
                    object.e2eQualityRemoteLifetimeTime = options.longs === String ? String(message.e2eQualityRemoteLifetimeTime) : message.e2eQualityRemoteLifetimeTime;
                else
                    object.e2eQualityRemoteLifetimeTime = options.longs === String ? $util.Long.prototype.toString.call(message.e2eQualityRemoteLifetimeTime) : options.longs === Number ? new $util.LongBits(message.e2eQualityRemoteLifetimeTime.low >>> 0, message.e2eQualityRemoteLifetimeTime.high >>> 0).toNumber(true) : message.e2eQualityRemoteLifetimeTime;
            if (message.frontQualityLocal != null && message.hasOwnProperty("frontQualityLocal"))
                object.frontQualityLocal = $root.CMsgSteamDatagramConnectionQuality.toObject(message.frontQualityLocal, options);
            if (message.frontQualityRemote != null && message.hasOwnProperty("frontQualityRemote"))
                object.frontQualityRemote = $root.CMsgSteamDatagramConnectionQuality.toObject(message.frontQualityRemote, options);
            if (message.frontQualityRemoteInstantaneousTime != null && message.hasOwnProperty("frontQualityRemoteInstantaneousTime"))
                if (typeof message.frontQualityRemoteInstantaneousTime === "number")
                    object.frontQualityRemoteInstantaneousTime = options.longs === String ? String(message.frontQualityRemoteInstantaneousTime) : message.frontQualityRemoteInstantaneousTime;
                else
                    object.frontQualityRemoteInstantaneousTime = options.longs === String ? $util.Long.prototype.toString.call(message.frontQualityRemoteInstantaneousTime) : options.longs === Number ? new $util.LongBits(message.frontQualityRemoteInstantaneousTime.low >>> 0, message.frontQualityRemoteInstantaneousTime.high >>> 0).toNumber(true) : message.frontQualityRemoteInstantaneousTime;
            if (message.frontQualityRemoteLifetimeTime != null && message.hasOwnProperty("frontQualityRemoteLifetimeTime"))
                if (typeof message.frontQualityRemoteLifetimeTime === "number")
                    object.frontQualityRemoteLifetimeTime = options.longs === String ? String(message.frontQualityRemoteLifetimeTime) : message.frontQualityRemoteLifetimeTime;
                else
                    object.frontQualityRemoteLifetimeTime = options.longs === String ? $util.Long.prototype.toString.call(message.frontQualityRemoteLifetimeTime) : options.longs === Number ? new $util.LongBits(message.frontQualityRemoteLifetimeTime.low >>> 0, message.frontQualityRemoteLifetimeTime.high >>> 0).toNumber(true) : message.frontQualityRemoteLifetimeTime;
            return object;
        };
    
        /**
         * Converts this CGameNetworkingUI_ConnectionState to JSON.
         * @function toJSON
         * @memberof CGameNetworkingUI_ConnectionState
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGameNetworkingUI_ConnectionState.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CGameNetworkingUI_ConnectionState
         * @function getTypeUrl
         * @memberof CGameNetworkingUI_ConnectionState
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CGameNetworkingUI_ConnectionState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CGameNetworkingUI_ConnectionState";
        };
    
        return CGameNetworkingUI_ConnectionState;
    })();
    
    $root.CGameNetworkingUI_Message = (function() {
    
        /**
         * Properties of a CGameNetworkingUI_Message.
         * @exports ICGameNetworkingUI_Message
         * @interface ICGameNetworkingUI_Message
         * @property {Array.<ICGameNetworkingUI_ConnectionState>|null} [connectionState] CGameNetworkingUI_Message connectionState
         */
    
        /**
         * Constructs a new CGameNetworkingUI_Message.
         * @exports CGameNetworkingUI_Message
         * @classdesc Represents a CGameNetworkingUI_Message.
         * @implements ICGameNetworkingUI_Message
         * @constructor
         * @param {ICGameNetworkingUI_Message=} [properties] Properties to set
         */
        function CGameNetworkingUI_Message(properties) {
            this.connectionState = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGameNetworkingUI_Message connectionState.
         * @member {Array.<ICGameNetworkingUI_ConnectionState>} connectionState
         * @memberof CGameNetworkingUI_Message
         * @instance
         */
        CGameNetworkingUI_Message.prototype.connectionState = $util.emptyArray;
    
        /**
         * Creates a new CGameNetworkingUI_Message instance using the specified properties.
         * @function create
         * @memberof CGameNetworkingUI_Message
         * @static
         * @param {ICGameNetworkingUI_Message=} [properties] Properties to set
         * @returns {CGameNetworkingUI_Message} CGameNetworkingUI_Message instance
         */
        CGameNetworkingUI_Message.create = function create(properties) {
            return new CGameNetworkingUI_Message(properties);
        };
    
        /**
         * Encodes the specified CGameNetworkingUI_Message message. Does not implicitly {@link CGameNetworkingUI_Message.verify|verify} messages.
         * @function encode
         * @memberof CGameNetworkingUI_Message
         * @static
         * @param {ICGameNetworkingUI_Message} message CGameNetworkingUI_Message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGameNetworkingUI_Message.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectionState != null && message.connectionState.length)
                for (var i = 0; i < message.connectionState.length; ++i)
                    $root.CGameNetworkingUI_ConnectionState.encode(message.connectionState[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CGameNetworkingUI_Message message, length delimited. Does not implicitly {@link CGameNetworkingUI_Message.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGameNetworkingUI_Message
         * @static
         * @param {ICGameNetworkingUI_Message} message CGameNetworkingUI_Message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGameNetworkingUI_Message.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGameNetworkingUI_Message message from the specified reader or buffer.
         * @function decode
         * @memberof CGameNetworkingUI_Message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGameNetworkingUI_Message} CGameNetworkingUI_Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGameNetworkingUI_Message.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGameNetworkingUI_Message();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        if (!(message.connectionState && message.connectionState.length))
                            message.connectionState = [];
                        message.connectionState.push($root.CGameNetworkingUI_ConnectionState.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGameNetworkingUI_Message message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGameNetworkingUI_Message
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGameNetworkingUI_Message} CGameNetworkingUI_Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGameNetworkingUI_Message.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGameNetworkingUI_Message message.
         * @function verify
         * @memberof CGameNetworkingUI_Message
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGameNetworkingUI_Message.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectionState != null && message.hasOwnProperty("connectionState")) {
                if (!Array.isArray(message.connectionState))
                    return "connectionState: array expected";
                for (var i = 0; i < message.connectionState.length; ++i) {
                    var error = $root.CGameNetworkingUI_ConnectionState.verify(message.connectionState[i]);
                    if (error)
                        return "connectionState." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CGameNetworkingUI_Message message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGameNetworkingUI_Message
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGameNetworkingUI_Message} CGameNetworkingUI_Message
         */
        CGameNetworkingUI_Message.fromObject = function fromObject(object) {
            if (object instanceof $root.CGameNetworkingUI_Message)
                return object;
            var message = new $root.CGameNetworkingUI_Message();
            if (object.connectionState) {
                if (!Array.isArray(object.connectionState))
                    throw TypeError(".CGameNetworkingUI_Message.connectionState: array expected");
                message.connectionState = [];
                for (var i = 0; i < object.connectionState.length; ++i) {
                    if (typeof object.connectionState[i] !== "object")
                        throw TypeError(".CGameNetworkingUI_Message.connectionState: object expected");
                    message.connectionState[i] = $root.CGameNetworkingUI_ConnectionState.fromObject(object.connectionState[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CGameNetworkingUI_Message message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGameNetworkingUI_Message
         * @static
         * @param {CGameNetworkingUI_Message} message CGameNetworkingUI_Message
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGameNetworkingUI_Message.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.connectionState = [];
            if (message.connectionState && message.connectionState.length) {
                object.connectionState = [];
                for (var j = 0; j < message.connectionState.length; ++j)
                    object.connectionState[j] = $root.CGameNetworkingUI_ConnectionState.toObject(message.connectionState[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CGameNetworkingUI_Message to JSON.
         * @function toJSON
         * @memberof CGameNetworkingUI_Message
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGameNetworkingUI_Message.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CGameNetworkingUI_Message
         * @function getTypeUrl
         * @memberof CGameNetworkingUI_Message
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CGameNetworkingUI_Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CGameNetworkingUI_Message";
        };
    
        return CGameNetworkingUI_Message;
    })();
    
    $root.CGameNetworkingUI_ConnectionSummary = (function() {
    
        /**
         * Properties of a CGameNetworkingUI_ConnectionSummary.
         * @exports ICGameNetworkingUI_ConnectionSummary
         * @interface ICGameNetworkingUI_ConnectionSummary
         * @property {number|null} [transportKind] CGameNetworkingUI_ConnectionSummary transportKind
         * @property {number|null} [connectionState] CGameNetworkingUI_ConnectionSummary connectionState
         * @property {string|null} [sdrpopLocal] CGameNetworkingUI_ConnectionSummary sdrpopLocal
         * @property {string|null} [sdrpopRemote] CGameNetworkingUI_ConnectionSummary sdrpopRemote
         * @property {number|null} [pingMs] CGameNetworkingUI_ConnectionSummary pingMs
         * @property {number|null} [packetLoss] CGameNetworkingUI_ConnectionSummary packetLoss
         * @property {number|null} [pingDefaultInternetRoute] CGameNetworkingUI_ConnectionSummary pingDefaultInternetRoute
         * @property {boolean|null} [ipWasShared] CGameNetworkingUI_ConnectionSummary ipWasShared
         */
    
        /**
         * Constructs a new CGameNetworkingUI_ConnectionSummary.
         * @exports CGameNetworkingUI_ConnectionSummary
         * @classdesc Represents a CGameNetworkingUI_ConnectionSummary.
         * @implements ICGameNetworkingUI_ConnectionSummary
         * @constructor
         * @param {ICGameNetworkingUI_ConnectionSummary=} [properties] Properties to set
         */
        function CGameNetworkingUI_ConnectionSummary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGameNetworkingUI_ConnectionSummary transportKind.
         * @member {number} transportKind
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @instance
         */
        CGameNetworkingUI_ConnectionSummary.prototype.transportKind = 0;
    
        /**
         * CGameNetworkingUI_ConnectionSummary connectionState.
         * @member {number} connectionState
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @instance
         */
        CGameNetworkingUI_ConnectionSummary.prototype.connectionState = 0;
    
        /**
         * CGameNetworkingUI_ConnectionSummary sdrpopLocal.
         * @member {string} sdrpopLocal
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @instance
         */
        CGameNetworkingUI_ConnectionSummary.prototype.sdrpopLocal = "";
    
        /**
         * CGameNetworkingUI_ConnectionSummary sdrpopRemote.
         * @member {string} sdrpopRemote
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @instance
         */
        CGameNetworkingUI_ConnectionSummary.prototype.sdrpopRemote = "";
    
        /**
         * CGameNetworkingUI_ConnectionSummary pingMs.
         * @member {number} pingMs
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @instance
         */
        CGameNetworkingUI_ConnectionSummary.prototype.pingMs = 0;
    
        /**
         * CGameNetworkingUI_ConnectionSummary packetLoss.
         * @member {number} packetLoss
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @instance
         */
        CGameNetworkingUI_ConnectionSummary.prototype.packetLoss = 0;
    
        /**
         * CGameNetworkingUI_ConnectionSummary pingDefaultInternetRoute.
         * @member {number} pingDefaultInternetRoute
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @instance
         */
        CGameNetworkingUI_ConnectionSummary.prototype.pingDefaultInternetRoute = 0;
    
        /**
         * CGameNetworkingUI_ConnectionSummary ipWasShared.
         * @member {boolean} ipWasShared
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @instance
         */
        CGameNetworkingUI_ConnectionSummary.prototype.ipWasShared = false;
    
        /**
         * Creates a new CGameNetworkingUI_ConnectionSummary instance using the specified properties.
         * @function create
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @static
         * @param {ICGameNetworkingUI_ConnectionSummary=} [properties] Properties to set
         * @returns {CGameNetworkingUI_ConnectionSummary} CGameNetworkingUI_ConnectionSummary instance
         */
        CGameNetworkingUI_ConnectionSummary.create = function create(properties) {
            return new CGameNetworkingUI_ConnectionSummary(properties);
        };
    
        /**
         * Encodes the specified CGameNetworkingUI_ConnectionSummary message. Does not implicitly {@link CGameNetworkingUI_ConnectionSummary.verify|verify} messages.
         * @function encode
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @static
         * @param {ICGameNetworkingUI_ConnectionSummary} message CGameNetworkingUI_ConnectionSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGameNetworkingUI_ConnectionSummary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.transportKind != null && Object.hasOwnProperty.call(message, "transportKind"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.transportKind);
            if (message.sdrpopLocal != null && Object.hasOwnProperty.call(message, "sdrpopLocal"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.sdrpopLocal);
            if (message.sdrpopRemote != null && Object.hasOwnProperty.call(message, "sdrpopRemote"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.sdrpopRemote);
            if (message.pingMs != null && Object.hasOwnProperty.call(message, "pingMs"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pingMs);
            if (message.packetLoss != null && Object.hasOwnProperty.call(message, "packetLoss"))
                writer.uint32(/* id 5, wireType 5 =*/45).float(message.packetLoss);
            if (message.pingDefaultInternetRoute != null && Object.hasOwnProperty.call(message, "pingDefaultInternetRoute"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.pingDefaultInternetRoute);
            if (message.ipWasShared != null && Object.hasOwnProperty.call(message, "ipWasShared"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.ipWasShared);
            if (message.connectionState != null && Object.hasOwnProperty.call(message, "connectionState"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.connectionState);
            return writer;
        };
    
        /**
         * Encodes the specified CGameNetworkingUI_ConnectionSummary message, length delimited. Does not implicitly {@link CGameNetworkingUI_ConnectionSummary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @static
         * @param {ICGameNetworkingUI_ConnectionSummary} message CGameNetworkingUI_ConnectionSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGameNetworkingUI_ConnectionSummary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGameNetworkingUI_ConnectionSummary message from the specified reader or buffer.
         * @function decode
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGameNetworkingUI_ConnectionSummary} CGameNetworkingUI_ConnectionSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGameNetworkingUI_ConnectionSummary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGameNetworkingUI_ConnectionSummary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.transportKind = reader.uint32();
                        break;
                    }
                case 8: {
                        message.connectionState = reader.uint32();
                        break;
                    }
                case 2: {
                        message.sdrpopLocal = reader.string();
                        break;
                    }
                case 3: {
                        message.sdrpopRemote = reader.string();
                        break;
                    }
                case 4: {
                        message.pingMs = reader.uint32();
                        break;
                    }
                case 5: {
                        message.packetLoss = reader.float();
                        break;
                    }
                case 6: {
                        message.pingDefaultInternetRoute = reader.uint32();
                        break;
                    }
                case 7: {
                        message.ipWasShared = reader.bool();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGameNetworkingUI_ConnectionSummary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGameNetworkingUI_ConnectionSummary} CGameNetworkingUI_ConnectionSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGameNetworkingUI_ConnectionSummary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGameNetworkingUI_ConnectionSummary message.
         * @function verify
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGameNetworkingUI_ConnectionSummary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.transportKind != null && message.hasOwnProperty("transportKind"))
                if (!$util.isInteger(message.transportKind))
                    return "transportKind: integer expected";
            if (message.connectionState != null && message.hasOwnProperty("connectionState"))
                if (!$util.isInteger(message.connectionState))
                    return "connectionState: integer expected";
            if (message.sdrpopLocal != null && message.hasOwnProperty("sdrpopLocal"))
                if (!$util.isString(message.sdrpopLocal))
                    return "sdrpopLocal: string expected";
            if (message.sdrpopRemote != null && message.hasOwnProperty("sdrpopRemote"))
                if (!$util.isString(message.sdrpopRemote))
                    return "sdrpopRemote: string expected";
            if (message.pingMs != null && message.hasOwnProperty("pingMs"))
                if (!$util.isInteger(message.pingMs))
                    return "pingMs: integer expected";
            if (message.packetLoss != null && message.hasOwnProperty("packetLoss"))
                if (typeof message.packetLoss !== "number")
                    return "packetLoss: number expected";
            if (message.pingDefaultInternetRoute != null && message.hasOwnProperty("pingDefaultInternetRoute"))
                if (!$util.isInteger(message.pingDefaultInternetRoute))
                    return "pingDefaultInternetRoute: integer expected";
            if (message.ipWasShared != null && message.hasOwnProperty("ipWasShared"))
                if (typeof message.ipWasShared !== "boolean")
                    return "ipWasShared: boolean expected";
            return null;
        };
    
        /**
         * Creates a CGameNetworkingUI_ConnectionSummary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGameNetworkingUI_ConnectionSummary} CGameNetworkingUI_ConnectionSummary
         */
        CGameNetworkingUI_ConnectionSummary.fromObject = function fromObject(object) {
            if (object instanceof $root.CGameNetworkingUI_ConnectionSummary)
                return object;
            var message = new $root.CGameNetworkingUI_ConnectionSummary();
            if (object.transportKind != null)
                message.transportKind = object.transportKind >>> 0;
            if (object.connectionState != null)
                message.connectionState = object.connectionState >>> 0;
            if (object.sdrpopLocal != null)
                message.sdrpopLocal = String(object.sdrpopLocal);
            if (object.sdrpopRemote != null)
                message.sdrpopRemote = String(object.sdrpopRemote);
            if (object.pingMs != null)
                message.pingMs = object.pingMs >>> 0;
            if (object.packetLoss != null)
                message.packetLoss = Number(object.packetLoss);
            if (object.pingDefaultInternetRoute != null)
                message.pingDefaultInternetRoute = object.pingDefaultInternetRoute >>> 0;
            if (object.ipWasShared != null)
                message.ipWasShared = Boolean(object.ipWasShared);
            return message;
        };
    
        /**
         * Creates a plain object from a CGameNetworkingUI_ConnectionSummary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @static
         * @param {CGameNetworkingUI_ConnectionSummary} message CGameNetworkingUI_ConnectionSummary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGameNetworkingUI_ConnectionSummary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.transportKind = 0;
                object.sdrpopLocal = "";
                object.sdrpopRemote = "";
                object.pingMs = 0;
                object.packetLoss = 0;
                object.pingDefaultInternetRoute = 0;
                object.ipWasShared = false;
                object.connectionState = 0;
            }
            if (message.transportKind != null && message.hasOwnProperty("transportKind"))
                object.transportKind = message.transportKind;
            if (message.sdrpopLocal != null && message.hasOwnProperty("sdrpopLocal"))
                object.sdrpopLocal = message.sdrpopLocal;
            if (message.sdrpopRemote != null && message.hasOwnProperty("sdrpopRemote"))
                object.sdrpopRemote = message.sdrpopRemote;
            if (message.pingMs != null && message.hasOwnProperty("pingMs"))
                object.pingMs = message.pingMs;
            if (message.packetLoss != null && message.hasOwnProperty("packetLoss"))
                object.packetLoss = options.json && !isFinite(message.packetLoss) ? String(message.packetLoss) : message.packetLoss;
            if (message.pingDefaultInternetRoute != null && message.hasOwnProperty("pingDefaultInternetRoute"))
                object.pingDefaultInternetRoute = message.pingDefaultInternetRoute;
            if (message.ipWasShared != null && message.hasOwnProperty("ipWasShared"))
                object.ipWasShared = message.ipWasShared;
            if (message.connectionState != null && message.hasOwnProperty("connectionState"))
                object.connectionState = message.connectionState;
            return object;
        };
    
        /**
         * Converts this CGameNetworkingUI_ConnectionSummary to JSON.
         * @function toJSON
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGameNetworkingUI_ConnectionSummary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CGameNetworkingUI_ConnectionSummary
         * @function getTypeUrl
         * @memberof CGameNetworkingUI_ConnectionSummary
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CGameNetworkingUI_ConnectionSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CGameNetworkingUI_ConnectionSummary";
        };
    
        return CGameNetworkingUI_ConnectionSummary;
    })();
    
    $root.CGameNetworkingUI_AppSummary = (function() {
    
        /**
         * Properties of a CGameNetworkingUI_AppSummary.
         * @exports ICGameNetworkingUI_AppSummary
         * @interface ICGameNetworkingUI_AppSummary
         * @property {number|null} [appid] CGameNetworkingUI_AppSummary appid
         * @property {boolean|null} [ipWasSharedWithFriend] CGameNetworkingUI_AppSummary ipWasSharedWithFriend
         * @property {boolean|null} [ipWasSharedWithNonfriend] CGameNetworkingUI_AppSummary ipWasSharedWithNonfriend
         * @property {number|null} [activeConnections] CGameNetworkingUI_AppSummary activeConnections
         * @property {ICGameNetworkingUI_ConnectionSummary|null} [mainCxn] CGameNetworkingUI_AppSummary mainCxn
         */
    
        /**
         * Constructs a new CGameNetworkingUI_AppSummary.
         * @exports CGameNetworkingUI_AppSummary
         * @classdesc Represents a CGameNetworkingUI_AppSummary.
         * @implements ICGameNetworkingUI_AppSummary
         * @constructor
         * @param {ICGameNetworkingUI_AppSummary=} [properties] Properties to set
         */
        function CGameNetworkingUI_AppSummary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CGameNetworkingUI_AppSummary appid.
         * @member {number} appid
         * @memberof CGameNetworkingUI_AppSummary
         * @instance
         */
        CGameNetworkingUI_AppSummary.prototype.appid = 0;
    
        /**
         * CGameNetworkingUI_AppSummary ipWasSharedWithFriend.
         * @member {boolean} ipWasSharedWithFriend
         * @memberof CGameNetworkingUI_AppSummary
         * @instance
         */
        CGameNetworkingUI_AppSummary.prototype.ipWasSharedWithFriend = false;
    
        /**
         * CGameNetworkingUI_AppSummary ipWasSharedWithNonfriend.
         * @member {boolean} ipWasSharedWithNonfriend
         * @memberof CGameNetworkingUI_AppSummary
         * @instance
         */
        CGameNetworkingUI_AppSummary.prototype.ipWasSharedWithNonfriend = false;
    
        /**
         * CGameNetworkingUI_AppSummary activeConnections.
         * @member {number} activeConnections
         * @memberof CGameNetworkingUI_AppSummary
         * @instance
         */
        CGameNetworkingUI_AppSummary.prototype.activeConnections = 0;
    
        /**
         * CGameNetworkingUI_AppSummary mainCxn.
         * @member {ICGameNetworkingUI_ConnectionSummary|null|undefined} mainCxn
         * @memberof CGameNetworkingUI_AppSummary
         * @instance
         */
        CGameNetworkingUI_AppSummary.prototype.mainCxn = null;
    
        /**
         * Creates a new CGameNetworkingUI_AppSummary instance using the specified properties.
         * @function create
         * @memberof CGameNetworkingUI_AppSummary
         * @static
         * @param {ICGameNetworkingUI_AppSummary=} [properties] Properties to set
         * @returns {CGameNetworkingUI_AppSummary} CGameNetworkingUI_AppSummary instance
         */
        CGameNetworkingUI_AppSummary.create = function create(properties) {
            return new CGameNetworkingUI_AppSummary(properties);
        };
    
        /**
         * Encodes the specified CGameNetworkingUI_AppSummary message. Does not implicitly {@link CGameNetworkingUI_AppSummary.verify|verify} messages.
         * @function encode
         * @memberof CGameNetworkingUI_AppSummary
         * @static
         * @param {ICGameNetworkingUI_AppSummary} message CGameNetworkingUI_AppSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGameNetworkingUI_AppSummary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.appid);
            if (message.ipWasSharedWithFriend != null && Object.hasOwnProperty.call(message, "ipWasSharedWithFriend"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.ipWasSharedWithFriend);
            if (message.ipWasSharedWithNonfriend != null && Object.hasOwnProperty.call(message, "ipWasSharedWithNonfriend"))
                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.ipWasSharedWithNonfriend);
            if (message.activeConnections != null && Object.hasOwnProperty.call(message, "activeConnections"))
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.activeConnections);
            if (message.mainCxn != null && Object.hasOwnProperty.call(message, "mainCxn"))
                $root.CGameNetworkingUI_ConnectionSummary.encode(message.mainCxn, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CGameNetworkingUI_AppSummary message, length delimited. Does not implicitly {@link CGameNetworkingUI_AppSummary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CGameNetworkingUI_AppSummary
         * @static
         * @param {ICGameNetworkingUI_AppSummary} message CGameNetworkingUI_AppSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CGameNetworkingUI_AppSummary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CGameNetworkingUI_AppSummary message from the specified reader or buffer.
         * @function decode
         * @memberof CGameNetworkingUI_AppSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CGameNetworkingUI_AppSummary} CGameNetworkingUI_AppSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGameNetworkingUI_AppSummary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CGameNetworkingUI_AppSummary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.appid = reader.uint32();
                        break;
                    }
                case 10: {
                        message.ipWasSharedWithFriend = reader.bool();
                        break;
                    }
                case 11: {
                        message.ipWasSharedWithNonfriend = reader.bool();
                        break;
                    }
                case 20: {
                        message.activeConnections = reader.uint32();
                        break;
                    }
                case 30: {
                        message.mainCxn = $root.CGameNetworkingUI_ConnectionSummary.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CGameNetworkingUI_AppSummary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CGameNetworkingUI_AppSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CGameNetworkingUI_AppSummary} CGameNetworkingUI_AppSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CGameNetworkingUI_AppSummary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CGameNetworkingUI_AppSummary message.
         * @function verify
         * @memberof CGameNetworkingUI_AppSummary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CGameNetworkingUI_AppSummary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.ipWasSharedWithFriend != null && message.hasOwnProperty("ipWasSharedWithFriend"))
                if (typeof message.ipWasSharedWithFriend !== "boolean")
                    return "ipWasSharedWithFriend: boolean expected";
            if (message.ipWasSharedWithNonfriend != null && message.hasOwnProperty("ipWasSharedWithNonfriend"))
                if (typeof message.ipWasSharedWithNonfriend !== "boolean")
                    return "ipWasSharedWithNonfriend: boolean expected";
            if (message.activeConnections != null && message.hasOwnProperty("activeConnections"))
                if (!$util.isInteger(message.activeConnections))
                    return "activeConnections: integer expected";
            if (message.mainCxn != null && message.hasOwnProperty("mainCxn")) {
                var error = $root.CGameNetworkingUI_ConnectionSummary.verify(message.mainCxn);
                if (error)
                    return "mainCxn." + error;
            }
            return null;
        };
    
        /**
         * Creates a CGameNetworkingUI_AppSummary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CGameNetworkingUI_AppSummary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CGameNetworkingUI_AppSummary} CGameNetworkingUI_AppSummary
         */
        CGameNetworkingUI_AppSummary.fromObject = function fromObject(object) {
            if (object instanceof $root.CGameNetworkingUI_AppSummary)
                return object;
            var message = new $root.CGameNetworkingUI_AppSummary();
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.ipWasSharedWithFriend != null)
                message.ipWasSharedWithFriend = Boolean(object.ipWasSharedWithFriend);
            if (object.ipWasSharedWithNonfriend != null)
                message.ipWasSharedWithNonfriend = Boolean(object.ipWasSharedWithNonfriend);
            if (object.activeConnections != null)
                message.activeConnections = object.activeConnections >>> 0;
            if (object.mainCxn != null) {
                if (typeof object.mainCxn !== "object")
                    throw TypeError(".CGameNetworkingUI_AppSummary.mainCxn: object expected");
                message.mainCxn = $root.CGameNetworkingUI_ConnectionSummary.fromObject(object.mainCxn);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CGameNetworkingUI_AppSummary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CGameNetworkingUI_AppSummary
         * @static
         * @param {CGameNetworkingUI_AppSummary} message CGameNetworkingUI_AppSummary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CGameNetworkingUI_AppSummary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.appid = 0;
                object.ipWasSharedWithFriend = false;
                object.ipWasSharedWithNonfriend = false;
                object.activeConnections = 0;
                object.mainCxn = null;
            }
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.ipWasSharedWithFriend != null && message.hasOwnProperty("ipWasSharedWithFriend"))
                object.ipWasSharedWithFriend = message.ipWasSharedWithFriend;
            if (message.ipWasSharedWithNonfriend != null && message.hasOwnProperty("ipWasSharedWithNonfriend"))
                object.ipWasSharedWithNonfriend = message.ipWasSharedWithNonfriend;
            if (message.activeConnections != null && message.hasOwnProperty("activeConnections"))
                object.activeConnections = message.activeConnections;
            if (message.mainCxn != null && message.hasOwnProperty("mainCxn"))
                object.mainCxn = $root.CGameNetworkingUI_ConnectionSummary.toObject(message.mainCxn, options);
            return object;
        };
    
        /**
         * Converts this CGameNetworkingUI_AppSummary to JSON.
         * @function toJSON
         * @memberof CGameNetworkingUI_AppSummary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CGameNetworkingUI_AppSummary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CGameNetworkingUI_AppSummary
         * @function getTypeUrl
         * @memberof CGameNetworkingUI_AppSummary
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CGameNetworkingUI_AppSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CGameNetworkingUI_AppSummary";
        };
    
        return CGameNetworkingUI_AppSummary;
    })();
    
    /**
     * ESteamNetworkingSocketsCipher enum.
     * @exports ESteamNetworkingSocketsCipher
     * @enum {number}
     * @property {number} k_ESteamNetworkingSocketsCipher_INVALID=0 k_ESteamNetworkingSocketsCipher_INVALID value
     * @property {number} k_ESteamNetworkingSocketsCipher_NULL=1 k_ESteamNetworkingSocketsCipher_NULL value
     * @property {number} k_ESteamNetworkingSocketsCipher_AES_256_GCM=2 k_ESteamNetworkingSocketsCipher_AES_256_GCM value
     */
    $root.ESteamNetworkingSocketsCipher = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_ESteamNetworkingSocketsCipher_INVALID"] = 0;
        values[valuesById[1] = "k_ESteamNetworkingSocketsCipher_NULL"] = 1;
        values[valuesById[2] = "k_ESteamNetworkingSocketsCipher_AES_256_GCM"] = 2;
        return values;
    })();
    
    $root.CMsgSteamDatagramSessionCryptInfo = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramSessionCryptInfo.
         * @exports ICMsgSteamDatagramSessionCryptInfo
         * @interface ICMsgSteamDatagramSessionCryptInfo
         * @property {CMsgSteamDatagramSessionCryptInfo.EKeyType|null} [keyType] CMsgSteamDatagramSessionCryptInfo keyType
         * @property {Uint8Array|null} [keyData] CMsgSteamDatagramSessionCryptInfo keyData
         * @property {number|Long|null} [nonce] CMsgSteamDatagramSessionCryptInfo nonce
         * @property {number|null} [protocolVersion] CMsgSteamDatagramSessionCryptInfo protocolVersion
         * @property {Array.<ESteamNetworkingSocketsCipher>|null} [ciphers] CMsgSteamDatagramSessionCryptInfo ciphers
         */
    
        /**
         * Constructs a new CMsgSteamDatagramSessionCryptInfo.
         * @exports CMsgSteamDatagramSessionCryptInfo
         * @classdesc Represents a CMsgSteamDatagramSessionCryptInfo.
         * @implements ICMsgSteamDatagramSessionCryptInfo
         * @constructor
         * @param {ICMsgSteamDatagramSessionCryptInfo=} [properties] Properties to set
         */
        function CMsgSteamDatagramSessionCryptInfo(properties) {
            this.ciphers = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramSessionCryptInfo keyType.
         * @member {CMsgSteamDatagramSessionCryptInfo.EKeyType} keyType
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.keyType = 0;
    
        /**
         * CMsgSteamDatagramSessionCryptInfo keyData.
         * @member {Uint8Array} keyData
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.keyData = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramSessionCryptInfo nonce.
         * @member {number|Long} nonce
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramSessionCryptInfo protocolVersion.
         * @member {number} protocolVersion
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.protocolVersion = 0;
    
        /**
         * CMsgSteamDatagramSessionCryptInfo ciphers.
         * @member {Array.<ESteamNetworkingSocketsCipher>} ciphers
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.ciphers = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamDatagramSessionCryptInfo instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfo=} [properties] Properties to set
         * @returns {CMsgSteamDatagramSessionCryptInfo} CMsgSteamDatagramSessionCryptInfo instance
         */
        CMsgSteamDatagramSessionCryptInfo.create = function create(properties) {
            return new CMsgSteamDatagramSessionCryptInfo(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSessionCryptInfo message. Does not implicitly {@link CMsgSteamDatagramSessionCryptInfo.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfo} message CMsgSteamDatagramSessionCryptInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSessionCryptInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.keyType != null && Object.hasOwnProperty.call(message, "keyType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);
            if (message.keyData != null && Object.hasOwnProperty.call(message, "keyData"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.keyData);
            if (message.nonce != null && Object.hasOwnProperty.call(message, "nonce"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.nonce);
            if (message.protocolVersion != null && Object.hasOwnProperty.call(message, "protocolVersion"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.protocolVersion);
            if (message.ciphers != null && message.ciphers.length)
                for (var i = 0; i < message.ciphers.length; ++i)
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.ciphers[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSessionCryptInfo message, length delimited. Does not implicitly {@link CMsgSteamDatagramSessionCryptInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfo} message CMsgSteamDatagramSessionCryptInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSessionCryptInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramSessionCryptInfo message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramSessionCryptInfo} CMsgSteamDatagramSessionCryptInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSessionCryptInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramSessionCryptInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.keyType = reader.int32();
                        break;
                    }
                case 2: {
                        message.keyData = reader.bytes();
                        break;
                    }
                case 3: {
                        message.nonce = reader.fixed64();
                        break;
                    }
                case 4: {
                        message.protocolVersion = reader.uint32();
                        break;
                    }
                case 5: {
                        if (!(message.ciphers && message.ciphers.length))
                            message.ciphers = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ciphers.push(reader.int32());
                        } else
                            message.ciphers.push(reader.int32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramSessionCryptInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramSessionCryptInfo} CMsgSteamDatagramSessionCryptInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSessionCryptInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramSessionCryptInfo message.
         * @function verify
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramSessionCryptInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.keyType != null && message.hasOwnProperty("keyType"))
                switch (message.keyType) {
                default:
                    return "keyType: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.keyData != null && message.hasOwnProperty("keyData"))
                if (!(message.keyData && typeof message.keyData.length === "number" || $util.isString(message.keyData)))
                    return "keyData: buffer expected";
            if (message.nonce != null && message.hasOwnProperty("nonce"))
                if (!$util.isInteger(message.nonce) && !(message.nonce && $util.isInteger(message.nonce.low) && $util.isInteger(message.nonce.high)))
                    return "nonce: integer|Long expected";
            if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
                if (!$util.isInteger(message.protocolVersion))
                    return "protocolVersion: integer expected";
            if (message.ciphers != null && message.hasOwnProperty("ciphers")) {
                if (!Array.isArray(message.ciphers))
                    return "ciphers: array expected";
                for (var i = 0; i < message.ciphers.length; ++i)
                    switch (message.ciphers[i]) {
                    default:
                        return "ciphers: enum value[] expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramSessionCryptInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramSessionCryptInfo} CMsgSteamDatagramSessionCryptInfo
         */
        CMsgSteamDatagramSessionCryptInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramSessionCryptInfo)
                return object;
            var message = new $root.CMsgSteamDatagramSessionCryptInfo();
            switch (object.keyType) {
            default:
                if (typeof object.keyType === "number") {
                    message.keyType = object.keyType;
                    break;
                }
                break;
            case "INVALID":
            case 0:
                message.keyType = 0;
                break;
            case "CURVE25519":
            case 1:
                message.keyType = 1;
                break;
            }
            if (object.keyData != null)
                if (typeof object.keyData === "string")
                    $util.base64.decode(object.keyData, message.keyData = $util.newBuffer($util.base64.length(object.keyData)), 0);
                else if (object.keyData.length >= 0)
                    message.keyData = object.keyData;
            if (object.nonce != null)
                if ($util.Long)
                    (message.nonce = $util.Long.fromValue(object.nonce)).unsigned = false;
                else if (typeof object.nonce === "string")
                    message.nonce = parseInt(object.nonce, 10);
                else if (typeof object.nonce === "number")
                    message.nonce = object.nonce;
                else if (typeof object.nonce === "object")
                    message.nonce = new $util.LongBits(object.nonce.low >>> 0, object.nonce.high >>> 0).toNumber();
            if (object.protocolVersion != null)
                message.protocolVersion = object.protocolVersion >>> 0;
            if (object.ciphers) {
                if (!Array.isArray(object.ciphers))
                    throw TypeError(".CMsgSteamDatagramSessionCryptInfo.ciphers: array expected");
                message.ciphers = [];
                for (var i = 0; i < object.ciphers.length; ++i)
                    switch (object.ciphers[i]) {
                    default:
                        if (typeof object.ciphers[i] === "number") {
                            message.ciphers[i] = object.ciphers[i];
                            break;
                        }
                    case "k_ESteamNetworkingSocketsCipher_INVALID":
                    case 0:
                        message.ciphers[i] = 0;
                        break;
                    case "k_ESteamNetworkingSocketsCipher_NULL":
                    case 1:
                        message.ciphers[i] = 1;
                        break;
                    case "k_ESteamNetworkingSocketsCipher_AES_256_GCM":
                    case 2:
                        message.ciphers[i] = 2;
                        break;
                    }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramSessionCryptInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {CMsgSteamDatagramSessionCryptInfo} message CMsgSteamDatagramSessionCryptInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramSessionCryptInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ciphers = [];
            if (options.defaults) {
                object.keyType = options.enums === String ? "INVALID" : 0;
                if (options.bytes === String)
                    object.keyData = "";
                else {
                    object.keyData = [];
                    if (options.bytes !== Array)
                        object.keyData = $util.newBuffer(object.keyData);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.nonce = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.nonce = options.longs === String ? "0" : 0;
                object.protocolVersion = 0;
            }
            if (message.keyType != null && message.hasOwnProperty("keyType"))
                object.keyType = options.enums === String ? $root.CMsgSteamDatagramSessionCryptInfo.EKeyType[message.keyType] === undefined ? message.keyType : $root.CMsgSteamDatagramSessionCryptInfo.EKeyType[message.keyType] : message.keyType;
            if (message.keyData != null && message.hasOwnProperty("keyData"))
                object.keyData = options.bytes === String ? $util.base64.encode(message.keyData, 0, message.keyData.length) : options.bytes === Array ? Array.prototype.slice.call(message.keyData) : message.keyData;
            if (message.nonce != null && message.hasOwnProperty("nonce"))
                if (typeof message.nonce === "number")
                    object.nonce = options.longs === String ? String(message.nonce) : message.nonce;
                else
                    object.nonce = options.longs === String ? $util.Long.prototype.toString.call(message.nonce) : options.longs === Number ? new $util.LongBits(message.nonce.low >>> 0, message.nonce.high >>> 0).toNumber() : message.nonce;
            if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
                object.protocolVersion = message.protocolVersion;
            if (message.ciphers && message.ciphers.length) {
                object.ciphers = [];
                for (var j = 0; j < message.ciphers.length; ++j)
                    object.ciphers[j] = options.enums === String ? $root.ESteamNetworkingSocketsCipher[message.ciphers[j]] === undefined ? message.ciphers[j] : $root.ESteamNetworkingSocketsCipher[message.ciphers[j]] : message.ciphers[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramSessionCryptInfo to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramSessionCryptInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramSessionCryptInfo
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramSessionCryptInfo
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramSessionCryptInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramSessionCryptInfo";
        };
    
        /**
         * EKeyType enum.
         * @name CMsgSteamDatagramSessionCryptInfo.EKeyType
         * @enum {number}
         * @property {number} INVALID=0 INVALID value
         * @property {number} CURVE25519=1 CURVE25519 value
         */
        CMsgSteamDatagramSessionCryptInfo.EKeyType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "INVALID"] = 0;
            values[valuesById[1] = "CURVE25519"] = 1;
            return values;
        })();
    
        return CMsgSteamDatagramSessionCryptInfo;
    })();
    
    $root.CMsgSteamDatagramSessionCryptInfoSigned = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramSessionCryptInfoSigned.
         * @exports ICMsgSteamDatagramSessionCryptInfoSigned
         * @interface ICMsgSteamDatagramSessionCryptInfoSigned
         * @property {Uint8Array|null} [info] CMsgSteamDatagramSessionCryptInfoSigned info
         * @property {Uint8Array|null} [signature] CMsgSteamDatagramSessionCryptInfoSigned signature
         */
    
        /**
         * Constructs a new CMsgSteamDatagramSessionCryptInfoSigned.
         * @exports CMsgSteamDatagramSessionCryptInfoSigned
         * @classdesc Represents a CMsgSteamDatagramSessionCryptInfoSigned.
         * @implements ICMsgSteamDatagramSessionCryptInfoSigned
         * @constructor
         * @param {ICMsgSteamDatagramSessionCryptInfoSigned=} [properties] Properties to set
         */
        function CMsgSteamDatagramSessionCryptInfoSigned(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramSessionCryptInfoSigned info.
         * @member {Uint8Array} info
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfoSigned.prototype.info = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramSessionCryptInfoSigned signature.
         * @member {Uint8Array} signature
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @instance
         */
        CMsgSteamDatagramSessionCryptInfoSigned.prototype.signature = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramSessionCryptInfoSigned instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfoSigned=} [properties] Properties to set
         * @returns {CMsgSteamDatagramSessionCryptInfoSigned} CMsgSteamDatagramSessionCryptInfoSigned instance
         */
        CMsgSteamDatagramSessionCryptInfoSigned.create = function create(properties) {
            return new CMsgSteamDatagramSessionCryptInfoSigned(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSessionCryptInfoSigned message. Does not implicitly {@link CMsgSteamDatagramSessionCryptInfoSigned.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfoSigned} message CMsgSteamDatagramSessionCryptInfoSigned message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSessionCryptInfoSigned.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.info);
            if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.signature);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSessionCryptInfoSigned message, length delimited. Does not implicitly {@link CMsgSteamDatagramSessionCryptInfoSigned.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {ICMsgSteamDatagramSessionCryptInfoSigned} message CMsgSteamDatagramSessionCryptInfoSigned message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSessionCryptInfoSigned.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramSessionCryptInfoSigned message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramSessionCryptInfoSigned} CMsgSteamDatagramSessionCryptInfoSigned
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSessionCryptInfoSigned.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramSessionCryptInfoSigned();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.info = reader.bytes();
                        break;
                    }
                case 2: {
                        message.signature = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramSessionCryptInfoSigned message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramSessionCryptInfoSigned} CMsgSteamDatagramSessionCryptInfoSigned
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSessionCryptInfoSigned.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramSessionCryptInfoSigned message.
         * @function verify
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramSessionCryptInfoSigned.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            if (message.signature != null && message.hasOwnProperty("signature"))
                if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                    return "signature: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramSessionCryptInfoSigned message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramSessionCryptInfoSigned} CMsgSteamDatagramSessionCryptInfoSigned
         */
        CMsgSteamDatagramSessionCryptInfoSigned.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramSessionCryptInfoSigned)
                return object;
            var message = new $root.CMsgSteamDatagramSessionCryptInfoSigned();
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length >= 0)
                    message.info = object.info;
            if (object.signature != null)
                if (typeof object.signature === "string")
                    $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                else if (object.signature.length >= 0)
                    message.signature = object.signature;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramSessionCryptInfoSigned message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {CMsgSteamDatagramSessionCryptInfoSigned} message CMsgSteamDatagramSessionCryptInfoSigned
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramSessionCryptInfoSigned.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.info = "";
                else {
                    object.info = [];
                    if (options.bytes !== Array)
                        object.info = $util.newBuffer(object.info);
                }
                if (options.bytes === String)
                    object.signature = "";
                else {
                    object.signature = [];
                    if (options.bytes !== Array)
                        object.signature = $util.newBuffer(object.signature);
                }
            }
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramSessionCryptInfoSigned to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramSessionCryptInfoSigned.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramSessionCryptInfoSigned
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramSessionCryptInfoSigned
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramSessionCryptInfoSigned.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramSessionCryptInfoSigned";
        };
    
        return CMsgSteamDatagramSessionCryptInfoSigned;
    })();
    
    $root.CMsgSteamDatagramDiagnostic = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramDiagnostic.
         * @exports ICMsgSteamDatagramDiagnostic
         * @interface ICMsgSteamDatagramDiagnostic
         * @property {number|null} [severity] CMsgSteamDatagramDiagnostic severity
         * @property {string|null} [text] CMsgSteamDatagramDiagnostic text
         */
    
        /**
         * Constructs a new CMsgSteamDatagramDiagnostic.
         * @exports CMsgSteamDatagramDiagnostic
         * @classdesc Represents a CMsgSteamDatagramDiagnostic.
         * @implements ICMsgSteamDatagramDiagnostic
         * @constructor
         * @param {ICMsgSteamDatagramDiagnostic=} [properties] Properties to set
         */
        function CMsgSteamDatagramDiagnostic(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramDiagnostic severity.
         * @member {number} severity
         * @memberof CMsgSteamDatagramDiagnostic
         * @instance
         */
        CMsgSteamDatagramDiagnostic.prototype.severity = 0;
    
        /**
         * CMsgSteamDatagramDiagnostic text.
         * @member {string} text
         * @memberof CMsgSteamDatagramDiagnostic
         * @instance
         */
        CMsgSteamDatagramDiagnostic.prototype.text = "";
    
        /**
         * Creates a new CMsgSteamDatagramDiagnostic instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {ICMsgSteamDatagramDiagnostic=} [properties] Properties to set
         * @returns {CMsgSteamDatagramDiagnostic} CMsgSteamDatagramDiagnostic instance
         */
        CMsgSteamDatagramDiagnostic.create = function create(properties) {
            return new CMsgSteamDatagramDiagnostic(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramDiagnostic message. Does not implicitly {@link CMsgSteamDatagramDiagnostic.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {ICMsgSteamDatagramDiagnostic} message CMsgSteamDatagramDiagnostic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramDiagnostic.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.severity != null && Object.hasOwnProperty.call(message, "severity"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.severity);
            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramDiagnostic message, length delimited. Does not implicitly {@link CMsgSteamDatagramDiagnostic.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {ICMsgSteamDatagramDiagnostic} message CMsgSteamDatagramDiagnostic message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramDiagnostic.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramDiagnostic message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramDiagnostic} CMsgSteamDatagramDiagnostic
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramDiagnostic.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramDiagnostic();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.severity = reader.uint32();
                        break;
                    }
                case 2: {
                        message.text = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramDiagnostic message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramDiagnostic} CMsgSteamDatagramDiagnostic
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramDiagnostic.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramDiagnostic message.
         * @function verify
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramDiagnostic.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.severity != null && message.hasOwnProperty("severity"))
                if (!$util.isInteger(message.severity))
                    return "severity: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!$util.isString(message.text))
                    return "text: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramDiagnostic message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramDiagnostic} CMsgSteamDatagramDiagnostic
         */
        CMsgSteamDatagramDiagnostic.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramDiagnostic)
                return object;
            var message = new $root.CMsgSteamDatagramDiagnostic();
            if (object.severity != null)
                message.severity = object.severity >>> 0;
            if (object.text != null)
                message.text = String(object.text);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramDiagnostic message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {CMsgSteamDatagramDiagnostic} message CMsgSteamDatagramDiagnostic
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramDiagnostic.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.severity = 0;
                object.text = "";
            }
            if (message.severity != null && message.hasOwnProperty("severity"))
                object.severity = message.severity;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = message.text;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramDiagnostic to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramDiagnostic
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramDiagnostic.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramDiagnostic
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramDiagnostic
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramDiagnostic.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramDiagnostic";
        };
    
        return CMsgSteamDatagramDiagnostic;
    })();
    
    $root.CMsgSteamDatagramLinkInstantaneousStats = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramLinkInstantaneousStats.
         * @exports ICMsgSteamDatagramLinkInstantaneousStats
         * @interface ICMsgSteamDatagramLinkInstantaneousStats
         * @property {number|null} [outPacketsPerSecX10] CMsgSteamDatagramLinkInstantaneousStats outPacketsPerSecX10
         * @property {number|null} [outBytesPerSec] CMsgSteamDatagramLinkInstantaneousStats outBytesPerSec
         * @property {number|null} [inPacketsPerSecX10] CMsgSteamDatagramLinkInstantaneousStats inPacketsPerSecX10
         * @property {number|null} [inBytesPerSec] CMsgSteamDatagramLinkInstantaneousStats inBytesPerSec
         * @property {number|null} [pingMs] CMsgSteamDatagramLinkInstantaneousStats pingMs
         * @property {number|null} [packetsDroppedPct] CMsgSteamDatagramLinkInstantaneousStats packetsDroppedPct
         * @property {number|null} [packetsWeirdSequencePct] CMsgSteamDatagramLinkInstantaneousStats packetsWeirdSequencePct
         * @property {number|null} [peakJitterUsec] CMsgSteamDatagramLinkInstantaneousStats peakJitterUsec
         */
    
        /**
         * Constructs a new CMsgSteamDatagramLinkInstantaneousStats.
         * @exports CMsgSteamDatagramLinkInstantaneousStats
         * @classdesc Represents a CMsgSteamDatagramLinkInstantaneousStats.
         * @implements ICMsgSteamDatagramLinkInstantaneousStats
         * @constructor
         * @param {ICMsgSteamDatagramLinkInstantaneousStats=} [properties] Properties to set
         */
        function CMsgSteamDatagramLinkInstantaneousStats(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats outPacketsPerSecX10.
         * @member {number} outPacketsPerSecX10
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.outPacketsPerSecX10 = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats outBytesPerSec.
         * @member {number} outBytesPerSec
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.outBytesPerSec = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats inPacketsPerSecX10.
         * @member {number} inPacketsPerSecX10
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.inPacketsPerSecX10 = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats inBytesPerSec.
         * @member {number} inBytesPerSec
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.inBytesPerSec = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats pingMs.
         * @member {number} pingMs
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.pingMs = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats packetsDroppedPct.
         * @member {number} packetsDroppedPct
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.packetsDroppedPct = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats packetsWeirdSequencePct.
         * @member {number} packetsWeirdSequencePct
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.packetsWeirdSequencePct = 0;
    
        /**
         * CMsgSteamDatagramLinkInstantaneousStats peakJitterUsec.
         * @member {number} peakJitterUsec
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.peakJitterUsec = 0;
    
        /**
         * Creates a new CMsgSteamDatagramLinkInstantaneousStats instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {ICMsgSteamDatagramLinkInstantaneousStats=} [properties] Properties to set
         * @returns {CMsgSteamDatagramLinkInstantaneousStats} CMsgSteamDatagramLinkInstantaneousStats instance
         */
        CMsgSteamDatagramLinkInstantaneousStats.create = function create(properties) {
            return new CMsgSteamDatagramLinkInstantaneousStats(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramLinkInstantaneousStats message. Does not implicitly {@link CMsgSteamDatagramLinkInstantaneousStats.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {ICMsgSteamDatagramLinkInstantaneousStats} message CMsgSteamDatagramLinkInstantaneousStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramLinkInstantaneousStats.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.outPacketsPerSecX10 != null && Object.hasOwnProperty.call(message, "outPacketsPerSecX10"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.outPacketsPerSecX10);
            if (message.outBytesPerSec != null && Object.hasOwnProperty.call(message, "outBytesPerSec"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.outBytesPerSec);
            if (message.inPacketsPerSecX10 != null && Object.hasOwnProperty.call(message, "inPacketsPerSecX10"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.inPacketsPerSecX10);
            if (message.inBytesPerSec != null && Object.hasOwnProperty.call(message, "inBytesPerSec"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.inBytesPerSec);
            if (message.pingMs != null && Object.hasOwnProperty.call(message, "pingMs"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.pingMs);
            if (message.packetsDroppedPct != null && Object.hasOwnProperty.call(message, "packetsDroppedPct"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.packetsDroppedPct);
            if (message.packetsWeirdSequencePct != null && Object.hasOwnProperty.call(message, "packetsWeirdSequencePct"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.packetsWeirdSequencePct);
            if (message.peakJitterUsec != null && Object.hasOwnProperty.call(message, "peakJitterUsec"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.peakJitterUsec);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramLinkInstantaneousStats message, length delimited. Does not implicitly {@link CMsgSteamDatagramLinkInstantaneousStats.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {ICMsgSteamDatagramLinkInstantaneousStats} message CMsgSteamDatagramLinkInstantaneousStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramLinkInstantaneousStats.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramLinkInstantaneousStats message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramLinkInstantaneousStats} CMsgSteamDatagramLinkInstantaneousStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramLinkInstantaneousStats.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramLinkInstantaneousStats();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.outPacketsPerSecX10 = reader.uint32();
                        break;
                    }
                case 2: {
                        message.outBytesPerSec = reader.uint32();
                        break;
                    }
                case 3: {
                        message.inPacketsPerSecX10 = reader.uint32();
                        break;
                    }
                case 4: {
                        message.inBytesPerSec = reader.uint32();
                        break;
                    }
                case 5: {
                        message.pingMs = reader.uint32();
                        break;
                    }
                case 6: {
                        message.packetsDroppedPct = reader.uint32();
                        break;
                    }
                case 7: {
                        message.packetsWeirdSequencePct = reader.uint32();
                        break;
                    }
                case 8: {
                        message.peakJitterUsec = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramLinkInstantaneousStats message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramLinkInstantaneousStats} CMsgSteamDatagramLinkInstantaneousStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramLinkInstantaneousStats.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramLinkInstantaneousStats message.
         * @function verify
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramLinkInstantaneousStats.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.outPacketsPerSecX10 != null && message.hasOwnProperty("outPacketsPerSecX10"))
                if (!$util.isInteger(message.outPacketsPerSecX10))
                    return "outPacketsPerSecX10: integer expected";
            if (message.outBytesPerSec != null && message.hasOwnProperty("outBytesPerSec"))
                if (!$util.isInteger(message.outBytesPerSec))
                    return "outBytesPerSec: integer expected";
            if (message.inPacketsPerSecX10 != null && message.hasOwnProperty("inPacketsPerSecX10"))
                if (!$util.isInteger(message.inPacketsPerSecX10))
                    return "inPacketsPerSecX10: integer expected";
            if (message.inBytesPerSec != null && message.hasOwnProperty("inBytesPerSec"))
                if (!$util.isInteger(message.inBytesPerSec))
                    return "inBytesPerSec: integer expected";
            if (message.pingMs != null && message.hasOwnProperty("pingMs"))
                if (!$util.isInteger(message.pingMs))
                    return "pingMs: integer expected";
            if (message.packetsDroppedPct != null && message.hasOwnProperty("packetsDroppedPct"))
                if (!$util.isInteger(message.packetsDroppedPct))
                    return "packetsDroppedPct: integer expected";
            if (message.packetsWeirdSequencePct != null && message.hasOwnProperty("packetsWeirdSequencePct"))
                if (!$util.isInteger(message.packetsWeirdSequencePct))
                    return "packetsWeirdSequencePct: integer expected";
            if (message.peakJitterUsec != null && message.hasOwnProperty("peakJitterUsec"))
                if (!$util.isInteger(message.peakJitterUsec))
                    return "peakJitterUsec: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramLinkInstantaneousStats message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramLinkInstantaneousStats} CMsgSteamDatagramLinkInstantaneousStats
         */
        CMsgSteamDatagramLinkInstantaneousStats.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramLinkInstantaneousStats)
                return object;
            var message = new $root.CMsgSteamDatagramLinkInstantaneousStats();
            if (object.outPacketsPerSecX10 != null)
                message.outPacketsPerSecX10 = object.outPacketsPerSecX10 >>> 0;
            if (object.outBytesPerSec != null)
                message.outBytesPerSec = object.outBytesPerSec >>> 0;
            if (object.inPacketsPerSecX10 != null)
                message.inPacketsPerSecX10 = object.inPacketsPerSecX10 >>> 0;
            if (object.inBytesPerSec != null)
                message.inBytesPerSec = object.inBytesPerSec >>> 0;
            if (object.pingMs != null)
                message.pingMs = object.pingMs >>> 0;
            if (object.packetsDroppedPct != null)
                message.packetsDroppedPct = object.packetsDroppedPct >>> 0;
            if (object.packetsWeirdSequencePct != null)
                message.packetsWeirdSequencePct = object.packetsWeirdSequencePct >>> 0;
            if (object.peakJitterUsec != null)
                message.peakJitterUsec = object.peakJitterUsec >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramLinkInstantaneousStats message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {CMsgSteamDatagramLinkInstantaneousStats} message CMsgSteamDatagramLinkInstantaneousStats
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramLinkInstantaneousStats.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.outPacketsPerSecX10 = 0;
                object.outBytesPerSec = 0;
                object.inPacketsPerSecX10 = 0;
                object.inBytesPerSec = 0;
                object.pingMs = 0;
                object.packetsDroppedPct = 0;
                object.packetsWeirdSequencePct = 0;
                object.peakJitterUsec = 0;
            }
            if (message.outPacketsPerSecX10 != null && message.hasOwnProperty("outPacketsPerSecX10"))
                object.outPacketsPerSecX10 = message.outPacketsPerSecX10;
            if (message.outBytesPerSec != null && message.hasOwnProperty("outBytesPerSec"))
                object.outBytesPerSec = message.outBytesPerSec;
            if (message.inPacketsPerSecX10 != null && message.hasOwnProperty("inPacketsPerSecX10"))
                object.inPacketsPerSecX10 = message.inPacketsPerSecX10;
            if (message.inBytesPerSec != null && message.hasOwnProperty("inBytesPerSec"))
                object.inBytesPerSec = message.inBytesPerSec;
            if (message.pingMs != null && message.hasOwnProperty("pingMs"))
                object.pingMs = message.pingMs;
            if (message.packetsDroppedPct != null && message.hasOwnProperty("packetsDroppedPct"))
                object.packetsDroppedPct = message.packetsDroppedPct;
            if (message.packetsWeirdSequencePct != null && message.hasOwnProperty("packetsWeirdSequencePct"))
                object.packetsWeirdSequencePct = message.packetsWeirdSequencePct;
            if (message.peakJitterUsec != null && message.hasOwnProperty("peakJitterUsec"))
                object.peakJitterUsec = message.peakJitterUsec;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramLinkInstantaneousStats to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramLinkInstantaneousStats.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramLinkInstantaneousStats
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramLinkInstantaneousStats
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramLinkInstantaneousStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramLinkInstantaneousStats";
        };
    
        return CMsgSteamDatagramLinkInstantaneousStats;
    })();
    
    $root.CMsgSteamDatagramLinkLifetimeStats = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramLinkLifetimeStats.
         * @exports ICMsgSteamDatagramLinkLifetimeStats
         * @interface ICMsgSteamDatagramLinkLifetimeStats
         * @property {number|null} [connectedSeconds] CMsgSteamDatagramLinkLifetimeStats connectedSeconds
         * @property {number|Long|null} [packetsSent] CMsgSteamDatagramLinkLifetimeStats packetsSent
         * @property {number|Long|null} [kbSent] CMsgSteamDatagramLinkLifetimeStats kbSent
         * @property {number|Long|null} [packetsRecv] CMsgSteamDatagramLinkLifetimeStats packetsRecv
         * @property {number|Long|null} [kbRecv] CMsgSteamDatagramLinkLifetimeStats kbRecv
         * @property {number|Long|null} [packetsRecvSequenced] CMsgSteamDatagramLinkLifetimeStats packetsRecvSequenced
         * @property {number|Long|null} [packetsRecvDropped] CMsgSteamDatagramLinkLifetimeStats packetsRecvDropped
         * @property {number|Long|null} [packetsRecvOutOfOrder] CMsgSteamDatagramLinkLifetimeStats packetsRecvOutOfOrder
         * @property {number|Long|null} [packetsRecvOutOfOrderCorrected] CMsgSteamDatagramLinkLifetimeStats packetsRecvOutOfOrderCorrected
         * @property {number|Long|null} [packetsRecvDuplicate] CMsgSteamDatagramLinkLifetimeStats packetsRecvDuplicate
         * @property {number|Long|null} [packetsRecvLurch] CMsgSteamDatagramLinkLifetimeStats packetsRecvLurch
         * @property {Array.<number|Long>|null} [multipathPacketsRecvSequenced] CMsgSteamDatagramLinkLifetimeStats multipathPacketsRecvSequenced
         * @property {Array.<number|Long>|null} [multipathPacketsRecvLater] CMsgSteamDatagramLinkLifetimeStats multipathPacketsRecvLater
         * @property {number|null} [multipathSendEnabled] CMsgSteamDatagramLinkLifetimeStats multipathSendEnabled
         * @property {number|null} [qualityHistogram_100] CMsgSteamDatagramLinkLifetimeStats qualityHistogram_100
         * @property {number|null} [qualityHistogram_99] CMsgSteamDatagramLinkLifetimeStats qualityHistogram_99
         * @property {number|null} [qualityHistogram_97] CMsgSteamDatagramLinkLifetimeStats qualityHistogram_97
         * @property {number|null} [qualityHistogram_95] CMsgSteamDatagramLinkLifetimeStats qualityHistogram_95
         * @property {number|null} [qualityHistogram_90] CMsgSteamDatagramLinkLifetimeStats qualityHistogram_90
         * @property {number|null} [qualityHistogram_75] CMsgSteamDatagramLinkLifetimeStats qualityHistogram_75
         * @property {number|null} [qualityHistogram_50] CMsgSteamDatagramLinkLifetimeStats qualityHistogram_50
         * @property {number|null} [qualityHistogram_1] CMsgSteamDatagramLinkLifetimeStats qualityHistogram_1
         * @property {number|null} [qualityHistogramDead] CMsgSteamDatagramLinkLifetimeStats qualityHistogramDead
         * @property {number|null} [qualityNtile_2nd] CMsgSteamDatagramLinkLifetimeStats qualityNtile_2nd
         * @property {number|null} [qualityNtile_5th] CMsgSteamDatagramLinkLifetimeStats qualityNtile_5th
         * @property {number|null} [qualityNtile_25th] CMsgSteamDatagramLinkLifetimeStats qualityNtile_25th
         * @property {number|null} [qualityNtile_50th] CMsgSteamDatagramLinkLifetimeStats qualityNtile_50th
         * @property {number|null} [pingHistogram_25] CMsgSteamDatagramLinkLifetimeStats pingHistogram_25
         * @property {number|null} [pingHistogram_50] CMsgSteamDatagramLinkLifetimeStats pingHistogram_50
         * @property {number|null} [pingHistogram_75] CMsgSteamDatagramLinkLifetimeStats pingHistogram_75
         * @property {number|null} [pingHistogram_100] CMsgSteamDatagramLinkLifetimeStats pingHistogram_100
         * @property {number|null} [pingHistogram_125] CMsgSteamDatagramLinkLifetimeStats pingHistogram_125
         * @property {number|null} [pingHistogram_150] CMsgSteamDatagramLinkLifetimeStats pingHistogram_150
         * @property {number|null} [pingHistogram_200] CMsgSteamDatagramLinkLifetimeStats pingHistogram_200
         * @property {number|null} [pingHistogram_300] CMsgSteamDatagramLinkLifetimeStats pingHistogram_300
         * @property {number|null} [pingHistogramMax] CMsgSteamDatagramLinkLifetimeStats pingHistogramMax
         * @property {number|null} [pingNtile_5th] CMsgSteamDatagramLinkLifetimeStats pingNtile_5th
         * @property {number|null} [pingNtile_50th] CMsgSteamDatagramLinkLifetimeStats pingNtile_50th
         * @property {number|null} [pingNtile_75th] CMsgSteamDatagramLinkLifetimeStats pingNtile_75th
         * @property {number|null} [pingNtile_95th] CMsgSteamDatagramLinkLifetimeStats pingNtile_95th
         * @property {number|null} [pingNtile_98th] CMsgSteamDatagramLinkLifetimeStats pingNtile_98th
         * @property {number|null} [jitterHistogramNegligible] CMsgSteamDatagramLinkLifetimeStats jitterHistogramNegligible
         * @property {number|null} [jitterHistogram_1] CMsgSteamDatagramLinkLifetimeStats jitterHistogram_1
         * @property {number|null} [jitterHistogram_2] CMsgSteamDatagramLinkLifetimeStats jitterHistogram_2
         * @property {number|null} [jitterHistogram_5] CMsgSteamDatagramLinkLifetimeStats jitterHistogram_5
         * @property {number|null} [jitterHistogram_10] CMsgSteamDatagramLinkLifetimeStats jitterHistogram_10
         * @property {number|null} [jitterHistogram_20] CMsgSteamDatagramLinkLifetimeStats jitterHistogram_20
         * @property {number|null} [txspeedMax] CMsgSteamDatagramLinkLifetimeStats txspeedMax
         * @property {number|null} [txspeedHistogram_16] CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_16
         * @property {number|null} [txspeedHistogram_32] CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_32
         * @property {number|null} [txspeedHistogram_64] CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_64
         * @property {number|null} [txspeedHistogram_128] CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_128
         * @property {number|null} [txspeedHistogram_256] CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_256
         * @property {number|null} [txspeedHistogram_512] CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_512
         * @property {number|null} [txspeedHistogram_1024] CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_1024
         * @property {number|null} [txspeedHistogramMax] CMsgSteamDatagramLinkLifetimeStats txspeedHistogramMax
         * @property {number|null} [txspeedNtile_5th] CMsgSteamDatagramLinkLifetimeStats txspeedNtile_5th
         * @property {number|null} [txspeedNtile_50th] CMsgSteamDatagramLinkLifetimeStats txspeedNtile_50th
         * @property {number|null} [txspeedNtile_75th] CMsgSteamDatagramLinkLifetimeStats txspeedNtile_75th
         * @property {number|null} [txspeedNtile_95th] CMsgSteamDatagramLinkLifetimeStats txspeedNtile_95th
         * @property {number|null} [txspeedNtile_98th] CMsgSteamDatagramLinkLifetimeStats txspeedNtile_98th
         * @property {number|null} [rxspeedMax] CMsgSteamDatagramLinkLifetimeStats rxspeedMax
         * @property {number|null} [rxspeedHistogram_16] CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_16
         * @property {number|null} [rxspeedHistogram_32] CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_32
         * @property {number|null} [rxspeedHistogram_64] CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_64
         * @property {number|null} [rxspeedHistogram_128] CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_128
         * @property {number|null} [rxspeedHistogram_256] CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_256
         * @property {number|null} [rxspeedHistogram_512] CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_512
         * @property {number|null} [rxspeedHistogram_1024] CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_1024
         * @property {number|null} [rxspeedHistogramMax] CMsgSteamDatagramLinkLifetimeStats rxspeedHistogramMax
         * @property {number|null} [rxspeedNtile_5th] CMsgSteamDatagramLinkLifetimeStats rxspeedNtile_5th
         * @property {number|null} [rxspeedNtile_50th] CMsgSteamDatagramLinkLifetimeStats rxspeedNtile_50th
         * @property {number|null} [rxspeedNtile_75th] CMsgSteamDatagramLinkLifetimeStats rxspeedNtile_75th
         * @property {number|null} [rxspeedNtile_95th] CMsgSteamDatagramLinkLifetimeStats rxspeedNtile_95th
         * @property {number|null} [rxspeedNtile_98th] CMsgSteamDatagramLinkLifetimeStats rxspeedNtile_98th
         */
    
        /**
         * Constructs a new CMsgSteamDatagramLinkLifetimeStats.
         * @exports CMsgSteamDatagramLinkLifetimeStats
         * @classdesc Represents a CMsgSteamDatagramLinkLifetimeStats.
         * @implements ICMsgSteamDatagramLinkLifetimeStats
         * @constructor
         * @param {ICMsgSteamDatagramLinkLifetimeStats=} [properties] Properties to set
         */
        function CMsgSteamDatagramLinkLifetimeStats(properties) {
            this.multipathPacketsRecvSequenced = [];
            this.multipathPacketsRecvLater = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats connectedSeconds.
         * @member {number} connectedSeconds
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.connectedSeconds = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packetsSent.
         * @member {number|Long} packetsSent
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packetsSent = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats kbSent.
         * @member {number|Long} kbSent
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.kbSent = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packetsRecv.
         * @member {number|Long} packetsRecv
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packetsRecv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats kbRecv.
         * @member {number|Long} kbRecv
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.kbRecv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packetsRecvSequenced.
         * @member {number|Long} packetsRecvSequenced
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packetsRecvSequenced = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packetsRecvDropped.
         * @member {number|Long} packetsRecvDropped
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packetsRecvDropped = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packetsRecvOutOfOrder.
         * @member {number|Long} packetsRecvOutOfOrder
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packetsRecvOutOfOrder = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packetsRecvOutOfOrderCorrected.
         * @member {number|Long} packetsRecvOutOfOrderCorrected
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packetsRecvOutOfOrderCorrected = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packetsRecvDuplicate.
         * @member {number|Long} packetsRecvDuplicate
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packetsRecvDuplicate = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats packetsRecvLurch.
         * @member {number|Long} packetsRecvLurch
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.packetsRecvLurch = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats multipathPacketsRecvSequenced.
         * @member {Array.<number|Long>} multipathPacketsRecvSequenced
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.multipathPacketsRecvSequenced = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats multipathPacketsRecvLater.
         * @member {Array.<number|Long>} multipathPacketsRecvLater
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.multipathPacketsRecvLater = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats multipathSendEnabled.
         * @member {number} multipathSendEnabled
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.multipathSendEnabled = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityHistogram_100.
         * @member {number} qualityHistogram_100
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityHistogram_100 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityHistogram_99.
         * @member {number} qualityHistogram_99
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityHistogram_99 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityHistogram_97.
         * @member {number} qualityHistogram_97
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityHistogram_97 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityHistogram_95.
         * @member {number} qualityHistogram_95
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityHistogram_95 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityHistogram_90.
         * @member {number} qualityHistogram_90
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityHistogram_90 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityHistogram_75.
         * @member {number} qualityHistogram_75
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityHistogram_75 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityHistogram_50.
         * @member {number} qualityHistogram_50
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityHistogram_50 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityHistogram_1.
         * @member {number} qualityHistogram_1
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityHistogram_1 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityHistogramDead.
         * @member {number} qualityHistogramDead
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityHistogramDead = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityNtile_2nd.
         * @member {number} qualityNtile_2nd
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityNtile_2nd = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityNtile_5th.
         * @member {number} qualityNtile_5th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityNtile_5th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityNtile_25th.
         * @member {number} qualityNtile_25th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityNtile_25th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats qualityNtile_50th.
         * @member {number} qualityNtile_50th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.qualityNtile_50th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingHistogram_25.
         * @member {number} pingHistogram_25
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingHistogram_25 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingHistogram_50.
         * @member {number} pingHistogram_50
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingHistogram_50 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingHistogram_75.
         * @member {number} pingHistogram_75
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingHistogram_75 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingHistogram_100.
         * @member {number} pingHistogram_100
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingHistogram_100 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingHistogram_125.
         * @member {number} pingHistogram_125
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingHistogram_125 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingHistogram_150.
         * @member {number} pingHistogram_150
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingHistogram_150 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingHistogram_200.
         * @member {number} pingHistogram_200
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingHistogram_200 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingHistogram_300.
         * @member {number} pingHistogram_300
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingHistogram_300 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingHistogramMax.
         * @member {number} pingHistogramMax
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingHistogramMax = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingNtile_5th.
         * @member {number} pingNtile_5th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingNtile_5th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingNtile_50th.
         * @member {number} pingNtile_50th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingNtile_50th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingNtile_75th.
         * @member {number} pingNtile_75th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingNtile_75th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingNtile_95th.
         * @member {number} pingNtile_95th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingNtile_95th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats pingNtile_98th.
         * @member {number} pingNtile_98th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.pingNtile_98th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitterHistogramNegligible.
         * @member {number} jitterHistogramNegligible
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitterHistogramNegligible = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitterHistogram_1.
         * @member {number} jitterHistogram_1
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitterHistogram_1 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitterHistogram_2.
         * @member {number} jitterHistogram_2
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitterHistogram_2 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitterHistogram_5.
         * @member {number} jitterHistogram_5
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitterHistogram_5 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitterHistogram_10.
         * @member {number} jitterHistogram_10
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitterHistogram_10 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats jitterHistogram_20.
         * @member {number} jitterHistogram_20
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.jitterHistogram_20 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedMax.
         * @member {number} txspeedMax
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedMax = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_16.
         * @member {number} txspeedHistogram_16
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedHistogram_16 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_32.
         * @member {number} txspeedHistogram_32
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedHistogram_32 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_64.
         * @member {number} txspeedHistogram_64
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedHistogram_64 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_128.
         * @member {number} txspeedHistogram_128
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedHistogram_128 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_256.
         * @member {number} txspeedHistogram_256
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedHistogram_256 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_512.
         * @member {number} txspeedHistogram_512
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedHistogram_512 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedHistogram_1024.
         * @member {number} txspeedHistogram_1024
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedHistogram_1024 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedHistogramMax.
         * @member {number} txspeedHistogramMax
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedHistogramMax = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedNtile_5th.
         * @member {number} txspeedNtile_5th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedNtile_5th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedNtile_50th.
         * @member {number} txspeedNtile_50th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedNtile_50th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedNtile_75th.
         * @member {number} txspeedNtile_75th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedNtile_75th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedNtile_95th.
         * @member {number} txspeedNtile_95th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedNtile_95th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats txspeedNtile_98th.
         * @member {number} txspeedNtile_98th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.txspeedNtile_98th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedMax.
         * @member {number} rxspeedMax
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedMax = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_16.
         * @member {number} rxspeedHistogram_16
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedHistogram_16 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_32.
         * @member {number} rxspeedHistogram_32
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedHistogram_32 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_64.
         * @member {number} rxspeedHistogram_64
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedHistogram_64 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_128.
         * @member {number} rxspeedHistogram_128
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedHistogram_128 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_256.
         * @member {number} rxspeedHistogram_256
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedHistogram_256 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_512.
         * @member {number} rxspeedHistogram_512
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedHistogram_512 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedHistogram_1024.
         * @member {number} rxspeedHistogram_1024
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedHistogram_1024 = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedHistogramMax.
         * @member {number} rxspeedHistogramMax
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedHistogramMax = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedNtile_5th.
         * @member {number} rxspeedNtile_5th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedNtile_5th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedNtile_50th.
         * @member {number} rxspeedNtile_50th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedNtile_50th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedNtile_75th.
         * @member {number} rxspeedNtile_75th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedNtile_75th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedNtile_95th.
         * @member {number} rxspeedNtile_95th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedNtile_95th = 0;
    
        /**
         * CMsgSteamDatagramLinkLifetimeStats rxspeedNtile_98th.
         * @member {number} rxspeedNtile_98th
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.rxspeedNtile_98th = 0;
    
        /**
         * Creates a new CMsgSteamDatagramLinkLifetimeStats instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {ICMsgSteamDatagramLinkLifetimeStats=} [properties] Properties to set
         * @returns {CMsgSteamDatagramLinkLifetimeStats} CMsgSteamDatagramLinkLifetimeStats instance
         */
        CMsgSteamDatagramLinkLifetimeStats.create = function create(properties) {
            return new CMsgSteamDatagramLinkLifetimeStats(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramLinkLifetimeStats message. Does not implicitly {@link CMsgSteamDatagramLinkLifetimeStats.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {ICMsgSteamDatagramLinkLifetimeStats} message CMsgSteamDatagramLinkLifetimeStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramLinkLifetimeStats.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectedSeconds != null && Object.hasOwnProperty.call(message, "connectedSeconds"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.connectedSeconds);
            if (message.packetsSent != null && Object.hasOwnProperty.call(message, "packetsSent"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.packetsSent);
            if (message.kbSent != null && Object.hasOwnProperty.call(message, "kbSent"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.kbSent);
            if (message.packetsRecv != null && Object.hasOwnProperty.call(message, "packetsRecv"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.packetsRecv);
            if (message.kbRecv != null && Object.hasOwnProperty.call(message, "kbRecv"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.kbRecv);
            if (message.packetsRecvSequenced != null && Object.hasOwnProperty.call(message, "packetsRecvSequenced"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.packetsRecvSequenced);
            if (message.packetsRecvDropped != null && Object.hasOwnProperty.call(message, "packetsRecvDropped"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.packetsRecvDropped);
            if (message.packetsRecvOutOfOrder != null && Object.hasOwnProperty.call(message, "packetsRecvOutOfOrder"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.packetsRecvOutOfOrder);
            if (message.packetsRecvDuplicate != null && Object.hasOwnProperty.call(message, "packetsRecvDuplicate"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.packetsRecvDuplicate);
            if (message.packetsRecvLurch != null && Object.hasOwnProperty.call(message, "packetsRecvLurch"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.packetsRecvLurch);
            if (message.multipathPacketsRecvSequenced != null && message.multipathPacketsRecvSequenced.length)
                for (var i = 0; i < message.multipathPacketsRecvSequenced.length; ++i)
                    writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.multipathPacketsRecvSequenced[i]);
            if (message.multipathPacketsRecvLater != null && message.multipathPacketsRecvLater.length)
                for (var i = 0; i < message.multipathPacketsRecvLater.length; ++i)
                    writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.multipathPacketsRecvLater[i]);
            if (message.multipathSendEnabled != null && Object.hasOwnProperty.call(message, "multipathSendEnabled"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.multipathSendEnabled);
            if (message.packetsRecvOutOfOrderCorrected != null && Object.hasOwnProperty.call(message, "packetsRecvOutOfOrderCorrected"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint64(message.packetsRecvOutOfOrderCorrected);
            if (message.qualityHistogram_100 != null && Object.hasOwnProperty.call(message, "qualityHistogram_100"))
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.qualityHistogram_100);
            if (message.qualityHistogram_99 != null && Object.hasOwnProperty.call(message, "qualityHistogram_99"))
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.qualityHistogram_99);
            if (message.qualityHistogram_97 != null && Object.hasOwnProperty.call(message, "qualityHistogram_97"))
                writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.qualityHistogram_97);
            if (message.qualityHistogram_95 != null && Object.hasOwnProperty.call(message, "qualityHistogram_95"))
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.qualityHistogram_95);
            if (message.qualityHistogram_90 != null && Object.hasOwnProperty.call(message, "qualityHistogram_90"))
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.qualityHistogram_90);
            if (message.qualityHistogram_75 != null && Object.hasOwnProperty.call(message, "qualityHistogram_75"))
                writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.qualityHistogram_75);
            if (message.qualityHistogram_50 != null && Object.hasOwnProperty.call(message, "qualityHistogram_50"))
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.qualityHistogram_50);
            if (message.qualityHistogram_1 != null && Object.hasOwnProperty.call(message, "qualityHistogram_1"))
                writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.qualityHistogram_1);
            if (message.qualityHistogramDead != null && Object.hasOwnProperty.call(message, "qualityHistogramDead"))
                writer.uint32(/* id 29, wireType 0 =*/232).uint32(message.qualityHistogramDead);
            if (message.qualityNtile_2nd != null && Object.hasOwnProperty.call(message, "qualityNtile_2nd"))
                writer.uint32(/* id 30, wireType 0 =*/240).uint32(message.qualityNtile_2nd);
            if (message.qualityNtile_5th != null && Object.hasOwnProperty.call(message, "qualityNtile_5th"))
                writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.qualityNtile_5th);
            if (message.qualityNtile_25th != null && Object.hasOwnProperty.call(message, "qualityNtile_25th"))
                writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.qualityNtile_25th);
            if (message.qualityNtile_50th != null && Object.hasOwnProperty.call(message, "qualityNtile_50th"))
                writer.uint32(/* id 33, wireType 0 =*/264).uint32(message.qualityNtile_50th);
            if (message.pingHistogram_25 != null && Object.hasOwnProperty.call(message, "pingHistogram_25"))
                writer.uint32(/* id 41, wireType 0 =*/328).uint32(message.pingHistogram_25);
            if (message.pingHistogram_50 != null && Object.hasOwnProperty.call(message, "pingHistogram_50"))
                writer.uint32(/* id 42, wireType 0 =*/336).uint32(message.pingHistogram_50);
            if (message.pingHistogram_75 != null && Object.hasOwnProperty.call(message, "pingHistogram_75"))
                writer.uint32(/* id 43, wireType 0 =*/344).uint32(message.pingHistogram_75);
            if (message.pingHistogram_100 != null && Object.hasOwnProperty.call(message, "pingHistogram_100"))
                writer.uint32(/* id 44, wireType 0 =*/352).uint32(message.pingHistogram_100);
            if (message.pingHistogram_125 != null && Object.hasOwnProperty.call(message, "pingHistogram_125"))
                writer.uint32(/* id 45, wireType 0 =*/360).uint32(message.pingHistogram_125);
            if (message.pingHistogram_150 != null && Object.hasOwnProperty.call(message, "pingHistogram_150"))
                writer.uint32(/* id 46, wireType 0 =*/368).uint32(message.pingHistogram_150);
            if (message.pingHistogram_200 != null && Object.hasOwnProperty.call(message, "pingHistogram_200"))
                writer.uint32(/* id 47, wireType 0 =*/376).uint32(message.pingHistogram_200);
            if (message.pingHistogram_300 != null && Object.hasOwnProperty.call(message, "pingHistogram_300"))
                writer.uint32(/* id 48, wireType 0 =*/384).uint32(message.pingHistogram_300);
            if (message.pingHistogramMax != null && Object.hasOwnProperty.call(message, "pingHistogramMax"))
                writer.uint32(/* id 49, wireType 0 =*/392).uint32(message.pingHistogramMax);
            if (message.pingNtile_5th != null && Object.hasOwnProperty.call(message, "pingNtile_5th"))
                writer.uint32(/* id 50, wireType 0 =*/400).uint32(message.pingNtile_5th);
            if (message.pingNtile_50th != null && Object.hasOwnProperty.call(message, "pingNtile_50th"))
                writer.uint32(/* id 51, wireType 0 =*/408).uint32(message.pingNtile_50th);
            if (message.pingNtile_75th != null && Object.hasOwnProperty.call(message, "pingNtile_75th"))
                writer.uint32(/* id 52, wireType 0 =*/416).uint32(message.pingNtile_75th);
            if (message.pingNtile_95th != null && Object.hasOwnProperty.call(message, "pingNtile_95th"))
                writer.uint32(/* id 53, wireType 0 =*/424).uint32(message.pingNtile_95th);
            if (message.pingNtile_98th != null && Object.hasOwnProperty.call(message, "pingNtile_98th"))
                writer.uint32(/* id 54, wireType 0 =*/432).uint32(message.pingNtile_98th);
            if (message.jitterHistogramNegligible != null && Object.hasOwnProperty.call(message, "jitterHistogramNegligible"))
                writer.uint32(/* id 61, wireType 0 =*/488).uint32(message.jitterHistogramNegligible);
            if (message.jitterHistogram_1 != null && Object.hasOwnProperty.call(message, "jitterHistogram_1"))
                writer.uint32(/* id 62, wireType 0 =*/496).uint32(message.jitterHistogram_1);
            if (message.jitterHistogram_2 != null && Object.hasOwnProperty.call(message, "jitterHistogram_2"))
                writer.uint32(/* id 63, wireType 0 =*/504).uint32(message.jitterHistogram_2);
            if (message.jitterHistogram_5 != null && Object.hasOwnProperty.call(message, "jitterHistogram_5"))
                writer.uint32(/* id 64, wireType 0 =*/512).uint32(message.jitterHistogram_5);
            if (message.jitterHistogram_10 != null && Object.hasOwnProperty.call(message, "jitterHistogram_10"))
                writer.uint32(/* id 65, wireType 0 =*/520).uint32(message.jitterHistogram_10);
            if (message.jitterHistogram_20 != null && Object.hasOwnProperty.call(message, "jitterHistogram_20"))
                writer.uint32(/* id 66, wireType 0 =*/528).uint32(message.jitterHistogram_20);
            if (message.txspeedMax != null && Object.hasOwnProperty.call(message, "txspeedMax"))
                writer.uint32(/* id 67, wireType 0 =*/536).uint32(message.txspeedMax);
            if (message.txspeedHistogram_16 != null && Object.hasOwnProperty.call(message, "txspeedHistogram_16"))
                writer.uint32(/* id 68, wireType 0 =*/544).uint32(message.txspeedHistogram_16);
            if (message.txspeedHistogram_32 != null && Object.hasOwnProperty.call(message, "txspeedHistogram_32"))
                writer.uint32(/* id 69, wireType 0 =*/552).uint32(message.txspeedHistogram_32);
            if (message.txspeedHistogram_64 != null && Object.hasOwnProperty.call(message, "txspeedHistogram_64"))
                writer.uint32(/* id 70, wireType 0 =*/560).uint32(message.txspeedHistogram_64);
            if (message.txspeedHistogram_128 != null && Object.hasOwnProperty.call(message, "txspeedHistogram_128"))
                writer.uint32(/* id 71, wireType 0 =*/568).uint32(message.txspeedHistogram_128);
            if (message.txspeedHistogram_256 != null && Object.hasOwnProperty.call(message, "txspeedHistogram_256"))
                writer.uint32(/* id 72, wireType 0 =*/576).uint32(message.txspeedHistogram_256);
            if (message.txspeedHistogram_512 != null && Object.hasOwnProperty.call(message, "txspeedHistogram_512"))
                writer.uint32(/* id 73, wireType 0 =*/584).uint32(message.txspeedHistogram_512);
            if (message.txspeedHistogram_1024 != null && Object.hasOwnProperty.call(message, "txspeedHistogram_1024"))
                writer.uint32(/* id 74, wireType 0 =*/592).uint32(message.txspeedHistogram_1024);
            if (message.txspeedHistogramMax != null && Object.hasOwnProperty.call(message, "txspeedHistogramMax"))
                writer.uint32(/* id 75, wireType 0 =*/600).uint32(message.txspeedHistogramMax);
            if (message.txspeedNtile_5th != null && Object.hasOwnProperty.call(message, "txspeedNtile_5th"))
                writer.uint32(/* id 76, wireType 0 =*/608).uint32(message.txspeedNtile_5th);
            if (message.txspeedNtile_50th != null && Object.hasOwnProperty.call(message, "txspeedNtile_50th"))
                writer.uint32(/* id 77, wireType 0 =*/616).uint32(message.txspeedNtile_50th);
            if (message.txspeedNtile_75th != null && Object.hasOwnProperty.call(message, "txspeedNtile_75th"))
                writer.uint32(/* id 78, wireType 0 =*/624).uint32(message.txspeedNtile_75th);
            if (message.txspeedNtile_95th != null && Object.hasOwnProperty.call(message, "txspeedNtile_95th"))
                writer.uint32(/* id 79, wireType 0 =*/632).uint32(message.txspeedNtile_95th);
            if (message.txspeedNtile_98th != null && Object.hasOwnProperty.call(message, "txspeedNtile_98th"))
                writer.uint32(/* id 80, wireType 0 =*/640).uint32(message.txspeedNtile_98th);
            if (message.rxspeedMax != null && Object.hasOwnProperty.call(message, "rxspeedMax"))
                writer.uint32(/* id 81, wireType 0 =*/648).uint32(message.rxspeedMax);
            if (message.rxspeedHistogram_16 != null && Object.hasOwnProperty.call(message, "rxspeedHistogram_16"))
                writer.uint32(/* id 82, wireType 0 =*/656).uint32(message.rxspeedHistogram_16);
            if (message.rxspeedHistogram_32 != null && Object.hasOwnProperty.call(message, "rxspeedHistogram_32"))
                writer.uint32(/* id 83, wireType 0 =*/664).uint32(message.rxspeedHistogram_32);
            if (message.rxspeedHistogram_64 != null && Object.hasOwnProperty.call(message, "rxspeedHistogram_64"))
                writer.uint32(/* id 84, wireType 0 =*/672).uint32(message.rxspeedHistogram_64);
            if (message.rxspeedHistogram_128 != null && Object.hasOwnProperty.call(message, "rxspeedHistogram_128"))
                writer.uint32(/* id 85, wireType 0 =*/680).uint32(message.rxspeedHistogram_128);
            if (message.rxspeedHistogram_256 != null && Object.hasOwnProperty.call(message, "rxspeedHistogram_256"))
                writer.uint32(/* id 86, wireType 0 =*/688).uint32(message.rxspeedHistogram_256);
            if (message.rxspeedHistogram_512 != null && Object.hasOwnProperty.call(message, "rxspeedHistogram_512"))
                writer.uint32(/* id 87, wireType 0 =*/696).uint32(message.rxspeedHistogram_512);
            if (message.rxspeedHistogram_1024 != null && Object.hasOwnProperty.call(message, "rxspeedHistogram_1024"))
                writer.uint32(/* id 88, wireType 0 =*/704).uint32(message.rxspeedHistogram_1024);
            if (message.rxspeedHistogramMax != null && Object.hasOwnProperty.call(message, "rxspeedHistogramMax"))
                writer.uint32(/* id 89, wireType 0 =*/712).uint32(message.rxspeedHistogramMax);
            if (message.rxspeedNtile_5th != null && Object.hasOwnProperty.call(message, "rxspeedNtile_5th"))
                writer.uint32(/* id 90, wireType 0 =*/720).uint32(message.rxspeedNtile_5th);
            if (message.rxspeedNtile_50th != null && Object.hasOwnProperty.call(message, "rxspeedNtile_50th"))
                writer.uint32(/* id 91, wireType 0 =*/728).uint32(message.rxspeedNtile_50th);
            if (message.rxspeedNtile_75th != null && Object.hasOwnProperty.call(message, "rxspeedNtile_75th"))
                writer.uint32(/* id 92, wireType 0 =*/736).uint32(message.rxspeedNtile_75th);
            if (message.rxspeedNtile_95th != null && Object.hasOwnProperty.call(message, "rxspeedNtile_95th"))
                writer.uint32(/* id 93, wireType 0 =*/744).uint32(message.rxspeedNtile_95th);
            if (message.rxspeedNtile_98th != null && Object.hasOwnProperty.call(message, "rxspeedNtile_98th"))
                writer.uint32(/* id 94, wireType 0 =*/752).uint32(message.rxspeedNtile_98th);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramLinkLifetimeStats message, length delimited. Does not implicitly {@link CMsgSteamDatagramLinkLifetimeStats.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {ICMsgSteamDatagramLinkLifetimeStats} message CMsgSteamDatagramLinkLifetimeStats message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramLinkLifetimeStats.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramLinkLifetimeStats message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramLinkLifetimeStats} CMsgSteamDatagramLinkLifetimeStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramLinkLifetimeStats.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramLinkLifetimeStats();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2: {
                        message.connectedSeconds = reader.uint32();
                        break;
                    }
                case 3: {
                        message.packetsSent = reader.uint64();
                        break;
                    }
                case 4: {
                        message.kbSent = reader.uint64();
                        break;
                    }
                case 5: {
                        message.packetsRecv = reader.uint64();
                        break;
                    }
                case 6: {
                        message.kbRecv = reader.uint64();
                        break;
                    }
                case 7: {
                        message.packetsRecvSequenced = reader.uint64();
                        break;
                    }
                case 8: {
                        message.packetsRecvDropped = reader.uint64();
                        break;
                    }
                case 9: {
                        message.packetsRecvOutOfOrder = reader.uint64();
                        break;
                    }
                case 15: {
                        message.packetsRecvOutOfOrderCorrected = reader.uint64();
                        break;
                    }
                case 10: {
                        message.packetsRecvDuplicate = reader.uint64();
                        break;
                    }
                case 11: {
                        message.packetsRecvLurch = reader.uint64();
                        break;
                    }
                case 12: {
                        if (!(message.multipathPacketsRecvSequenced && message.multipathPacketsRecvSequenced.length))
                            message.multipathPacketsRecvSequenced = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.multipathPacketsRecvSequenced.push(reader.uint64());
                        } else
                            message.multipathPacketsRecvSequenced.push(reader.uint64());
                        break;
                    }
                case 13: {
                        if (!(message.multipathPacketsRecvLater && message.multipathPacketsRecvLater.length))
                            message.multipathPacketsRecvLater = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.multipathPacketsRecvLater.push(reader.uint64());
                        } else
                            message.multipathPacketsRecvLater.push(reader.uint64());
                        break;
                    }
                case 14: {
                        message.multipathSendEnabled = reader.uint32();
                        break;
                    }
                case 21: {
                        message.qualityHistogram_100 = reader.uint32();
                        break;
                    }
                case 22: {
                        message.qualityHistogram_99 = reader.uint32();
                        break;
                    }
                case 23: {
                        message.qualityHistogram_97 = reader.uint32();
                        break;
                    }
                case 24: {
                        message.qualityHistogram_95 = reader.uint32();
                        break;
                    }
                case 25: {
                        message.qualityHistogram_90 = reader.uint32();
                        break;
                    }
                case 26: {
                        message.qualityHistogram_75 = reader.uint32();
                        break;
                    }
                case 27: {
                        message.qualityHistogram_50 = reader.uint32();
                        break;
                    }
                case 28: {
                        message.qualityHistogram_1 = reader.uint32();
                        break;
                    }
                case 29: {
                        message.qualityHistogramDead = reader.uint32();
                        break;
                    }
                case 30: {
                        message.qualityNtile_2nd = reader.uint32();
                        break;
                    }
                case 31: {
                        message.qualityNtile_5th = reader.uint32();
                        break;
                    }
                case 32: {
                        message.qualityNtile_25th = reader.uint32();
                        break;
                    }
                case 33: {
                        message.qualityNtile_50th = reader.uint32();
                        break;
                    }
                case 41: {
                        message.pingHistogram_25 = reader.uint32();
                        break;
                    }
                case 42: {
                        message.pingHistogram_50 = reader.uint32();
                        break;
                    }
                case 43: {
                        message.pingHistogram_75 = reader.uint32();
                        break;
                    }
                case 44: {
                        message.pingHistogram_100 = reader.uint32();
                        break;
                    }
                case 45: {
                        message.pingHistogram_125 = reader.uint32();
                        break;
                    }
                case 46: {
                        message.pingHistogram_150 = reader.uint32();
                        break;
                    }
                case 47: {
                        message.pingHistogram_200 = reader.uint32();
                        break;
                    }
                case 48: {
                        message.pingHistogram_300 = reader.uint32();
                        break;
                    }
                case 49: {
                        message.pingHistogramMax = reader.uint32();
                        break;
                    }
                case 50: {
                        message.pingNtile_5th = reader.uint32();
                        break;
                    }
                case 51: {
                        message.pingNtile_50th = reader.uint32();
                        break;
                    }
                case 52: {
                        message.pingNtile_75th = reader.uint32();
                        break;
                    }
                case 53: {
                        message.pingNtile_95th = reader.uint32();
                        break;
                    }
                case 54: {
                        message.pingNtile_98th = reader.uint32();
                        break;
                    }
                case 61: {
                        message.jitterHistogramNegligible = reader.uint32();
                        break;
                    }
                case 62: {
                        message.jitterHistogram_1 = reader.uint32();
                        break;
                    }
                case 63: {
                        message.jitterHistogram_2 = reader.uint32();
                        break;
                    }
                case 64: {
                        message.jitterHistogram_5 = reader.uint32();
                        break;
                    }
                case 65: {
                        message.jitterHistogram_10 = reader.uint32();
                        break;
                    }
                case 66: {
                        message.jitterHistogram_20 = reader.uint32();
                        break;
                    }
                case 67: {
                        message.txspeedMax = reader.uint32();
                        break;
                    }
                case 68: {
                        message.txspeedHistogram_16 = reader.uint32();
                        break;
                    }
                case 69: {
                        message.txspeedHistogram_32 = reader.uint32();
                        break;
                    }
                case 70: {
                        message.txspeedHistogram_64 = reader.uint32();
                        break;
                    }
                case 71: {
                        message.txspeedHistogram_128 = reader.uint32();
                        break;
                    }
                case 72: {
                        message.txspeedHistogram_256 = reader.uint32();
                        break;
                    }
                case 73: {
                        message.txspeedHistogram_512 = reader.uint32();
                        break;
                    }
                case 74: {
                        message.txspeedHistogram_1024 = reader.uint32();
                        break;
                    }
                case 75: {
                        message.txspeedHistogramMax = reader.uint32();
                        break;
                    }
                case 76: {
                        message.txspeedNtile_5th = reader.uint32();
                        break;
                    }
                case 77: {
                        message.txspeedNtile_50th = reader.uint32();
                        break;
                    }
                case 78: {
                        message.txspeedNtile_75th = reader.uint32();
                        break;
                    }
                case 79: {
                        message.txspeedNtile_95th = reader.uint32();
                        break;
                    }
                case 80: {
                        message.txspeedNtile_98th = reader.uint32();
                        break;
                    }
                case 81: {
                        message.rxspeedMax = reader.uint32();
                        break;
                    }
                case 82: {
                        message.rxspeedHistogram_16 = reader.uint32();
                        break;
                    }
                case 83: {
                        message.rxspeedHistogram_32 = reader.uint32();
                        break;
                    }
                case 84: {
                        message.rxspeedHistogram_64 = reader.uint32();
                        break;
                    }
                case 85: {
                        message.rxspeedHistogram_128 = reader.uint32();
                        break;
                    }
                case 86: {
                        message.rxspeedHistogram_256 = reader.uint32();
                        break;
                    }
                case 87: {
                        message.rxspeedHistogram_512 = reader.uint32();
                        break;
                    }
                case 88: {
                        message.rxspeedHistogram_1024 = reader.uint32();
                        break;
                    }
                case 89: {
                        message.rxspeedHistogramMax = reader.uint32();
                        break;
                    }
                case 90: {
                        message.rxspeedNtile_5th = reader.uint32();
                        break;
                    }
                case 91: {
                        message.rxspeedNtile_50th = reader.uint32();
                        break;
                    }
                case 92: {
                        message.rxspeedNtile_75th = reader.uint32();
                        break;
                    }
                case 93: {
                        message.rxspeedNtile_95th = reader.uint32();
                        break;
                    }
                case 94: {
                        message.rxspeedNtile_98th = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramLinkLifetimeStats message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramLinkLifetimeStats} CMsgSteamDatagramLinkLifetimeStats
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramLinkLifetimeStats.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramLinkLifetimeStats message.
         * @function verify
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramLinkLifetimeStats.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectedSeconds != null && message.hasOwnProperty("connectedSeconds"))
                if (!$util.isInteger(message.connectedSeconds))
                    return "connectedSeconds: integer expected";
            if (message.packetsSent != null && message.hasOwnProperty("packetsSent"))
                if (!$util.isInteger(message.packetsSent) && !(message.packetsSent && $util.isInteger(message.packetsSent.low) && $util.isInteger(message.packetsSent.high)))
                    return "packetsSent: integer|Long expected";
            if (message.kbSent != null && message.hasOwnProperty("kbSent"))
                if (!$util.isInteger(message.kbSent) && !(message.kbSent && $util.isInteger(message.kbSent.low) && $util.isInteger(message.kbSent.high)))
                    return "kbSent: integer|Long expected";
            if (message.packetsRecv != null && message.hasOwnProperty("packetsRecv"))
                if (!$util.isInteger(message.packetsRecv) && !(message.packetsRecv && $util.isInteger(message.packetsRecv.low) && $util.isInteger(message.packetsRecv.high)))
                    return "packetsRecv: integer|Long expected";
            if (message.kbRecv != null && message.hasOwnProperty("kbRecv"))
                if (!$util.isInteger(message.kbRecv) && !(message.kbRecv && $util.isInteger(message.kbRecv.low) && $util.isInteger(message.kbRecv.high)))
                    return "kbRecv: integer|Long expected";
            if (message.packetsRecvSequenced != null && message.hasOwnProperty("packetsRecvSequenced"))
                if (!$util.isInteger(message.packetsRecvSequenced) && !(message.packetsRecvSequenced && $util.isInteger(message.packetsRecvSequenced.low) && $util.isInteger(message.packetsRecvSequenced.high)))
                    return "packetsRecvSequenced: integer|Long expected";
            if (message.packetsRecvDropped != null && message.hasOwnProperty("packetsRecvDropped"))
                if (!$util.isInteger(message.packetsRecvDropped) && !(message.packetsRecvDropped && $util.isInteger(message.packetsRecvDropped.low) && $util.isInteger(message.packetsRecvDropped.high)))
                    return "packetsRecvDropped: integer|Long expected";
            if (message.packetsRecvOutOfOrder != null && message.hasOwnProperty("packetsRecvOutOfOrder"))
                if (!$util.isInteger(message.packetsRecvOutOfOrder) && !(message.packetsRecvOutOfOrder && $util.isInteger(message.packetsRecvOutOfOrder.low) && $util.isInteger(message.packetsRecvOutOfOrder.high)))
                    return "packetsRecvOutOfOrder: integer|Long expected";
            if (message.packetsRecvOutOfOrderCorrected != null && message.hasOwnProperty("packetsRecvOutOfOrderCorrected"))
                if (!$util.isInteger(message.packetsRecvOutOfOrderCorrected) && !(message.packetsRecvOutOfOrderCorrected && $util.isInteger(message.packetsRecvOutOfOrderCorrected.low) && $util.isInteger(message.packetsRecvOutOfOrderCorrected.high)))
                    return "packetsRecvOutOfOrderCorrected: integer|Long expected";
            if (message.packetsRecvDuplicate != null && message.hasOwnProperty("packetsRecvDuplicate"))
                if (!$util.isInteger(message.packetsRecvDuplicate) && !(message.packetsRecvDuplicate && $util.isInteger(message.packetsRecvDuplicate.low) && $util.isInteger(message.packetsRecvDuplicate.high)))
                    return "packetsRecvDuplicate: integer|Long expected";
            if (message.packetsRecvLurch != null && message.hasOwnProperty("packetsRecvLurch"))
                if (!$util.isInteger(message.packetsRecvLurch) && !(message.packetsRecvLurch && $util.isInteger(message.packetsRecvLurch.low) && $util.isInteger(message.packetsRecvLurch.high)))
                    return "packetsRecvLurch: integer|Long expected";
            if (message.multipathPacketsRecvSequenced != null && message.hasOwnProperty("multipathPacketsRecvSequenced")) {
                if (!Array.isArray(message.multipathPacketsRecvSequenced))
                    return "multipathPacketsRecvSequenced: array expected";
                for (var i = 0; i < message.multipathPacketsRecvSequenced.length; ++i)
                    if (!$util.isInteger(message.multipathPacketsRecvSequenced[i]) && !(message.multipathPacketsRecvSequenced[i] && $util.isInteger(message.multipathPacketsRecvSequenced[i].low) && $util.isInteger(message.multipathPacketsRecvSequenced[i].high)))
                        return "multipathPacketsRecvSequenced: integer|Long[] expected";
            }
            if (message.multipathPacketsRecvLater != null && message.hasOwnProperty("multipathPacketsRecvLater")) {
                if (!Array.isArray(message.multipathPacketsRecvLater))
                    return "multipathPacketsRecvLater: array expected";
                for (var i = 0; i < message.multipathPacketsRecvLater.length; ++i)
                    if (!$util.isInteger(message.multipathPacketsRecvLater[i]) && !(message.multipathPacketsRecvLater[i] && $util.isInteger(message.multipathPacketsRecvLater[i].low) && $util.isInteger(message.multipathPacketsRecvLater[i].high)))
                        return "multipathPacketsRecvLater: integer|Long[] expected";
            }
            if (message.multipathSendEnabled != null && message.hasOwnProperty("multipathSendEnabled"))
                if (!$util.isInteger(message.multipathSendEnabled))
                    return "multipathSendEnabled: integer expected";
            if (message.qualityHistogram_100 != null && message.hasOwnProperty("qualityHistogram_100"))
                if (!$util.isInteger(message.qualityHistogram_100))
                    return "qualityHistogram_100: integer expected";
            if (message.qualityHistogram_99 != null && message.hasOwnProperty("qualityHistogram_99"))
                if (!$util.isInteger(message.qualityHistogram_99))
                    return "qualityHistogram_99: integer expected";
            if (message.qualityHistogram_97 != null && message.hasOwnProperty("qualityHistogram_97"))
                if (!$util.isInteger(message.qualityHistogram_97))
                    return "qualityHistogram_97: integer expected";
            if (message.qualityHistogram_95 != null && message.hasOwnProperty("qualityHistogram_95"))
                if (!$util.isInteger(message.qualityHistogram_95))
                    return "qualityHistogram_95: integer expected";
            if (message.qualityHistogram_90 != null && message.hasOwnProperty("qualityHistogram_90"))
                if (!$util.isInteger(message.qualityHistogram_90))
                    return "qualityHistogram_90: integer expected";
            if (message.qualityHistogram_75 != null && message.hasOwnProperty("qualityHistogram_75"))
                if (!$util.isInteger(message.qualityHistogram_75))
                    return "qualityHistogram_75: integer expected";
            if (message.qualityHistogram_50 != null && message.hasOwnProperty("qualityHistogram_50"))
                if (!$util.isInteger(message.qualityHistogram_50))
                    return "qualityHistogram_50: integer expected";
            if (message.qualityHistogram_1 != null && message.hasOwnProperty("qualityHistogram_1"))
                if (!$util.isInteger(message.qualityHistogram_1))
                    return "qualityHistogram_1: integer expected";
            if (message.qualityHistogramDead != null && message.hasOwnProperty("qualityHistogramDead"))
                if (!$util.isInteger(message.qualityHistogramDead))
                    return "qualityHistogramDead: integer expected";
            if (message.qualityNtile_2nd != null && message.hasOwnProperty("qualityNtile_2nd"))
                if (!$util.isInteger(message.qualityNtile_2nd))
                    return "qualityNtile_2nd: integer expected";
            if (message.qualityNtile_5th != null && message.hasOwnProperty("qualityNtile_5th"))
                if (!$util.isInteger(message.qualityNtile_5th))
                    return "qualityNtile_5th: integer expected";
            if (message.qualityNtile_25th != null && message.hasOwnProperty("qualityNtile_25th"))
                if (!$util.isInteger(message.qualityNtile_25th))
                    return "qualityNtile_25th: integer expected";
            if (message.qualityNtile_50th != null && message.hasOwnProperty("qualityNtile_50th"))
                if (!$util.isInteger(message.qualityNtile_50th))
                    return "qualityNtile_50th: integer expected";
            if (message.pingHistogram_25 != null && message.hasOwnProperty("pingHistogram_25"))
                if (!$util.isInteger(message.pingHistogram_25))
                    return "pingHistogram_25: integer expected";
            if (message.pingHistogram_50 != null && message.hasOwnProperty("pingHistogram_50"))
                if (!$util.isInteger(message.pingHistogram_50))
                    return "pingHistogram_50: integer expected";
            if (message.pingHistogram_75 != null && message.hasOwnProperty("pingHistogram_75"))
                if (!$util.isInteger(message.pingHistogram_75))
                    return "pingHistogram_75: integer expected";
            if (message.pingHistogram_100 != null && message.hasOwnProperty("pingHistogram_100"))
                if (!$util.isInteger(message.pingHistogram_100))
                    return "pingHistogram_100: integer expected";
            if (message.pingHistogram_125 != null && message.hasOwnProperty("pingHistogram_125"))
                if (!$util.isInteger(message.pingHistogram_125))
                    return "pingHistogram_125: integer expected";
            if (message.pingHistogram_150 != null && message.hasOwnProperty("pingHistogram_150"))
                if (!$util.isInteger(message.pingHistogram_150))
                    return "pingHistogram_150: integer expected";
            if (message.pingHistogram_200 != null && message.hasOwnProperty("pingHistogram_200"))
                if (!$util.isInteger(message.pingHistogram_200))
                    return "pingHistogram_200: integer expected";
            if (message.pingHistogram_300 != null && message.hasOwnProperty("pingHistogram_300"))
                if (!$util.isInteger(message.pingHistogram_300))
                    return "pingHistogram_300: integer expected";
            if (message.pingHistogramMax != null && message.hasOwnProperty("pingHistogramMax"))
                if (!$util.isInteger(message.pingHistogramMax))
                    return "pingHistogramMax: integer expected";
            if (message.pingNtile_5th != null && message.hasOwnProperty("pingNtile_5th"))
                if (!$util.isInteger(message.pingNtile_5th))
                    return "pingNtile_5th: integer expected";
            if (message.pingNtile_50th != null && message.hasOwnProperty("pingNtile_50th"))
                if (!$util.isInteger(message.pingNtile_50th))
                    return "pingNtile_50th: integer expected";
            if (message.pingNtile_75th != null && message.hasOwnProperty("pingNtile_75th"))
                if (!$util.isInteger(message.pingNtile_75th))
                    return "pingNtile_75th: integer expected";
            if (message.pingNtile_95th != null && message.hasOwnProperty("pingNtile_95th"))
                if (!$util.isInteger(message.pingNtile_95th))
                    return "pingNtile_95th: integer expected";
            if (message.pingNtile_98th != null && message.hasOwnProperty("pingNtile_98th"))
                if (!$util.isInteger(message.pingNtile_98th))
                    return "pingNtile_98th: integer expected";
            if (message.jitterHistogramNegligible != null && message.hasOwnProperty("jitterHistogramNegligible"))
                if (!$util.isInteger(message.jitterHistogramNegligible))
                    return "jitterHistogramNegligible: integer expected";
            if (message.jitterHistogram_1 != null && message.hasOwnProperty("jitterHistogram_1"))
                if (!$util.isInteger(message.jitterHistogram_1))
                    return "jitterHistogram_1: integer expected";
            if (message.jitterHistogram_2 != null && message.hasOwnProperty("jitterHistogram_2"))
                if (!$util.isInteger(message.jitterHistogram_2))
                    return "jitterHistogram_2: integer expected";
            if (message.jitterHistogram_5 != null && message.hasOwnProperty("jitterHistogram_5"))
                if (!$util.isInteger(message.jitterHistogram_5))
                    return "jitterHistogram_5: integer expected";
            if (message.jitterHistogram_10 != null && message.hasOwnProperty("jitterHistogram_10"))
                if (!$util.isInteger(message.jitterHistogram_10))
                    return "jitterHistogram_10: integer expected";
            if (message.jitterHistogram_20 != null && message.hasOwnProperty("jitterHistogram_20"))
                if (!$util.isInteger(message.jitterHistogram_20))
                    return "jitterHistogram_20: integer expected";
            if (message.txspeedMax != null && message.hasOwnProperty("txspeedMax"))
                if (!$util.isInteger(message.txspeedMax))
                    return "txspeedMax: integer expected";
            if (message.txspeedHistogram_16 != null && message.hasOwnProperty("txspeedHistogram_16"))
                if (!$util.isInteger(message.txspeedHistogram_16))
                    return "txspeedHistogram_16: integer expected";
            if (message.txspeedHistogram_32 != null && message.hasOwnProperty("txspeedHistogram_32"))
                if (!$util.isInteger(message.txspeedHistogram_32))
                    return "txspeedHistogram_32: integer expected";
            if (message.txspeedHistogram_64 != null && message.hasOwnProperty("txspeedHistogram_64"))
                if (!$util.isInteger(message.txspeedHistogram_64))
                    return "txspeedHistogram_64: integer expected";
            if (message.txspeedHistogram_128 != null && message.hasOwnProperty("txspeedHistogram_128"))
                if (!$util.isInteger(message.txspeedHistogram_128))
                    return "txspeedHistogram_128: integer expected";
            if (message.txspeedHistogram_256 != null && message.hasOwnProperty("txspeedHistogram_256"))
                if (!$util.isInteger(message.txspeedHistogram_256))
                    return "txspeedHistogram_256: integer expected";
            if (message.txspeedHistogram_512 != null && message.hasOwnProperty("txspeedHistogram_512"))
                if (!$util.isInteger(message.txspeedHistogram_512))
                    return "txspeedHistogram_512: integer expected";
            if (message.txspeedHistogram_1024 != null && message.hasOwnProperty("txspeedHistogram_1024"))
                if (!$util.isInteger(message.txspeedHistogram_1024))
                    return "txspeedHistogram_1024: integer expected";
            if (message.txspeedHistogramMax != null && message.hasOwnProperty("txspeedHistogramMax"))
                if (!$util.isInteger(message.txspeedHistogramMax))
                    return "txspeedHistogramMax: integer expected";
            if (message.txspeedNtile_5th != null && message.hasOwnProperty("txspeedNtile_5th"))
                if (!$util.isInteger(message.txspeedNtile_5th))
                    return "txspeedNtile_5th: integer expected";
            if (message.txspeedNtile_50th != null && message.hasOwnProperty("txspeedNtile_50th"))
                if (!$util.isInteger(message.txspeedNtile_50th))
                    return "txspeedNtile_50th: integer expected";
            if (message.txspeedNtile_75th != null && message.hasOwnProperty("txspeedNtile_75th"))
                if (!$util.isInteger(message.txspeedNtile_75th))
                    return "txspeedNtile_75th: integer expected";
            if (message.txspeedNtile_95th != null && message.hasOwnProperty("txspeedNtile_95th"))
                if (!$util.isInteger(message.txspeedNtile_95th))
                    return "txspeedNtile_95th: integer expected";
            if (message.txspeedNtile_98th != null && message.hasOwnProperty("txspeedNtile_98th"))
                if (!$util.isInteger(message.txspeedNtile_98th))
                    return "txspeedNtile_98th: integer expected";
            if (message.rxspeedMax != null && message.hasOwnProperty("rxspeedMax"))
                if (!$util.isInteger(message.rxspeedMax))
                    return "rxspeedMax: integer expected";
            if (message.rxspeedHistogram_16 != null && message.hasOwnProperty("rxspeedHistogram_16"))
                if (!$util.isInteger(message.rxspeedHistogram_16))
                    return "rxspeedHistogram_16: integer expected";
            if (message.rxspeedHistogram_32 != null && message.hasOwnProperty("rxspeedHistogram_32"))
                if (!$util.isInteger(message.rxspeedHistogram_32))
                    return "rxspeedHistogram_32: integer expected";
            if (message.rxspeedHistogram_64 != null && message.hasOwnProperty("rxspeedHistogram_64"))
                if (!$util.isInteger(message.rxspeedHistogram_64))
                    return "rxspeedHistogram_64: integer expected";
            if (message.rxspeedHistogram_128 != null && message.hasOwnProperty("rxspeedHistogram_128"))
                if (!$util.isInteger(message.rxspeedHistogram_128))
                    return "rxspeedHistogram_128: integer expected";
            if (message.rxspeedHistogram_256 != null && message.hasOwnProperty("rxspeedHistogram_256"))
                if (!$util.isInteger(message.rxspeedHistogram_256))
                    return "rxspeedHistogram_256: integer expected";
            if (message.rxspeedHistogram_512 != null && message.hasOwnProperty("rxspeedHistogram_512"))
                if (!$util.isInteger(message.rxspeedHistogram_512))
                    return "rxspeedHistogram_512: integer expected";
            if (message.rxspeedHistogram_1024 != null && message.hasOwnProperty("rxspeedHistogram_1024"))
                if (!$util.isInteger(message.rxspeedHistogram_1024))
                    return "rxspeedHistogram_1024: integer expected";
            if (message.rxspeedHistogramMax != null && message.hasOwnProperty("rxspeedHistogramMax"))
                if (!$util.isInteger(message.rxspeedHistogramMax))
                    return "rxspeedHistogramMax: integer expected";
            if (message.rxspeedNtile_5th != null && message.hasOwnProperty("rxspeedNtile_5th"))
                if (!$util.isInteger(message.rxspeedNtile_5th))
                    return "rxspeedNtile_5th: integer expected";
            if (message.rxspeedNtile_50th != null && message.hasOwnProperty("rxspeedNtile_50th"))
                if (!$util.isInteger(message.rxspeedNtile_50th))
                    return "rxspeedNtile_50th: integer expected";
            if (message.rxspeedNtile_75th != null && message.hasOwnProperty("rxspeedNtile_75th"))
                if (!$util.isInteger(message.rxspeedNtile_75th))
                    return "rxspeedNtile_75th: integer expected";
            if (message.rxspeedNtile_95th != null && message.hasOwnProperty("rxspeedNtile_95th"))
                if (!$util.isInteger(message.rxspeedNtile_95th))
                    return "rxspeedNtile_95th: integer expected";
            if (message.rxspeedNtile_98th != null && message.hasOwnProperty("rxspeedNtile_98th"))
                if (!$util.isInteger(message.rxspeedNtile_98th))
                    return "rxspeedNtile_98th: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramLinkLifetimeStats message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramLinkLifetimeStats} CMsgSteamDatagramLinkLifetimeStats
         */
        CMsgSteamDatagramLinkLifetimeStats.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramLinkLifetimeStats)
                return object;
            var message = new $root.CMsgSteamDatagramLinkLifetimeStats();
            if (object.connectedSeconds != null)
                message.connectedSeconds = object.connectedSeconds >>> 0;
            if (object.packetsSent != null)
                if ($util.Long)
                    (message.packetsSent = $util.Long.fromValue(object.packetsSent)).unsigned = true;
                else if (typeof object.packetsSent === "string")
                    message.packetsSent = parseInt(object.packetsSent, 10);
                else if (typeof object.packetsSent === "number")
                    message.packetsSent = object.packetsSent;
                else if (typeof object.packetsSent === "object")
                    message.packetsSent = new $util.LongBits(object.packetsSent.low >>> 0, object.packetsSent.high >>> 0).toNumber(true);
            if (object.kbSent != null)
                if ($util.Long)
                    (message.kbSent = $util.Long.fromValue(object.kbSent)).unsigned = true;
                else if (typeof object.kbSent === "string")
                    message.kbSent = parseInt(object.kbSent, 10);
                else if (typeof object.kbSent === "number")
                    message.kbSent = object.kbSent;
                else if (typeof object.kbSent === "object")
                    message.kbSent = new $util.LongBits(object.kbSent.low >>> 0, object.kbSent.high >>> 0).toNumber(true);
            if (object.packetsRecv != null)
                if ($util.Long)
                    (message.packetsRecv = $util.Long.fromValue(object.packetsRecv)).unsigned = true;
                else if (typeof object.packetsRecv === "string")
                    message.packetsRecv = parseInt(object.packetsRecv, 10);
                else if (typeof object.packetsRecv === "number")
                    message.packetsRecv = object.packetsRecv;
                else if (typeof object.packetsRecv === "object")
                    message.packetsRecv = new $util.LongBits(object.packetsRecv.low >>> 0, object.packetsRecv.high >>> 0).toNumber(true);
            if (object.kbRecv != null)
                if ($util.Long)
                    (message.kbRecv = $util.Long.fromValue(object.kbRecv)).unsigned = true;
                else if (typeof object.kbRecv === "string")
                    message.kbRecv = parseInt(object.kbRecv, 10);
                else if (typeof object.kbRecv === "number")
                    message.kbRecv = object.kbRecv;
                else if (typeof object.kbRecv === "object")
                    message.kbRecv = new $util.LongBits(object.kbRecv.low >>> 0, object.kbRecv.high >>> 0).toNumber(true);
            if (object.packetsRecvSequenced != null)
                if ($util.Long)
                    (message.packetsRecvSequenced = $util.Long.fromValue(object.packetsRecvSequenced)).unsigned = true;
                else if (typeof object.packetsRecvSequenced === "string")
                    message.packetsRecvSequenced = parseInt(object.packetsRecvSequenced, 10);
                else if (typeof object.packetsRecvSequenced === "number")
                    message.packetsRecvSequenced = object.packetsRecvSequenced;
                else if (typeof object.packetsRecvSequenced === "object")
                    message.packetsRecvSequenced = new $util.LongBits(object.packetsRecvSequenced.low >>> 0, object.packetsRecvSequenced.high >>> 0).toNumber(true);
            if (object.packetsRecvDropped != null)
                if ($util.Long)
                    (message.packetsRecvDropped = $util.Long.fromValue(object.packetsRecvDropped)).unsigned = true;
                else if (typeof object.packetsRecvDropped === "string")
                    message.packetsRecvDropped = parseInt(object.packetsRecvDropped, 10);
                else if (typeof object.packetsRecvDropped === "number")
                    message.packetsRecvDropped = object.packetsRecvDropped;
                else if (typeof object.packetsRecvDropped === "object")
                    message.packetsRecvDropped = new $util.LongBits(object.packetsRecvDropped.low >>> 0, object.packetsRecvDropped.high >>> 0).toNumber(true);
            if (object.packetsRecvOutOfOrder != null)
                if ($util.Long)
                    (message.packetsRecvOutOfOrder = $util.Long.fromValue(object.packetsRecvOutOfOrder)).unsigned = true;
                else if (typeof object.packetsRecvOutOfOrder === "string")
                    message.packetsRecvOutOfOrder = parseInt(object.packetsRecvOutOfOrder, 10);
                else if (typeof object.packetsRecvOutOfOrder === "number")
                    message.packetsRecvOutOfOrder = object.packetsRecvOutOfOrder;
                else if (typeof object.packetsRecvOutOfOrder === "object")
                    message.packetsRecvOutOfOrder = new $util.LongBits(object.packetsRecvOutOfOrder.low >>> 0, object.packetsRecvOutOfOrder.high >>> 0).toNumber(true);
            if (object.packetsRecvOutOfOrderCorrected != null)
                if ($util.Long)
                    (message.packetsRecvOutOfOrderCorrected = $util.Long.fromValue(object.packetsRecvOutOfOrderCorrected)).unsigned = true;
                else if (typeof object.packetsRecvOutOfOrderCorrected === "string")
                    message.packetsRecvOutOfOrderCorrected = parseInt(object.packetsRecvOutOfOrderCorrected, 10);
                else if (typeof object.packetsRecvOutOfOrderCorrected === "number")
                    message.packetsRecvOutOfOrderCorrected = object.packetsRecvOutOfOrderCorrected;
                else if (typeof object.packetsRecvOutOfOrderCorrected === "object")
                    message.packetsRecvOutOfOrderCorrected = new $util.LongBits(object.packetsRecvOutOfOrderCorrected.low >>> 0, object.packetsRecvOutOfOrderCorrected.high >>> 0).toNumber(true);
            if (object.packetsRecvDuplicate != null)
                if ($util.Long)
                    (message.packetsRecvDuplicate = $util.Long.fromValue(object.packetsRecvDuplicate)).unsigned = true;
                else if (typeof object.packetsRecvDuplicate === "string")
                    message.packetsRecvDuplicate = parseInt(object.packetsRecvDuplicate, 10);
                else if (typeof object.packetsRecvDuplicate === "number")
                    message.packetsRecvDuplicate = object.packetsRecvDuplicate;
                else if (typeof object.packetsRecvDuplicate === "object")
                    message.packetsRecvDuplicate = new $util.LongBits(object.packetsRecvDuplicate.low >>> 0, object.packetsRecvDuplicate.high >>> 0).toNumber(true);
            if (object.packetsRecvLurch != null)
                if ($util.Long)
                    (message.packetsRecvLurch = $util.Long.fromValue(object.packetsRecvLurch)).unsigned = true;
                else if (typeof object.packetsRecvLurch === "string")
                    message.packetsRecvLurch = parseInt(object.packetsRecvLurch, 10);
                else if (typeof object.packetsRecvLurch === "number")
                    message.packetsRecvLurch = object.packetsRecvLurch;
                else if (typeof object.packetsRecvLurch === "object")
                    message.packetsRecvLurch = new $util.LongBits(object.packetsRecvLurch.low >>> 0, object.packetsRecvLurch.high >>> 0).toNumber(true);
            if (object.multipathPacketsRecvSequenced) {
                if (!Array.isArray(object.multipathPacketsRecvSequenced))
                    throw TypeError(".CMsgSteamDatagramLinkLifetimeStats.multipathPacketsRecvSequenced: array expected");
                message.multipathPacketsRecvSequenced = [];
                for (var i = 0; i < object.multipathPacketsRecvSequenced.length; ++i)
                    if ($util.Long)
                        (message.multipathPacketsRecvSequenced[i] = $util.Long.fromValue(object.multipathPacketsRecvSequenced[i])).unsigned = true;
                    else if (typeof object.multipathPacketsRecvSequenced[i] === "string")
                        message.multipathPacketsRecvSequenced[i] = parseInt(object.multipathPacketsRecvSequenced[i], 10);
                    else if (typeof object.multipathPacketsRecvSequenced[i] === "number")
                        message.multipathPacketsRecvSequenced[i] = object.multipathPacketsRecvSequenced[i];
                    else if (typeof object.multipathPacketsRecvSequenced[i] === "object")
                        message.multipathPacketsRecvSequenced[i] = new $util.LongBits(object.multipathPacketsRecvSequenced[i].low >>> 0, object.multipathPacketsRecvSequenced[i].high >>> 0).toNumber(true);
            }
            if (object.multipathPacketsRecvLater) {
                if (!Array.isArray(object.multipathPacketsRecvLater))
                    throw TypeError(".CMsgSteamDatagramLinkLifetimeStats.multipathPacketsRecvLater: array expected");
                message.multipathPacketsRecvLater = [];
                for (var i = 0; i < object.multipathPacketsRecvLater.length; ++i)
                    if ($util.Long)
                        (message.multipathPacketsRecvLater[i] = $util.Long.fromValue(object.multipathPacketsRecvLater[i])).unsigned = true;
                    else if (typeof object.multipathPacketsRecvLater[i] === "string")
                        message.multipathPacketsRecvLater[i] = parseInt(object.multipathPacketsRecvLater[i], 10);
                    else if (typeof object.multipathPacketsRecvLater[i] === "number")
                        message.multipathPacketsRecvLater[i] = object.multipathPacketsRecvLater[i];
                    else if (typeof object.multipathPacketsRecvLater[i] === "object")
                        message.multipathPacketsRecvLater[i] = new $util.LongBits(object.multipathPacketsRecvLater[i].low >>> 0, object.multipathPacketsRecvLater[i].high >>> 0).toNumber(true);
            }
            if (object.multipathSendEnabled != null)
                message.multipathSendEnabled = object.multipathSendEnabled >>> 0;
            if (object.qualityHistogram_100 != null)
                message.qualityHistogram_100 = object.qualityHistogram_100 >>> 0;
            if (object.qualityHistogram_99 != null)
                message.qualityHistogram_99 = object.qualityHistogram_99 >>> 0;
            if (object.qualityHistogram_97 != null)
                message.qualityHistogram_97 = object.qualityHistogram_97 >>> 0;
            if (object.qualityHistogram_95 != null)
                message.qualityHistogram_95 = object.qualityHistogram_95 >>> 0;
            if (object.qualityHistogram_90 != null)
                message.qualityHistogram_90 = object.qualityHistogram_90 >>> 0;
            if (object.qualityHistogram_75 != null)
                message.qualityHistogram_75 = object.qualityHistogram_75 >>> 0;
            if (object.qualityHistogram_50 != null)
                message.qualityHistogram_50 = object.qualityHistogram_50 >>> 0;
            if (object.qualityHistogram_1 != null)
                message.qualityHistogram_1 = object.qualityHistogram_1 >>> 0;
            if (object.qualityHistogramDead != null)
                message.qualityHistogramDead = object.qualityHistogramDead >>> 0;
            if (object.qualityNtile_2nd != null)
                message.qualityNtile_2nd = object.qualityNtile_2nd >>> 0;
            if (object.qualityNtile_5th != null)
                message.qualityNtile_5th = object.qualityNtile_5th >>> 0;
            if (object.qualityNtile_25th != null)
                message.qualityNtile_25th = object.qualityNtile_25th >>> 0;
            if (object.qualityNtile_50th != null)
                message.qualityNtile_50th = object.qualityNtile_50th >>> 0;
            if (object.pingHistogram_25 != null)
                message.pingHistogram_25 = object.pingHistogram_25 >>> 0;
            if (object.pingHistogram_50 != null)
                message.pingHistogram_50 = object.pingHistogram_50 >>> 0;
            if (object.pingHistogram_75 != null)
                message.pingHistogram_75 = object.pingHistogram_75 >>> 0;
            if (object.pingHistogram_100 != null)
                message.pingHistogram_100 = object.pingHistogram_100 >>> 0;
            if (object.pingHistogram_125 != null)
                message.pingHistogram_125 = object.pingHistogram_125 >>> 0;
            if (object.pingHistogram_150 != null)
                message.pingHistogram_150 = object.pingHistogram_150 >>> 0;
            if (object.pingHistogram_200 != null)
                message.pingHistogram_200 = object.pingHistogram_200 >>> 0;
            if (object.pingHistogram_300 != null)
                message.pingHistogram_300 = object.pingHistogram_300 >>> 0;
            if (object.pingHistogramMax != null)
                message.pingHistogramMax = object.pingHistogramMax >>> 0;
            if (object.pingNtile_5th != null)
                message.pingNtile_5th = object.pingNtile_5th >>> 0;
            if (object.pingNtile_50th != null)
                message.pingNtile_50th = object.pingNtile_50th >>> 0;
            if (object.pingNtile_75th != null)
                message.pingNtile_75th = object.pingNtile_75th >>> 0;
            if (object.pingNtile_95th != null)
                message.pingNtile_95th = object.pingNtile_95th >>> 0;
            if (object.pingNtile_98th != null)
                message.pingNtile_98th = object.pingNtile_98th >>> 0;
            if (object.jitterHistogramNegligible != null)
                message.jitterHistogramNegligible = object.jitterHistogramNegligible >>> 0;
            if (object.jitterHistogram_1 != null)
                message.jitterHistogram_1 = object.jitterHistogram_1 >>> 0;
            if (object.jitterHistogram_2 != null)
                message.jitterHistogram_2 = object.jitterHistogram_2 >>> 0;
            if (object.jitterHistogram_5 != null)
                message.jitterHistogram_5 = object.jitterHistogram_5 >>> 0;
            if (object.jitterHistogram_10 != null)
                message.jitterHistogram_10 = object.jitterHistogram_10 >>> 0;
            if (object.jitterHistogram_20 != null)
                message.jitterHistogram_20 = object.jitterHistogram_20 >>> 0;
            if (object.txspeedMax != null)
                message.txspeedMax = object.txspeedMax >>> 0;
            if (object.txspeedHistogram_16 != null)
                message.txspeedHistogram_16 = object.txspeedHistogram_16 >>> 0;
            if (object.txspeedHistogram_32 != null)
                message.txspeedHistogram_32 = object.txspeedHistogram_32 >>> 0;
            if (object.txspeedHistogram_64 != null)
                message.txspeedHistogram_64 = object.txspeedHistogram_64 >>> 0;
            if (object.txspeedHistogram_128 != null)
                message.txspeedHistogram_128 = object.txspeedHistogram_128 >>> 0;
            if (object.txspeedHistogram_256 != null)
                message.txspeedHistogram_256 = object.txspeedHistogram_256 >>> 0;
            if (object.txspeedHistogram_512 != null)
                message.txspeedHistogram_512 = object.txspeedHistogram_512 >>> 0;
            if (object.txspeedHistogram_1024 != null)
                message.txspeedHistogram_1024 = object.txspeedHistogram_1024 >>> 0;
            if (object.txspeedHistogramMax != null)
                message.txspeedHistogramMax = object.txspeedHistogramMax >>> 0;
            if (object.txspeedNtile_5th != null)
                message.txspeedNtile_5th = object.txspeedNtile_5th >>> 0;
            if (object.txspeedNtile_50th != null)
                message.txspeedNtile_50th = object.txspeedNtile_50th >>> 0;
            if (object.txspeedNtile_75th != null)
                message.txspeedNtile_75th = object.txspeedNtile_75th >>> 0;
            if (object.txspeedNtile_95th != null)
                message.txspeedNtile_95th = object.txspeedNtile_95th >>> 0;
            if (object.txspeedNtile_98th != null)
                message.txspeedNtile_98th = object.txspeedNtile_98th >>> 0;
            if (object.rxspeedMax != null)
                message.rxspeedMax = object.rxspeedMax >>> 0;
            if (object.rxspeedHistogram_16 != null)
                message.rxspeedHistogram_16 = object.rxspeedHistogram_16 >>> 0;
            if (object.rxspeedHistogram_32 != null)
                message.rxspeedHistogram_32 = object.rxspeedHistogram_32 >>> 0;
            if (object.rxspeedHistogram_64 != null)
                message.rxspeedHistogram_64 = object.rxspeedHistogram_64 >>> 0;
            if (object.rxspeedHistogram_128 != null)
                message.rxspeedHistogram_128 = object.rxspeedHistogram_128 >>> 0;
            if (object.rxspeedHistogram_256 != null)
                message.rxspeedHistogram_256 = object.rxspeedHistogram_256 >>> 0;
            if (object.rxspeedHistogram_512 != null)
                message.rxspeedHistogram_512 = object.rxspeedHistogram_512 >>> 0;
            if (object.rxspeedHistogram_1024 != null)
                message.rxspeedHistogram_1024 = object.rxspeedHistogram_1024 >>> 0;
            if (object.rxspeedHistogramMax != null)
                message.rxspeedHistogramMax = object.rxspeedHistogramMax >>> 0;
            if (object.rxspeedNtile_5th != null)
                message.rxspeedNtile_5th = object.rxspeedNtile_5th >>> 0;
            if (object.rxspeedNtile_50th != null)
                message.rxspeedNtile_50th = object.rxspeedNtile_50th >>> 0;
            if (object.rxspeedNtile_75th != null)
                message.rxspeedNtile_75th = object.rxspeedNtile_75th >>> 0;
            if (object.rxspeedNtile_95th != null)
                message.rxspeedNtile_95th = object.rxspeedNtile_95th >>> 0;
            if (object.rxspeedNtile_98th != null)
                message.rxspeedNtile_98th = object.rxspeedNtile_98th >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramLinkLifetimeStats message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {CMsgSteamDatagramLinkLifetimeStats} message CMsgSteamDatagramLinkLifetimeStats
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramLinkLifetimeStats.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.multipathPacketsRecvSequenced = [];
                object.multipathPacketsRecvLater = [];
            }
            if (options.defaults) {
                object.connectedSeconds = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packetsSent = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packetsSent = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.kbSent = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kbSent = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packetsRecv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packetsRecv = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.kbRecv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kbRecv = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packetsRecvSequenced = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packetsRecvSequenced = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packetsRecvDropped = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packetsRecvDropped = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packetsRecvOutOfOrder = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packetsRecvOutOfOrder = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packetsRecvDuplicate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packetsRecvDuplicate = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packetsRecvLurch = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packetsRecvLurch = options.longs === String ? "0" : 0;
                object.multipathSendEnabled = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.packetsRecvOutOfOrderCorrected = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.packetsRecvOutOfOrderCorrected = options.longs === String ? "0" : 0;
                object.qualityHistogram_100 = 0;
                object.qualityHistogram_99 = 0;
                object.qualityHistogram_97 = 0;
                object.qualityHistogram_95 = 0;
                object.qualityHistogram_90 = 0;
                object.qualityHistogram_75 = 0;
                object.qualityHistogram_50 = 0;
                object.qualityHistogram_1 = 0;
                object.qualityHistogramDead = 0;
                object.qualityNtile_2nd = 0;
                object.qualityNtile_5th = 0;
                object.qualityNtile_25th = 0;
                object.qualityNtile_50th = 0;
                object.pingHistogram_25 = 0;
                object.pingHistogram_50 = 0;
                object.pingHistogram_75 = 0;
                object.pingHistogram_100 = 0;
                object.pingHistogram_125 = 0;
                object.pingHistogram_150 = 0;
                object.pingHistogram_200 = 0;
                object.pingHistogram_300 = 0;
                object.pingHistogramMax = 0;
                object.pingNtile_5th = 0;
                object.pingNtile_50th = 0;
                object.pingNtile_75th = 0;
                object.pingNtile_95th = 0;
                object.pingNtile_98th = 0;
                object.jitterHistogramNegligible = 0;
                object.jitterHistogram_1 = 0;
                object.jitterHistogram_2 = 0;
                object.jitterHistogram_5 = 0;
                object.jitterHistogram_10 = 0;
                object.jitterHistogram_20 = 0;
                object.txspeedMax = 0;
                object.txspeedHistogram_16 = 0;
                object.txspeedHistogram_32 = 0;
                object.txspeedHistogram_64 = 0;
                object.txspeedHistogram_128 = 0;
                object.txspeedHistogram_256 = 0;
                object.txspeedHistogram_512 = 0;
                object.txspeedHistogram_1024 = 0;
                object.txspeedHistogramMax = 0;
                object.txspeedNtile_5th = 0;
                object.txspeedNtile_50th = 0;
                object.txspeedNtile_75th = 0;
                object.txspeedNtile_95th = 0;
                object.txspeedNtile_98th = 0;
                object.rxspeedMax = 0;
                object.rxspeedHistogram_16 = 0;
                object.rxspeedHistogram_32 = 0;
                object.rxspeedHistogram_64 = 0;
                object.rxspeedHistogram_128 = 0;
                object.rxspeedHistogram_256 = 0;
                object.rxspeedHistogram_512 = 0;
                object.rxspeedHistogram_1024 = 0;
                object.rxspeedHistogramMax = 0;
                object.rxspeedNtile_5th = 0;
                object.rxspeedNtile_50th = 0;
                object.rxspeedNtile_75th = 0;
                object.rxspeedNtile_95th = 0;
                object.rxspeedNtile_98th = 0;
            }
            if (message.connectedSeconds != null && message.hasOwnProperty("connectedSeconds"))
                object.connectedSeconds = message.connectedSeconds;
            if (message.packetsSent != null && message.hasOwnProperty("packetsSent"))
                if (typeof message.packetsSent === "number")
                    object.packetsSent = options.longs === String ? String(message.packetsSent) : message.packetsSent;
                else
                    object.packetsSent = options.longs === String ? $util.Long.prototype.toString.call(message.packetsSent) : options.longs === Number ? new $util.LongBits(message.packetsSent.low >>> 0, message.packetsSent.high >>> 0).toNumber(true) : message.packetsSent;
            if (message.kbSent != null && message.hasOwnProperty("kbSent"))
                if (typeof message.kbSent === "number")
                    object.kbSent = options.longs === String ? String(message.kbSent) : message.kbSent;
                else
                    object.kbSent = options.longs === String ? $util.Long.prototype.toString.call(message.kbSent) : options.longs === Number ? new $util.LongBits(message.kbSent.low >>> 0, message.kbSent.high >>> 0).toNumber(true) : message.kbSent;
            if (message.packetsRecv != null && message.hasOwnProperty("packetsRecv"))
                if (typeof message.packetsRecv === "number")
                    object.packetsRecv = options.longs === String ? String(message.packetsRecv) : message.packetsRecv;
                else
                    object.packetsRecv = options.longs === String ? $util.Long.prototype.toString.call(message.packetsRecv) : options.longs === Number ? new $util.LongBits(message.packetsRecv.low >>> 0, message.packetsRecv.high >>> 0).toNumber(true) : message.packetsRecv;
            if (message.kbRecv != null && message.hasOwnProperty("kbRecv"))
                if (typeof message.kbRecv === "number")
                    object.kbRecv = options.longs === String ? String(message.kbRecv) : message.kbRecv;
                else
                    object.kbRecv = options.longs === String ? $util.Long.prototype.toString.call(message.kbRecv) : options.longs === Number ? new $util.LongBits(message.kbRecv.low >>> 0, message.kbRecv.high >>> 0).toNumber(true) : message.kbRecv;
            if (message.packetsRecvSequenced != null && message.hasOwnProperty("packetsRecvSequenced"))
                if (typeof message.packetsRecvSequenced === "number")
                    object.packetsRecvSequenced = options.longs === String ? String(message.packetsRecvSequenced) : message.packetsRecvSequenced;
                else
                    object.packetsRecvSequenced = options.longs === String ? $util.Long.prototype.toString.call(message.packetsRecvSequenced) : options.longs === Number ? new $util.LongBits(message.packetsRecvSequenced.low >>> 0, message.packetsRecvSequenced.high >>> 0).toNumber(true) : message.packetsRecvSequenced;
            if (message.packetsRecvDropped != null && message.hasOwnProperty("packetsRecvDropped"))
                if (typeof message.packetsRecvDropped === "number")
                    object.packetsRecvDropped = options.longs === String ? String(message.packetsRecvDropped) : message.packetsRecvDropped;
                else
                    object.packetsRecvDropped = options.longs === String ? $util.Long.prototype.toString.call(message.packetsRecvDropped) : options.longs === Number ? new $util.LongBits(message.packetsRecvDropped.low >>> 0, message.packetsRecvDropped.high >>> 0).toNumber(true) : message.packetsRecvDropped;
            if (message.packetsRecvOutOfOrder != null && message.hasOwnProperty("packetsRecvOutOfOrder"))
                if (typeof message.packetsRecvOutOfOrder === "number")
                    object.packetsRecvOutOfOrder = options.longs === String ? String(message.packetsRecvOutOfOrder) : message.packetsRecvOutOfOrder;
                else
                    object.packetsRecvOutOfOrder = options.longs === String ? $util.Long.prototype.toString.call(message.packetsRecvOutOfOrder) : options.longs === Number ? new $util.LongBits(message.packetsRecvOutOfOrder.low >>> 0, message.packetsRecvOutOfOrder.high >>> 0).toNumber(true) : message.packetsRecvOutOfOrder;
            if (message.packetsRecvDuplicate != null && message.hasOwnProperty("packetsRecvDuplicate"))
                if (typeof message.packetsRecvDuplicate === "number")
                    object.packetsRecvDuplicate = options.longs === String ? String(message.packetsRecvDuplicate) : message.packetsRecvDuplicate;
                else
                    object.packetsRecvDuplicate = options.longs === String ? $util.Long.prototype.toString.call(message.packetsRecvDuplicate) : options.longs === Number ? new $util.LongBits(message.packetsRecvDuplicate.low >>> 0, message.packetsRecvDuplicate.high >>> 0).toNumber(true) : message.packetsRecvDuplicate;
            if (message.packetsRecvLurch != null && message.hasOwnProperty("packetsRecvLurch"))
                if (typeof message.packetsRecvLurch === "number")
                    object.packetsRecvLurch = options.longs === String ? String(message.packetsRecvLurch) : message.packetsRecvLurch;
                else
                    object.packetsRecvLurch = options.longs === String ? $util.Long.prototype.toString.call(message.packetsRecvLurch) : options.longs === Number ? new $util.LongBits(message.packetsRecvLurch.low >>> 0, message.packetsRecvLurch.high >>> 0).toNumber(true) : message.packetsRecvLurch;
            if (message.multipathPacketsRecvSequenced && message.multipathPacketsRecvSequenced.length) {
                object.multipathPacketsRecvSequenced = [];
                for (var j = 0; j < message.multipathPacketsRecvSequenced.length; ++j)
                    if (typeof message.multipathPacketsRecvSequenced[j] === "number")
                        object.multipathPacketsRecvSequenced[j] = options.longs === String ? String(message.multipathPacketsRecvSequenced[j]) : message.multipathPacketsRecvSequenced[j];
                    else
                        object.multipathPacketsRecvSequenced[j] = options.longs === String ? $util.Long.prototype.toString.call(message.multipathPacketsRecvSequenced[j]) : options.longs === Number ? new $util.LongBits(message.multipathPacketsRecvSequenced[j].low >>> 0, message.multipathPacketsRecvSequenced[j].high >>> 0).toNumber(true) : message.multipathPacketsRecvSequenced[j];
            }
            if (message.multipathPacketsRecvLater && message.multipathPacketsRecvLater.length) {
                object.multipathPacketsRecvLater = [];
                for (var j = 0; j < message.multipathPacketsRecvLater.length; ++j)
                    if (typeof message.multipathPacketsRecvLater[j] === "number")
                        object.multipathPacketsRecvLater[j] = options.longs === String ? String(message.multipathPacketsRecvLater[j]) : message.multipathPacketsRecvLater[j];
                    else
                        object.multipathPacketsRecvLater[j] = options.longs === String ? $util.Long.prototype.toString.call(message.multipathPacketsRecvLater[j]) : options.longs === Number ? new $util.LongBits(message.multipathPacketsRecvLater[j].low >>> 0, message.multipathPacketsRecvLater[j].high >>> 0).toNumber(true) : message.multipathPacketsRecvLater[j];
            }
            if (message.multipathSendEnabled != null && message.hasOwnProperty("multipathSendEnabled"))
                object.multipathSendEnabled = message.multipathSendEnabled;
            if (message.packetsRecvOutOfOrderCorrected != null && message.hasOwnProperty("packetsRecvOutOfOrderCorrected"))
                if (typeof message.packetsRecvOutOfOrderCorrected === "number")
                    object.packetsRecvOutOfOrderCorrected = options.longs === String ? String(message.packetsRecvOutOfOrderCorrected) : message.packetsRecvOutOfOrderCorrected;
                else
                    object.packetsRecvOutOfOrderCorrected = options.longs === String ? $util.Long.prototype.toString.call(message.packetsRecvOutOfOrderCorrected) : options.longs === Number ? new $util.LongBits(message.packetsRecvOutOfOrderCorrected.low >>> 0, message.packetsRecvOutOfOrderCorrected.high >>> 0).toNumber(true) : message.packetsRecvOutOfOrderCorrected;
            if (message.qualityHistogram_100 != null && message.hasOwnProperty("qualityHistogram_100"))
                object.qualityHistogram_100 = message.qualityHistogram_100;
            if (message.qualityHistogram_99 != null && message.hasOwnProperty("qualityHistogram_99"))
                object.qualityHistogram_99 = message.qualityHistogram_99;
            if (message.qualityHistogram_97 != null && message.hasOwnProperty("qualityHistogram_97"))
                object.qualityHistogram_97 = message.qualityHistogram_97;
            if (message.qualityHistogram_95 != null && message.hasOwnProperty("qualityHistogram_95"))
                object.qualityHistogram_95 = message.qualityHistogram_95;
            if (message.qualityHistogram_90 != null && message.hasOwnProperty("qualityHistogram_90"))
                object.qualityHistogram_90 = message.qualityHistogram_90;
            if (message.qualityHistogram_75 != null && message.hasOwnProperty("qualityHistogram_75"))
                object.qualityHistogram_75 = message.qualityHistogram_75;
            if (message.qualityHistogram_50 != null && message.hasOwnProperty("qualityHistogram_50"))
                object.qualityHistogram_50 = message.qualityHistogram_50;
            if (message.qualityHistogram_1 != null && message.hasOwnProperty("qualityHistogram_1"))
                object.qualityHistogram_1 = message.qualityHistogram_1;
            if (message.qualityHistogramDead != null && message.hasOwnProperty("qualityHistogramDead"))
                object.qualityHistogramDead = message.qualityHistogramDead;
            if (message.qualityNtile_2nd != null && message.hasOwnProperty("qualityNtile_2nd"))
                object.qualityNtile_2nd = message.qualityNtile_2nd;
            if (message.qualityNtile_5th != null && message.hasOwnProperty("qualityNtile_5th"))
                object.qualityNtile_5th = message.qualityNtile_5th;
            if (message.qualityNtile_25th != null && message.hasOwnProperty("qualityNtile_25th"))
                object.qualityNtile_25th = message.qualityNtile_25th;
            if (message.qualityNtile_50th != null && message.hasOwnProperty("qualityNtile_50th"))
                object.qualityNtile_50th = message.qualityNtile_50th;
            if (message.pingHistogram_25 != null && message.hasOwnProperty("pingHistogram_25"))
                object.pingHistogram_25 = message.pingHistogram_25;
            if (message.pingHistogram_50 != null && message.hasOwnProperty("pingHistogram_50"))
                object.pingHistogram_50 = message.pingHistogram_50;
            if (message.pingHistogram_75 != null && message.hasOwnProperty("pingHistogram_75"))
                object.pingHistogram_75 = message.pingHistogram_75;
            if (message.pingHistogram_100 != null && message.hasOwnProperty("pingHistogram_100"))
                object.pingHistogram_100 = message.pingHistogram_100;
            if (message.pingHistogram_125 != null && message.hasOwnProperty("pingHistogram_125"))
                object.pingHistogram_125 = message.pingHistogram_125;
            if (message.pingHistogram_150 != null && message.hasOwnProperty("pingHistogram_150"))
                object.pingHistogram_150 = message.pingHistogram_150;
            if (message.pingHistogram_200 != null && message.hasOwnProperty("pingHistogram_200"))
                object.pingHistogram_200 = message.pingHistogram_200;
            if (message.pingHistogram_300 != null && message.hasOwnProperty("pingHistogram_300"))
                object.pingHistogram_300 = message.pingHistogram_300;
            if (message.pingHistogramMax != null && message.hasOwnProperty("pingHistogramMax"))
                object.pingHistogramMax = message.pingHistogramMax;
            if (message.pingNtile_5th != null && message.hasOwnProperty("pingNtile_5th"))
                object.pingNtile_5th = message.pingNtile_5th;
            if (message.pingNtile_50th != null && message.hasOwnProperty("pingNtile_50th"))
                object.pingNtile_50th = message.pingNtile_50th;
            if (message.pingNtile_75th != null && message.hasOwnProperty("pingNtile_75th"))
                object.pingNtile_75th = message.pingNtile_75th;
            if (message.pingNtile_95th != null && message.hasOwnProperty("pingNtile_95th"))
                object.pingNtile_95th = message.pingNtile_95th;
            if (message.pingNtile_98th != null && message.hasOwnProperty("pingNtile_98th"))
                object.pingNtile_98th = message.pingNtile_98th;
            if (message.jitterHistogramNegligible != null && message.hasOwnProperty("jitterHistogramNegligible"))
                object.jitterHistogramNegligible = message.jitterHistogramNegligible;
            if (message.jitterHistogram_1 != null && message.hasOwnProperty("jitterHistogram_1"))
                object.jitterHistogram_1 = message.jitterHistogram_1;
            if (message.jitterHistogram_2 != null && message.hasOwnProperty("jitterHistogram_2"))
                object.jitterHistogram_2 = message.jitterHistogram_2;
            if (message.jitterHistogram_5 != null && message.hasOwnProperty("jitterHistogram_5"))
                object.jitterHistogram_5 = message.jitterHistogram_5;
            if (message.jitterHistogram_10 != null && message.hasOwnProperty("jitterHistogram_10"))
                object.jitterHistogram_10 = message.jitterHistogram_10;
            if (message.jitterHistogram_20 != null && message.hasOwnProperty("jitterHistogram_20"))
                object.jitterHistogram_20 = message.jitterHistogram_20;
            if (message.txspeedMax != null && message.hasOwnProperty("txspeedMax"))
                object.txspeedMax = message.txspeedMax;
            if (message.txspeedHistogram_16 != null && message.hasOwnProperty("txspeedHistogram_16"))
                object.txspeedHistogram_16 = message.txspeedHistogram_16;
            if (message.txspeedHistogram_32 != null && message.hasOwnProperty("txspeedHistogram_32"))
                object.txspeedHistogram_32 = message.txspeedHistogram_32;
            if (message.txspeedHistogram_64 != null && message.hasOwnProperty("txspeedHistogram_64"))
                object.txspeedHistogram_64 = message.txspeedHistogram_64;
            if (message.txspeedHistogram_128 != null && message.hasOwnProperty("txspeedHistogram_128"))
                object.txspeedHistogram_128 = message.txspeedHistogram_128;
            if (message.txspeedHistogram_256 != null && message.hasOwnProperty("txspeedHistogram_256"))
                object.txspeedHistogram_256 = message.txspeedHistogram_256;
            if (message.txspeedHistogram_512 != null && message.hasOwnProperty("txspeedHistogram_512"))
                object.txspeedHistogram_512 = message.txspeedHistogram_512;
            if (message.txspeedHistogram_1024 != null && message.hasOwnProperty("txspeedHistogram_1024"))
                object.txspeedHistogram_1024 = message.txspeedHistogram_1024;
            if (message.txspeedHistogramMax != null && message.hasOwnProperty("txspeedHistogramMax"))
                object.txspeedHistogramMax = message.txspeedHistogramMax;
            if (message.txspeedNtile_5th != null && message.hasOwnProperty("txspeedNtile_5th"))
                object.txspeedNtile_5th = message.txspeedNtile_5th;
            if (message.txspeedNtile_50th != null && message.hasOwnProperty("txspeedNtile_50th"))
                object.txspeedNtile_50th = message.txspeedNtile_50th;
            if (message.txspeedNtile_75th != null && message.hasOwnProperty("txspeedNtile_75th"))
                object.txspeedNtile_75th = message.txspeedNtile_75th;
            if (message.txspeedNtile_95th != null && message.hasOwnProperty("txspeedNtile_95th"))
                object.txspeedNtile_95th = message.txspeedNtile_95th;
            if (message.txspeedNtile_98th != null && message.hasOwnProperty("txspeedNtile_98th"))
                object.txspeedNtile_98th = message.txspeedNtile_98th;
            if (message.rxspeedMax != null && message.hasOwnProperty("rxspeedMax"))
                object.rxspeedMax = message.rxspeedMax;
            if (message.rxspeedHistogram_16 != null && message.hasOwnProperty("rxspeedHistogram_16"))
                object.rxspeedHistogram_16 = message.rxspeedHistogram_16;
            if (message.rxspeedHistogram_32 != null && message.hasOwnProperty("rxspeedHistogram_32"))
                object.rxspeedHistogram_32 = message.rxspeedHistogram_32;
            if (message.rxspeedHistogram_64 != null && message.hasOwnProperty("rxspeedHistogram_64"))
                object.rxspeedHistogram_64 = message.rxspeedHistogram_64;
            if (message.rxspeedHistogram_128 != null && message.hasOwnProperty("rxspeedHistogram_128"))
                object.rxspeedHistogram_128 = message.rxspeedHistogram_128;
            if (message.rxspeedHistogram_256 != null && message.hasOwnProperty("rxspeedHistogram_256"))
                object.rxspeedHistogram_256 = message.rxspeedHistogram_256;
            if (message.rxspeedHistogram_512 != null && message.hasOwnProperty("rxspeedHistogram_512"))
                object.rxspeedHistogram_512 = message.rxspeedHistogram_512;
            if (message.rxspeedHistogram_1024 != null && message.hasOwnProperty("rxspeedHistogram_1024"))
                object.rxspeedHistogram_1024 = message.rxspeedHistogram_1024;
            if (message.rxspeedHistogramMax != null && message.hasOwnProperty("rxspeedHistogramMax"))
                object.rxspeedHistogramMax = message.rxspeedHistogramMax;
            if (message.rxspeedNtile_5th != null && message.hasOwnProperty("rxspeedNtile_5th"))
                object.rxspeedNtile_5th = message.rxspeedNtile_5th;
            if (message.rxspeedNtile_50th != null && message.hasOwnProperty("rxspeedNtile_50th"))
                object.rxspeedNtile_50th = message.rxspeedNtile_50th;
            if (message.rxspeedNtile_75th != null && message.hasOwnProperty("rxspeedNtile_75th"))
                object.rxspeedNtile_75th = message.rxspeedNtile_75th;
            if (message.rxspeedNtile_95th != null && message.hasOwnProperty("rxspeedNtile_95th"))
                object.rxspeedNtile_95th = message.rxspeedNtile_95th;
            if (message.rxspeedNtile_98th != null && message.hasOwnProperty("rxspeedNtile_98th"))
                object.rxspeedNtile_98th = message.rxspeedNtile_98th;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramLinkLifetimeStats to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramLinkLifetimeStats.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramLinkLifetimeStats
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramLinkLifetimeStats
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramLinkLifetimeStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramLinkLifetimeStats";
        };
    
        return CMsgSteamDatagramLinkLifetimeStats;
    })();
    
    $root.CMsgSteamDatagramConnectionQuality = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionQuality.
         * @exports ICMsgSteamDatagramConnectionQuality
         * @interface ICMsgSteamDatagramConnectionQuality
         * @property {ICMsgSteamDatagramLinkInstantaneousStats|null} [instantaneous] CMsgSteamDatagramConnectionQuality instantaneous
         * @property {ICMsgSteamDatagramLinkLifetimeStats|null} [lifetime] CMsgSteamDatagramConnectionQuality lifetime
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionQuality.
         * @exports CMsgSteamDatagramConnectionQuality
         * @classdesc Represents a CMsgSteamDatagramConnectionQuality.
         * @implements ICMsgSteamDatagramConnectionQuality
         * @constructor
         * @param {ICMsgSteamDatagramConnectionQuality=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionQuality(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionQuality instantaneous.
         * @member {ICMsgSteamDatagramLinkInstantaneousStats|null|undefined} instantaneous
         * @memberof CMsgSteamDatagramConnectionQuality
         * @instance
         */
        CMsgSteamDatagramConnectionQuality.prototype.instantaneous = null;
    
        /**
         * CMsgSteamDatagramConnectionQuality lifetime.
         * @member {ICMsgSteamDatagramLinkLifetimeStats|null|undefined} lifetime
         * @memberof CMsgSteamDatagramConnectionQuality
         * @instance
         */
        CMsgSteamDatagramConnectionQuality.prototype.lifetime = null;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionQuality instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {ICMsgSteamDatagramConnectionQuality=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionQuality} CMsgSteamDatagramConnectionQuality instance
         */
        CMsgSteamDatagramConnectionQuality.create = function create(properties) {
            return new CMsgSteamDatagramConnectionQuality(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionQuality message. Does not implicitly {@link CMsgSteamDatagramConnectionQuality.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {ICMsgSteamDatagramConnectionQuality} message CMsgSteamDatagramConnectionQuality message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionQuality.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.instantaneous != null && Object.hasOwnProperty.call(message, "instantaneous"))
                $root.CMsgSteamDatagramLinkInstantaneousStats.encode(message.instantaneous, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.lifetime != null && Object.hasOwnProperty.call(message, "lifetime"))
                $root.CMsgSteamDatagramLinkLifetimeStats.encode(message.lifetime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionQuality message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionQuality.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {ICMsgSteamDatagramConnectionQuality} message CMsgSteamDatagramConnectionQuality message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionQuality.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionQuality message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionQuality} CMsgSteamDatagramConnectionQuality
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionQuality.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionQuality();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.instantaneous = $root.CMsgSteamDatagramLinkInstantaneousStats.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.lifetime = $root.CMsgSteamDatagramLinkLifetimeStats.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionQuality message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionQuality} CMsgSteamDatagramConnectionQuality
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionQuality.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionQuality message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionQuality.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.instantaneous != null && message.hasOwnProperty("instantaneous")) {
                var error = $root.CMsgSteamDatagramLinkInstantaneousStats.verify(message.instantaneous);
                if (error)
                    return "instantaneous." + error;
            }
            if (message.lifetime != null && message.hasOwnProperty("lifetime")) {
                var error = $root.CMsgSteamDatagramLinkLifetimeStats.verify(message.lifetime);
                if (error)
                    return "lifetime." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionQuality message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionQuality} CMsgSteamDatagramConnectionQuality
         */
        CMsgSteamDatagramConnectionQuality.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionQuality)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionQuality();
            if (object.instantaneous != null) {
                if (typeof object.instantaneous !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionQuality.instantaneous: object expected");
                message.instantaneous = $root.CMsgSteamDatagramLinkInstantaneousStats.fromObject(object.instantaneous);
            }
            if (object.lifetime != null) {
                if (typeof object.lifetime !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionQuality.lifetime: object expected");
                message.lifetime = $root.CMsgSteamDatagramLinkLifetimeStats.fromObject(object.lifetime);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionQuality message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {CMsgSteamDatagramConnectionQuality} message CMsgSteamDatagramConnectionQuality
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionQuality.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.instantaneous = null;
                object.lifetime = null;
            }
            if (message.instantaneous != null && message.hasOwnProperty("instantaneous"))
                object.instantaneous = $root.CMsgSteamDatagramLinkInstantaneousStats.toObject(message.instantaneous, options);
            if (message.lifetime != null && message.hasOwnProperty("lifetime"))
                object.lifetime = $root.CMsgSteamDatagramLinkLifetimeStats.toObject(message.lifetime, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionQuality to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionQuality
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionQuality.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramConnectionQuality
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramConnectionQuality
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramConnectionQuality.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramConnectionQuality";
        };
    
        return CMsgSteamDatagramConnectionQuality;
    })();
    
    $root.CMsgICECandidate = (function() {
    
        /**
         * Properties of a CMsgICECandidate.
         * @exports ICMsgICECandidate
         * @interface ICMsgICECandidate
         * @property {string|null} [candidate] CMsgICECandidate candidate
         */
    
        /**
         * Constructs a new CMsgICECandidate.
         * @exports CMsgICECandidate
         * @classdesc Represents a CMsgICECandidate.
         * @implements ICMsgICECandidate
         * @constructor
         * @param {ICMsgICECandidate=} [properties] Properties to set
         */
        function CMsgICECandidate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgICECandidate candidate.
         * @member {string} candidate
         * @memberof CMsgICECandidate
         * @instance
         */
        CMsgICECandidate.prototype.candidate = "";
    
        /**
         * Creates a new CMsgICECandidate instance using the specified properties.
         * @function create
         * @memberof CMsgICECandidate
         * @static
         * @param {ICMsgICECandidate=} [properties] Properties to set
         * @returns {CMsgICECandidate} CMsgICECandidate instance
         */
        CMsgICECandidate.create = function create(properties) {
            return new CMsgICECandidate(properties);
        };
    
        /**
         * Encodes the specified CMsgICECandidate message. Does not implicitly {@link CMsgICECandidate.verify|verify} messages.
         * @function encode
         * @memberof CMsgICECandidate
         * @static
         * @param {ICMsgICECandidate} message CMsgICECandidate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgICECandidate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.candidate != null && Object.hasOwnProperty.call(message, "candidate"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.candidate);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgICECandidate message, length delimited. Does not implicitly {@link CMsgICECandidate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgICECandidate
         * @static
         * @param {ICMsgICECandidate} message CMsgICECandidate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgICECandidate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgICECandidate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgICECandidate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgICECandidate} CMsgICECandidate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgICECandidate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgICECandidate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3: {
                        message.candidate = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgICECandidate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgICECandidate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgICECandidate} CMsgICECandidate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgICECandidate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgICECandidate message.
         * @function verify
         * @memberof CMsgICECandidate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgICECandidate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.candidate != null && message.hasOwnProperty("candidate"))
                if (!$util.isString(message.candidate))
                    return "candidate: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgICECandidate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgICECandidate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgICECandidate} CMsgICECandidate
         */
        CMsgICECandidate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgICECandidate)
                return object;
            var message = new $root.CMsgICECandidate();
            if (object.candidate != null)
                message.candidate = String(object.candidate);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgICECandidate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgICECandidate
         * @static
         * @param {CMsgICECandidate} message CMsgICECandidate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgICECandidate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.candidate = "";
            if (message.candidate != null && message.hasOwnProperty("candidate"))
                object.candidate = message.candidate;
            return object;
        };
    
        /**
         * Converts this CMsgICECandidate to JSON.
         * @function toJSON
         * @memberof CMsgICECandidate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgICECandidate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgICECandidate
         * @function getTypeUrl
         * @memberof CMsgICECandidate
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgICECandidate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgICECandidate";
        };
    
        return CMsgICECandidate;
    })();
    
    $root.CMsgICERendezvous = (function() {
    
        /**
         * Properties of a CMsgICERendezvous.
         * @exports ICMsgICERendezvous
         * @interface ICMsgICERendezvous
         * @property {CMsgICERendezvous.IAuth|null} [auth] CMsgICERendezvous auth
         * @property {ICMsgICECandidate|null} [addCandidate] CMsgICERendezvous addCandidate
         */
    
        /**
         * Constructs a new CMsgICERendezvous.
         * @exports CMsgICERendezvous
         * @classdesc Represents a CMsgICERendezvous.
         * @implements ICMsgICERendezvous
         * @constructor
         * @param {ICMsgICERendezvous=} [properties] Properties to set
         */
        function CMsgICERendezvous(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgICERendezvous auth.
         * @member {CMsgICERendezvous.IAuth|null|undefined} auth
         * @memberof CMsgICERendezvous
         * @instance
         */
        CMsgICERendezvous.prototype.auth = null;
    
        /**
         * CMsgICERendezvous addCandidate.
         * @member {ICMsgICECandidate|null|undefined} addCandidate
         * @memberof CMsgICERendezvous
         * @instance
         */
        CMsgICERendezvous.prototype.addCandidate = null;
    
        /**
         * Creates a new CMsgICERendezvous instance using the specified properties.
         * @function create
         * @memberof CMsgICERendezvous
         * @static
         * @param {ICMsgICERendezvous=} [properties] Properties to set
         * @returns {CMsgICERendezvous} CMsgICERendezvous instance
         */
        CMsgICERendezvous.create = function create(properties) {
            return new CMsgICERendezvous(properties);
        };
    
        /**
         * Encodes the specified CMsgICERendezvous message. Does not implicitly {@link CMsgICERendezvous.verify|verify} messages.
         * @function encode
         * @memberof CMsgICERendezvous
         * @static
         * @param {ICMsgICERendezvous} message CMsgICERendezvous message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgICERendezvous.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.addCandidate != null && Object.hasOwnProperty.call(message, "addCandidate"))
                $root.CMsgICECandidate.encode(message.addCandidate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.auth != null && Object.hasOwnProperty.call(message, "auth"))
                $root.CMsgICERendezvous.Auth.encode(message.auth, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgICERendezvous message, length delimited. Does not implicitly {@link CMsgICERendezvous.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgICERendezvous
         * @static
         * @param {ICMsgICERendezvous} message CMsgICERendezvous message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgICERendezvous.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgICERendezvous message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgICERendezvous
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgICERendezvous} CMsgICERendezvous
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgICERendezvous.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgICERendezvous();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2: {
                        message.auth = $root.CMsgICERendezvous.Auth.decode(reader, reader.uint32());
                        break;
                    }
                case 1: {
                        message.addCandidate = $root.CMsgICECandidate.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgICERendezvous message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgICERendezvous
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgICERendezvous} CMsgICERendezvous
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgICERendezvous.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgICERendezvous message.
         * @function verify
         * @memberof CMsgICERendezvous
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgICERendezvous.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.auth != null && message.hasOwnProperty("auth")) {
                var error = $root.CMsgICERendezvous.Auth.verify(message.auth);
                if (error)
                    return "auth." + error;
            }
            if (message.addCandidate != null && message.hasOwnProperty("addCandidate")) {
                var error = $root.CMsgICECandidate.verify(message.addCandidate);
                if (error)
                    return "addCandidate." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgICERendezvous message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgICERendezvous
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgICERendezvous} CMsgICERendezvous
         */
        CMsgICERendezvous.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgICERendezvous)
                return object;
            var message = new $root.CMsgICERendezvous();
            if (object.auth != null) {
                if (typeof object.auth !== "object")
                    throw TypeError(".CMsgICERendezvous.auth: object expected");
                message.auth = $root.CMsgICERendezvous.Auth.fromObject(object.auth);
            }
            if (object.addCandidate != null) {
                if (typeof object.addCandidate !== "object")
                    throw TypeError(".CMsgICERendezvous.addCandidate: object expected");
                message.addCandidate = $root.CMsgICECandidate.fromObject(object.addCandidate);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgICERendezvous message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgICERendezvous
         * @static
         * @param {CMsgICERendezvous} message CMsgICERendezvous
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgICERendezvous.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.addCandidate = null;
                object.auth = null;
            }
            if (message.addCandidate != null && message.hasOwnProperty("addCandidate"))
                object.addCandidate = $root.CMsgICECandidate.toObject(message.addCandidate, options);
            if (message.auth != null && message.hasOwnProperty("auth"))
                object.auth = $root.CMsgICERendezvous.Auth.toObject(message.auth, options);
            return object;
        };
    
        /**
         * Converts this CMsgICERendezvous to JSON.
         * @function toJSON
         * @memberof CMsgICERendezvous
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgICERendezvous.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgICERendezvous
         * @function getTypeUrl
         * @memberof CMsgICERendezvous
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgICERendezvous.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgICERendezvous";
        };
    
        CMsgICERendezvous.Auth = (function() {
    
            /**
             * Properties of an Auth.
             * @memberof CMsgICERendezvous
             * @interface IAuth
             * @property {string|null} [pwdFrag] Auth pwdFrag
             */
    
            /**
             * Constructs a new Auth.
             * @memberof CMsgICERendezvous
             * @classdesc Represents an Auth.
             * @implements IAuth
             * @constructor
             * @param {CMsgICERendezvous.IAuth=} [properties] Properties to set
             */
            function Auth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Auth pwdFrag.
             * @member {string} pwdFrag
             * @memberof CMsgICERendezvous.Auth
             * @instance
             */
            Auth.prototype.pwdFrag = "";
    
            /**
             * Creates a new Auth instance using the specified properties.
             * @function create
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {CMsgICERendezvous.IAuth=} [properties] Properties to set
             * @returns {CMsgICERendezvous.Auth} Auth instance
             */
            Auth.create = function create(properties) {
                return new Auth(properties);
            };
    
            /**
             * Encodes the specified Auth message. Does not implicitly {@link CMsgICERendezvous.Auth.verify|verify} messages.
             * @function encode
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {CMsgICERendezvous.IAuth} message Auth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Auth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pwdFrag != null && Object.hasOwnProperty.call(message, "pwdFrag"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.pwdFrag);
                return writer;
            };
    
            /**
             * Encodes the specified Auth message, length delimited. Does not implicitly {@link CMsgICERendezvous.Auth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {CMsgICERendezvous.IAuth} message Auth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Auth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an Auth message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgICERendezvous.Auth} Auth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Auth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgICERendezvous.Auth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.pwdFrag = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an Auth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgICERendezvous.Auth} Auth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Auth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an Auth message.
             * @function verify
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Auth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pwdFrag != null && message.hasOwnProperty("pwdFrag"))
                    if (!$util.isString(message.pwdFrag))
                        return "pwdFrag: string expected";
                return null;
            };
    
            /**
             * Creates an Auth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgICERendezvous.Auth} Auth
             */
            Auth.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgICERendezvous.Auth)
                    return object;
                var message = new $root.CMsgICERendezvous.Auth();
                if (object.pwdFrag != null)
                    message.pwdFrag = String(object.pwdFrag);
                return message;
            };
    
            /**
             * Creates a plain object from an Auth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {CMsgICERendezvous.Auth} message Auth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Auth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.pwdFrag = "";
                if (message.pwdFrag != null && message.hasOwnProperty("pwdFrag"))
                    object.pwdFrag = message.pwdFrag;
                return object;
            };
    
            /**
             * Converts this Auth to JSON.
             * @function toJSON
             * @memberof CMsgICERendezvous.Auth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Auth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for Auth
             * @function getTypeUrl
             * @memberof CMsgICERendezvous.Auth
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Auth.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgICERendezvous.Auth";
            };
    
            return Auth;
        })();
    
        return CMsgICERendezvous;
    })();
    
    $root.CMsgSteamNetworkingP2PRendezvous = (function() {
    
        /**
         * Properties of a CMsgSteamNetworkingP2PRendezvous.
         * @exports ICMsgSteamNetworkingP2PRendezvous
         * @interface ICMsgSteamNetworkingP2PRendezvous
         * @property {string|null} [fromIdentity] CMsgSteamNetworkingP2PRendezvous fromIdentity
         * @property {number|null} [fromConnectionId] CMsgSteamNetworkingP2PRendezvous fromConnectionId
         * @property {string|null} [toIdentity] CMsgSteamNetworkingP2PRendezvous toIdentity
         * @property {number|null} [toConnectionId] CMsgSteamNetworkingP2PRendezvous toConnectionId
         * @property {Uint8Array|null} [sdrRoutes] CMsgSteamNetworkingP2PRendezvous sdrRoutes
         * @property {number|null} [ackPeerRoutesRevision] CMsgSteamNetworkingP2PRendezvous ackPeerRoutesRevision
         * @property {boolean|null} [iceEnabled] CMsgSteamNetworkingP2PRendezvous iceEnabled
         * @property {Uint8Array|null} [hostedServerTicket] CMsgSteamNetworkingP2PRendezvous hostedServerTicket
         * @property {CMsgSteamNetworkingP2PRendezvous.IConnectRequest|null} [connectRequest] CMsgSteamNetworkingP2PRendezvous connectRequest
         * @property {CMsgSteamNetworkingP2PRendezvous.IConnectOK|null} [connectOk] CMsgSteamNetworkingP2PRendezvous connectOk
         * @property {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed|null} [connectionClosed] CMsgSteamNetworkingP2PRendezvous connectionClosed
         * @property {number|null} [ackReliableMsg] CMsgSteamNetworkingP2PRendezvous ackReliableMsg
         * @property {number|null} [firstReliableMsg] CMsgSteamNetworkingP2PRendezvous firstReliableMsg
         * @property {Array.<CMsgSteamNetworkingP2PRendezvous.IReliableMessage>|null} [reliableMessages] CMsgSteamNetworkingP2PRendezvous reliableMessages
         * @property {Array.<CMsgSteamNetworkingP2PRendezvous.IApplicationMessage>|null} [applicationMessages] CMsgSteamNetworkingP2PRendezvous applicationMessages
         */
    
        /**
         * Constructs a new CMsgSteamNetworkingP2PRendezvous.
         * @exports CMsgSteamNetworkingP2PRendezvous
         * @classdesc Represents a CMsgSteamNetworkingP2PRendezvous.
         * @implements ICMsgSteamNetworkingP2PRendezvous
         * @constructor
         * @param {ICMsgSteamNetworkingP2PRendezvous=} [properties] Properties to set
         */
        function CMsgSteamNetworkingP2PRendezvous(properties) {
            this.reliableMessages = [];
            this.applicationMessages = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamNetworkingP2PRendezvous fromIdentity.
         * @member {string} fromIdentity
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.fromIdentity = "";
    
        /**
         * CMsgSteamNetworkingP2PRendezvous fromConnectionId.
         * @member {number} fromConnectionId
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.fromConnectionId = 0;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous toIdentity.
         * @member {string} toIdentity
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.toIdentity = "";
    
        /**
         * CMsgSteamNetworkingP2PRendezvous toConnectionId.
         * @member {number} toConnectionId
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.toConnectionId = 0;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous sdrRoutes.
         * @member {Uint8Array} sdrRoutes
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.sdrRoutes = $util.newBuffer([]);
    
        /**
         * CMsgSteamNetworkingP2PRendezvous ackPeerRoutesRevision.
         * @member {number} ackPeerRoutesRevision
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.ackPeerRoutesRevision = 0;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous iceEnabled.
         * @member {boolean} iceEnabled
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.iceEnabled = false;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous hostedServerTicket.
         * @member {Uint8Array} hostedServerTicket
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.hostedServerTicket = $util.newBuffer([]);
    
        /**
         * CMsgSteamNetworkingP2PRendezvous connectRequest.
         * @member {CMsgSteamNetworkingP2PRendezvous.IConnectRequest|null|undefined} connectRequest
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.connectRequest = null;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous connectOk.
         * @member {CMsgSteamNetworkingP2PRendezvous.IConnectOK|null|undefined} connectOk
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.connectOk = null;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous connectionClosed.
         * @member {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed|null|undefined} connectionClosed
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.connectionClosed = null;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous ackReliableMsg.
         * @member {number} ackReliableMsg
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.ackReliableMsg = 0;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous firstReliableMsg.
         * @member {number} firstReliableMsg
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.firstReliableMsg = 0;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous reliableMessages.
         * @member {Array.<CMsgSteamNetworkingP2PRendezvous.IReliableMessage>} reliableMessages
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.reliableMessages = $util.emptyArray;
    
        /**
         * CMsgSteamNetworkingP2PRendezvous applicationMessages.
         * @member {Array.<CMsgSteamNetworkingP2PRendezvous.IApplicationMessage>} applicationMessages
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.applicationMessages = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamNetworkingP2PRendezvous instance using the specified properties.
         * @function create
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {ICMsgSteamNetworkingP2PRendezvous=} [properties] Properties to set
         * @returns {CMsgSteamNetworkingP2PRendezvous} CMsgSteamNetworkingP2PRendezvous instance
         */
        CMsgSteamNetworkingP2PRendezvous.create = function create(properties) {
            return new CMsgSteamNetworkingP2PRendezvous(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingP2PRendezvous message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {ICMsgSteamNetworkingP2PRendezvous} message CMsgSteamNetworkingP2PRendezvous message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingP2PRendezvous.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.toConnectionId != null && Object.hasOwnProperty.call(message, "toConnectionId"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.toConnectionId);
            if (message.sdrRoutes != null && Object.hasOwnProperty.call(message, "sdrRoutes"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.sdrRoutes);
            if (message.ackPeerRoutesRevision != null && Object.hasOwnProperty.call(message, "ackPeerRoutesRevision"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ackPeerRoutesRevision);
            if (message.connectRequest != null && Object.hasOwnProperty.call(message, "connectRequest"))
                $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.encode(message.connectRequest, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.connectOk != null && Object.hasOwnProperty.call(message, "connectOk"))
                $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK.encode(message.connectOk, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.connectionClosed != null && Object.hasOwnProperty.call(message, "connectionClosed"))
                $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.encode(message.connectionClosed, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.iceEnabled != null && Object.hasOwnProperty.call(message, "iceEnabled"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.iceEnabled);
            if (message.fromIdentity != null && Object.hasOwnProperty.call(message, "fromIdentity"))
                writer.uint32(/* id 8, wireType 2 =*/66).string(message.fromIdentity);
            if (message.fromConnectionId != null && Object.hasOwnProperty.call(message, "fromConnectionId"))
                writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.fromConnectionId);
            if (message.toIdentity != null && Object.hasOwnProperty.call(message, "toIdentity"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.toIdentity);
            if (message.ackReliableMsg != null && Object.hasOwnProperty.call(message, "ackReliableMsg"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.ackReliableMsg);
            if (message.firstReliableMsg != null && Object.hasOwnProperty.call(message, "firstReliableMsg"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.firstReliableMsg);
            if (message.reliableMessages != null && message.reliableMessages.length)
                for (var i = 0; i < message.reliableMessages.length; ++i)
                    $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.encode(message.reliableMessages[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.hostedServerTicket != null && Object.hasOwnProperty.call(message, "hostedServerTicket"))
                writer.uint32(/* id 14, wireType 2 =*/114).bytes(message.hostedServerTicket);
            if (message.applicationMessages != null && message.applicationMessages.length)
                for (var i = 0; i < message.applicationMessages.length; ++i)
                    $root.CMsgSteamNetworkingP2PRendezvous.ApplicationMessage.encode(message.applicationMessages[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingP2PRendezvous message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {ICMsgSteamNetworkingP2PRendezvous} message CMsgSteamNetworkingP2PRendezvous message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingP2PRendezvous.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamNetworkingP2PRendezvous message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamNetworkingP2PRendezvous} CMsgSteamNetworkingP2PRendezvous
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingP2PRendezvous.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 8: {
                        message.fromIdentity = reader.string();
                        break;
                    }
                case 9: {
                        message.fromConnectionId = reader.fixed32();
                        break;
                    }
                case 10: {
                        message.toIdentity = reader.string();
                        break;
                    }
                case 1: {
                        message.toConnectionId = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.sdrRoutes = reader.bytes();
                        break;
                    }
                case 3: {
                        message.ackPeerRoutesRevision = reader.uint32();
                        break;
                    }
                case 7: {
                        message.iceEnabled = reader.bool();
                        break;
                    }
                case 14: {
                        message.hostedServerTicket = reader.bytes();
                        break;
                    }
                case 4: {
                        message.connectRequest = $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.decode(reader, reader.uint32());
                        break;
                    }
                case 5: {
                        message.connectOk = $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK.decode(reader, reader.uint32());
                        break;
                    }
                case 6: {
                        message.connectionClosed = $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.decode(reader, reader.uint32());
                        break;
                    }
                case 11: {
                        message.ackReliableMsg = reader.uint32();
                        break;
                    }
                case 12: {
                        message.firstReliableMsg = reader.uint32();
                        break;
                    }
                case 13: {
                        if (!(message.reliableMessages && message.reliableMessages.length))
                            message.reliableMessages = [];
                        message.reliableMessages.push($root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.decode(reader, reader.uint32()));
                        break;
                    }
                case 15: {
                        if (!(message.applicationMessages && message.applicationMessages.length))
                            message.applicationMessages = [];
                        message.applicationMessages.push($root.CMsgSteamNetworkingP2PRendezvous.ApplicationMessage.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamNetworkingP2PRendezvous message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamNetworkingP2PRendezvous} CMsgSteamNetworkingP2PRendezvous
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingP2PRendezvous.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamNetworkingP2PRendezvous message.
         * @function verify
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamNetworkingP2PRendezvous.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.fromIdentity != null && message.hasOwnProperty("fromIdentity"))
                if (!$util.isString(message.fromIdentity))
                    return "fromIdentity: string expected";
            if (message.fromConnectionId != null && message.hasOwnProperty("fromConnectionId"))
                if (!$util.isInteger(message.fromConnectionId))
                    return "fromConnectionId: integer expected";
            if (message.toIdentity != null && message.hasOwnProperty("toIdentity"))
                if (!$util.isString(message.toIdentity))
                    return "toIdentity: string expected";
            if (message.toConnectionId != null && message.hasOwnProperty("toConnectionId"))
                if (!$util.isInteger(message.toConnectionId))
                    return "toConnectionId: integer expected";
            if (message.sdrRoutes != null && message.hasOwnProperty("sdrRoutes"))
                if (!(message.sdrRoutes && typeof message.sdrRoutes.length === "number" || $util.isString(message.sdrRoutes)))
                    return "sdrRoutes: buffer expected";
            if (message.ackPeerRoutesRevision != null && message.hasOwnProperty("ackPeerRoutesRevision"))
                if (!$util.isInteger(message.ackPeerRoutesRevision))
                    return "ackPeerRoutesRevision: integer expected";
            if (message.iceEnabled != null && message.hasOwnProperty("iceEnabled"))
                if (typeof message.iceEnabled !== "boolean")
                    return "iceEnabled: boolean expected";
            if (message.hostedServerTicket != null && message.hasOwnProperty("hostedServerTicket"))
                if (!(message.hostedServerTicket && typeof message.hostedServerTicket.length === "number" || $util.isString(message.hostedServerTicket)))
                    return "hostedServerTicket: buffer expected";
            if (message.connectRequest != null && message.hasOwnProperty("connectRequest")) {
                var error = $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.verify(message.connectRequest);
                if (error)
                    return "connectRequest." + error;
            }
            if (message.connectOk != null && message.hasOwnProperty("connectOk")) {
                var error = $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK.verify(message.connectOk);
                if (error)
                    return "connectOk." + error;
            }
            if (message.connectionClosed != null && message.hasOwnProperty("connectionClosed")) {
                var error = $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.verify(message.connectionClosed);
                if (error)
                    return "connectionClosed." + error;
            }
            if (message.ackReliableMsg != null && message.hasOwnProperty("ackReliableMsg"))
                if (!$util.isInteger(message.ackReliableMsg))
                    return "ackReliableMsg: integer expected";
            if (message.firstReliableMsg != null && message.hasOwnProperty("firstReliableMsg"))
                if (!$util.isInteger(message.firstReliableMsg))
                    return "firstReliableMsg: integer expected";
            if (message.reliableMessages != null && message.hasOwnProperty("reliableMessages")) {
                if (!Array.isArray(message.reliableMessages))
                    return "reliableMessages: array expected";
                for (var i = 0; i < message.reliableMessages.length; ++i) {
                    var error = $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.verify(message.reliableMessages[i]);
                    if (error)
                        return "reliableMessages." + error;
                }
            }
            if (message.applicationMessages != null && message.hasOwnProperty("applicationMessages")) {
                if (!Array.isArray(message.applicationMessages))
                    return "applicationMessages: array expected";
                for (var i = 0; i < message.applicationMessages.length; ++i) {
                    var error = $root.CMsgSteamNetworkingP2PRendezvous.ApplicationMessage.verify(message.applicationMessages[i]);
                    if (error)
                        return "applicationMessages." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamNetworkingP2PRendezvous message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamNetworkingP2PRendezvous} CMsgSteamNetworkingP2PRendezvous
         */
        CMsgSteamNetworkingP2PRendezvous.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous)
                return object;
            var message = new $root.CMsgSteamNetworkingP2PRendezvous();
            if (object.fromIdentity != null)
                message.fromIdentity = String(object.fromIdentity);
            if (object.fromConnectionId != null)
                message.fromConnectionId = object.fromConnectionId >>> 0;
            if (object.toIdentity != null)
                message.toIdentity = String(object.toIdentity);
            if (object.toConnectionId != null)
                message.toConnectionId = object.toConnectionId >>> 0;
            if (object.sdrRoutes != null)
                if (typeof object.sdrRoutes === "string")
                    $util.base64.decode(object.sdrRoutes, message.sdrRoutes = $util.newBuffer($util.base64.length(object.sdrRoutes)), 0);
                else if (object.sdrRoutes.length >= 0)
                    message.sdrRoutes = object.sdrRoutes;
            if (object.ackPeerRoutesRevision != null)
                message.ackPeerRoutesRevision = object.ackPeerRoutesRevision >>> 0;
            if (object.iceEnabled != null)
                message.iceEnabled = Boolean(object.iceEnabled);
            if (object.hostedServerTicket != null)
                if (typeof object.hostedServerTicket === "string")
                    $util.base64.decode(object.hostedServerTicket, message.hostedServerTicket = $util.newBuffer($util.base64.length(object.hostedServerTicket)), 0);
                else if (object.hostedServerTicket.length >= 0)
                    message.hostedServerTicket = object.hostedServerTicket;
            if (object.connectRequest != null) {
                if (typeof object.connectRequest !== "object")
                    throw TypeError(".CMsgSteamNetworkingP2PRendezvous.connectRequest: object expected");
                message.connectRequest = $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.fromObject(object.connectRequest);
            }
            if (object.connectOk != null) {
                if (typeof object.connectOk !== "object")
                    throw TypeError(".CMsgSteamNetworkingP2PRendezvous.connectOk: object expected");
                message.connectOk = $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK.fromObject(object.connectOk);
            }
            if (object.connectionClosed != null) {
                if (typeof object.connectionClosed !== "object")
                    throw TypeError(".CMsgSteamNetworkingP2PRendezvous.connectionClosed: object expected");
                message.connectionClosed = $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.fromObject(object.connectionClosed);
            }
            if (object.ackReliableMsg != null)
                message.ackReliableMsg = object.ackReliableMsg >>> 0;
            if (object.firstReliableMsg != null)
                message.firstReliableMsg = object.firstReliableMsg >>> 0;
            if (object.reliableMessages) {
                if (!Array.isArray(object.reliableMessages))
                    throw TypeError(".CMsgSteamNetworkingP2PRendezvous.reliableMessages: array expected");
                message.reliableMessages = [];
                for (var i = 0; i < object.reliableMessages.length; ++i) {
                    if (typeof object.reliableMessages[i] !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.reliableMessages: object expected");
                    message.reliableMessages[i] = $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.fromObject(object.reliableMessages[i]);
                }
            }
            if (object.applicationMessages) {
                if (!Array.isArray(object.applicationMessages))
                    throw TypeError(".CMsgSteamNetworkingP2PRendezvous.applicationMessages: array expected");
                message.applicationMessages = [];
                for (var i = 0; i < object.applicationMessages.length; ++i) {
                    if (typeof object.applicationMessages[i] !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.applicationMessages: object expected");
                    message.applicationMessages[i] = $root.CMsgSteamNetworkingP2PRendezvous.ApplicationMessage.fromObject(object.applicationMessages[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamNetworkingP2PRendezvous message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {CMsgSteamNetworkingP2PRendezvous} message CMsgSteamNetworkingP2PRendezvous
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamNetworkingP2PRendezvous.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.reliableMessages = [];
                object.applicationMessages = [];
            }
            if (options.defaults) {
                object.toConnectionId = 0;
                if (options.bytes === String)
                    object.sdrRoutes = "";
                else {
                    object.sdrRoutes = [];
                    if (options.bytes !== Array)
                        object.sdrRoutes = $util.newBuffer(object.sdrRoutes);
                }
                object.ackPeerRoutesRevision = 0;
                object.connectRequest = null;
                object.connectOk = null;
                object.connectionClosed = null;
                object.iceEnabled = false;
                object.fromIdentity = "";
                object.fromConnectionId = 0;
                object.toIdentity = "";
                object.ackReliableMsg = 0;
                object.firstReliableMsg = 0;
                if (options.bytes === String)
                    object.hostedServerTicket = "";
                else {
                    object.hostedServerTicket = [];
                    if (options.bytes !== Array)
                        object.hostedServerTicket = $util.newBuffer(object.hostedServerTicket);
                }
            }
            if (message.toConnectionId != null && message.hasOwnProperty("toConnectionId"))
                object.toConnectionId = message.toConnectionId;
            if (message.sdrRoutes != null && message.hasOwnProperty("sdrRoutes"))
                object.sdrRoutes = options.bytes === String ? $util.base64.encode(message.sdrRoutes, 0, message.sdrRoutes.length) : options.bytes === Array ? Array.prototype.slice.call(message.sdrRoutes) : message.sdrRoutes;
            if (message.ackPeerRoutesRevision != null && message.hasOwnProperty("ackPeerRoutesRevision"))
                object.ackPeerRoutesRevision = message.ackPeerRoutesRevision;
            if (message.connectRequest != null && message.hasOwnProperty("connectRequest"))
                object.connectRequest = $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest.toObject(message.connectRequest, options);
            if (message.connectOk != null && message.hasOwnProperty("connectOk"))
                object.connectOk = $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK.toObject(message.connectOk, options);
            if (message.connectionClosed != null && message.hasOwnProperty("connectionClosed"))
                object.connectionClosed = $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.toObject(message.connectionClosed, options);
            if (message.iceEnabled != null && message.hasOwnProperty("iceEnabled"))
                object.iceEnabled = message.iceEnabled;
            if (message.fromIdentity != null && message.hasOwnProperty("fromIdentity"))
                object.fromIdentity = message.fromIdentity;
            if (message.fromConnectionId != null && message.hasOwnProperty("fromConnectionId"))
                object.fromConnectionId = message.fromConnectionId;
            if (message.toIdentity != null && message.hasOwnProperty("toIdentity"))
                object.toIdentity = message.toIdentity;
            if (message.ackReliableMsg != null && message.hasOwnProperty("ackReliableMsg"))
                object.ackReliableMsg = message.ackReliableMsg;
            if (message.firstReliableMsg != null && message.hasOwnProperty("firstReliableMsg"))
                object.firstReliableMsg = message.firstReliableMsg;
            if (message.reliableMessages && message.reliableMessages.length) {
                object.reliableMessages = [];
                for (var j = 0; j < message.reliableMessages.length; ++j)
                    object.reliableMessages[j] = $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage.toObject(message.reliableMessages[j], options);
            }
            if (message.hostedServerTicket != null && message.hasOwnProperty("hostedServerTicket"))
                object.hostedServerTicket = options.bytes === String ? $util.base64.encode(message.hostedServerTicket, 0, message.hostedServerTicket.length) : options.bytes === Array ? Array.prototype.slice.call(message.hostedServerTicket) : message.hostedServerTicket;
            if (message.applicationMessages && message.applicationMessages.length) {
                object.applicationMessages = [];
                for (var j = 0; j < message.applicationMessages.length; ++j)
                    object.applicationMessages[j] = $root.CMsgSteamNetworkingP2PRendezvous.ApplicationMessage.toObject(message.applicationMessages[j], options);
            }
            return object;
        };
    
        /**
         * Converts this CMsgSteamNetworkingP2PRendezvous to JSON.
         * @function toJSON
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamNetworkingP2PRendezvous.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamNetworkingP2PRendezvous
         * @function getTypeUrl
         * @memberof CMsgSteamNetworkingP2PRendezvous
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamNetworkingP2PRendezvous.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamNetworkingP2PRendezvous";
        };
    
        CMsgSteamNetworkingP2PRendezvous.ConnectRequest = (function() {
    
            /**
             * Properties of a ConnectRequest.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @interface IConnectRequest
             * @property {ICMsgSteamDatagramSessionCryptInfoSigned|null} [crypt] ConnectRequest crypt
             * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] ConnectRequest cert
             * @property {number|null} [toVirtualPort] ConnectRequest toVirtualPort
             * @property {number|null} [fromVirtualPort] ConnectRequest fromVirtualPort
             * @property {string|null} [fromFakeip] ConnectRequest fromFakeip
             */
    
            /**
             * Constructs a new ConnectRequest.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @classdesc Represents a ConnectRequest.
             * @implements IConnectRequest
             * @constructor
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectRequest=} [properties] Properties to set
             */
            function ConnectRequest(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ConnectRequest crypt.
             * @member {ICMsgSteamDatagramSessionCryptInfoSigned|null|undefined} crypt
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             */
            ConnectRequest.prototype.crypt = null;
    
            /**
             * ConnectRequest cert.
             * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             */
            ConnectRequest.prototype.cert = null;
    
            /**
             * ConnectRequest toVirtualPort.
             * @member {number} toVirtualPort
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             */
            ConnectRequest.prototype.toVirtualPort = 0;
    
            /**
             * ConnectRequest fromVirtualPort.
             * @member {number} fromVirtualPort
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             */
            ConnectRequest.prototype.fromVirtualPort = 0;
    
            /**
             * ConnectRequest fromFakeip.
             * @member {string} fromFakeip
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             */
            ConnectRequest.prototype.fromFakeip = "";
    
            /**
             * Creates a new ConnectRequest instance using the specified properties.
             * @function create
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectRequest=} [properties] Properties to set
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectRequest} ConnectRequest instance
             */
            ConnectRequest.create = function create(properties) {
                return new ConnectRequest(properties);
            };
    
            /**
             * Encodes the specified ConnectRequest message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectRequest.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectRequest} message ConnectRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.crypt != null && Object.hasOwnProperty.call(message, "crypt"))
                    $root.CMsgSteamDatagramSessionCryptInfoSigned.encode(message.crypt, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                    $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.toVirtualPort != null && Object.hasOwnProperty.call(message, "toVirtualPort"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.toVirtualPort);
                if (message.fromVirtualPort != null && Object.hasOwnProperty.call(message, "fromVirtualPort"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.fromVirtualPort);
                if (message.fromFakeip != null && Object.hasOwnProperty.call(message, "fromFakeip"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.fromFakeip);
                return writer;
            };
    
            /**
             * Encodes the specified ConnectRequest message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectRequest} message ConnectRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ConnectRequest message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectRequest} ConnectRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 6: {
                            message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.toVirtualPort = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.fromVirtualPort = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.fromFakeip = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ConnectRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectRequest} ConnectRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ConnectRequest message.
             * @function verify
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConnectRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.crypt != null && message.hasOwnProperty("crypt")) {
                    var error = $root.CMsgSteamDatagramSessionCryptInfoSigned.verify(message.crypt);
                    if (error)
                        return "crypt." + error;
                }
                if (message.cert != null && message.hasOwnProperty("cert")) {
                    var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                    if (error)
                        return "cert." + error;
                }
                if (message.toVirtualPort != null && message.hasOwnProperty("toVirtualPort"))
                    if (!$util.isInteger(message.toVirtualPort))
                        return "toVirtualPort: integer expected";
                if (message.fromVirtualPort != null && message.hasOwnProperty("fromVirtualPort"))
                    if (!$util.isInteger(message.fromVirtualPort))
                        return "fromVirtualPort: integer expected";
                if (message.fromFakeip != null && message.hasOwnProperty("fromFakeip"))
                    if (!$util.isString(message.fromFakeip))
                        return "fromFakeip: string expected";
                return null;
            };
    
            /**
             * Creates a ConnectRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectRequest} ConnectRequest
             */
            ConnectRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest)
                    return object;
                var message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectRequest();
                if (object.crypt != null) {
                    if (typeof object.crypt !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.ConnectRequest.crypt: object expected");
                    message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.fromObject(object.crypt);
                }
                if (object.cert != null) {
                    if (typeof object.cert !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.ConnectRequest.cert: object expected");
                    message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
                }
                if (object.toVirtualPort != null)
                    message.toVirtualPort = object.toVirtualPort >>> 0;
                if (object.fromVirtualPort != null)
                    message.fromVirtualPort = object.fromVirtualPort >>> 0;
                if (object.fromFakeip != null)
                    message.fromFakeip = String(object.fromFakeip);
                return message;
            };
    
            /**
             * Creates a plain object from a ConnectRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.ConnectRequest} message ConnectRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConnectRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.crypt = null;
                    object.cert = null;
                    object.toVirtualPort = 0;
                    object.fromVirtualPort = 0;
                    object.fromFakeip = "";
                }
                if (message.crypt != null && message.hasOwnProperty("crypt"))
                    object.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.toObject(message.crypt, options);
                if (message.cert != null && message.hasOwnProperty("cert"))
                    object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
                if (message.toVirtualPort != null && message.hasOwnProperty("toVirtualPort"))
                    object.toVirtualPort = message.toVirtualPort;
                if (message.fromVirtualPort != null && message.hasOwnProperty("fromVirtualPort"))
                    object.fromVirtualPort = message.fromVirtualPort;
                if (message.fromFakeip != null && message.hasOwnProperty("fromFakeip"))
                    object.fromFakeip = message.fromFakeip;
                return object;
            };
    
            /**
             * Converts this ConnectRequest to JSON.
             * @function toJSON
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConnectRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for ConnectRequest
             * @function getTypeUrl
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ConnectRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamNetworkingP2PRendezvous.ConnectRequest";
            };
    
            return ConnectRequest;
        })();
    
        CMsgSteamNetworkingP2PRendezvous.ConnectOK = (function() {
    
            /**
             * Properties of a ConnectOK.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @interface IConnectOK
             * @property {ICMsgSteamDatagramSessionCryptInfoSigned|null} [crypt] ConnectOK crypt
             * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] ConnectOK cert
             */
    
            /**
             * Constructs a new ConnectOK.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @classdesc Represents a ConnectOK.
             * @implements IConnectOK
             * @constructor
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectOK=} [properties] Properties to set
             */
            function ConnectOK(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ConnectOK crypt.
             * @member {ICMsgSteamDatagramSessionCryptInfoSigned|null|undefined} crypt
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @instance
             */
            ConnectOK.prototype.crypt = null;
    
            /**
             * ConnectOK cert.
             * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @instance
             */
            ConnectOK.prototype.cert = null;
    
            /**
             * Creates a new ConnectOK instance using the specified properties.
             * @function create
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectOK=} [properties] Properties to set
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectOK} ConnectOK instance
             */
            ConnectOK.create = function create(properties) {
                return new ConnectOK(properties);
            };
    
            /**
             * Encodes the specified ConnectOK message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectOK.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectOK} message ConnectOK message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectOK.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.crypt != null && Object.hasOwnProperty.call(message, "crypt"))
                    $root.CMsgSteamDatagramSessionCryptInfoSigned.encode(message.crypt, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                    $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ConnectOK message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectOK.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectOK} message ConnectOK message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectOK.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ConnectOK message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectOK} ConnectOK
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectOK.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 5: {
                            message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ConnectOK message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectOK} ConnectOK
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectOK.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ConnectOK message.
             * @function verify
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConnectOK.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.crypt != null && message.hasOwnProperty("crypt")) {
                    var error = $root.CMsgSteamDatagramSessionCryptInfoSigned.verify(message.crypt);
                    if (error)
                        return "crypt." + error;
                }
                if (message.cert != null && message.hasOwnProperty("cert")) {
                    var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                    if (error)
                        return "cert." + error;
                }
                return null;
            };
    
            /**
             * Creates a ConnectOK message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectOK} ConnectOK
             */
            ConnectOK.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK)
                    return object;
                var message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectOK();
                if (object.crypt != null) {
                    if (typeof object.crypt !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.ConnectOK.crypt: object expected");
                    message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.fromObject(object.crypt);
                }
                if (object.cert != null) {
                    if (typeof object.cert !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.ConnectOK.cert: object expected");
                    message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ConnectOK message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.ConnectOK} message ConnectOK
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConnectOK.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.crypt = null;
                    object.cert = null;
                }
                if (message.crypt != null && message.hasOwnProperty("crypt"))
                    object.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.toObject(message.crypt, options);
                if (message.cert != null && message.hasOwnProperty("cert"))
                    object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
                return object;
            };
    
            /**
             * Converts this ConnectOK to JSON.
             * @function toJSON
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConnectOK.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for ConnectOK
             * @function getTypeUrl
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectOK
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ConnectOK.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamNetworkingP2PRendezvous.ConnectOK";
            };
    
            return ConnectOK;
        })();
    
        CMsgSteamNetworkingP2PRendezvous.ConnectionClosed = (function() {
    
            /**
             * Properties of a ConnectionClosed.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @interface IConnectionClosed
             * @property {string|null} [debug] ConnectionClosed debug
             * @property {number|null} [reasonCode] ConnectionClosed reasonCode
             */
    
            /**
             * Constructs a new ConnectionClosed.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @classdesc Represents a ConnectionClosed.
             * @implements IConnectionClosed
             * @constructor
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed=} [properties] Properties to set
             */
            function ConnectionClosed(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ConnectionClosed debug.
             * @member {string} debug
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @instance
             */
            ConnectionClosed.prototype.debug = "";
    
            /**
             * ConnectionClosed reasonCode.
             * @member {number} reasonCode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @instance
             */
            ConnectionClosed.prototype.reasonCode = 0;
    
            /**
             * Creates a new ConnectionClosed instance using the specified properties.
             * @function create
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed=} [properties] Properties to set
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectionClosed} ConnectionClosed instance
             */
            ConnectionClosed.create = function create(properties) {
                return new ConnectionClosed(properties);
            };
    
            /**
             * Encodes the specified ConnectionClosed message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed} message ConnectionClosed message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectionClosed.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.debug);
                if (message.reasonCode != null && Object.hasOwnProperty.call(message, "reasonCode"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.reasonCode);
                return writer;
            };
    
            /**
             * Encodes the specified ConnectionClosed message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ConnectionClosed.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IConnectionClosed} message ConnectionClosed message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectionClosed.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ConnectionClosed message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectionClosed} ConnectionClosed
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectionClosed.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 5: {
                            message.debug = reader.string();
                            break;
                        }
                    case 6: {
                            message.reasonCode = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ConnectionClosed message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectionClosed} ConnectionClosed
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectionClosed.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ConnectionClosed message.
             * @function verify
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConnectionClosed.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.debug != null && message.hasOwnProperty("debug"))
                    if (!$util.isString(message.debug))
                        return "debug: string expected";
                if (message.reasonCode != null && message.hasOwnProperty("reasonCode"))
                    if (!$util.isInteger(message.reasonCode))
                        return "reasonCode: integer expected";
                return null;
            };
    
            /**
             * Creates a ConnectionClosed message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamNetworkingP2PRendezvous.ConnectionClosed} ConnectionClosed
             */
            ConnectionClosed.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed)
                    return object;
                var message = new $root.CMsgSteamNetworkingP2PRendezvous.ConnectionClosed();
                if (object.debug != null)
                    message.debug = String(object.debug);
                if (object.reasonCode != null)
                    message.reasonCode = object.reasonCode >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a ConnectionClosed message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.ConnectionClosed} message ConnectionClosed
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConnectionClosed.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.debug = "";
                    object.reasonCode = 0;
                }
                if (message.debug != null && message.hasOwnProperty("debug"))
                    object.debug = message.debug;
                if (message.reasonCode != null && message.hasOwnProperty("reasonCode"))
                    object.reasonCode = message.reasonCode;
                return object;
            };
    
            /**
             * Converts this ConnectionClosed to JSON.
             * @function toJSON
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConnectionClosed.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for ConnectionClosed
             * @function getTypeUrl
             * @memberof CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ConnectionClosed.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamNetworkingP2PRendezvous.ConnectionClosed";
            };
    
            return ConnectionClosed;
        })();
    
        CMsgSteamNetworkingP2PRendezvous.ReliableMessage = (function() {
    
            /**
             * Properties of a ReliableMessage.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @interface IReliableMessage
             * @property {ICMsgICERendezvous|null} [ice] ReliableMessage ice
             */
    
            /**
             * Constructs a new ReliableMessage.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @classdesc Represents a ReliableMessage.
             * @implements IReliableMessage
             * @constructor
             * @param {CMsgSteamNetworkingP2PRendezvous.IReliableMessage=} [properties] Properties to set
             */
            function ReliableMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ReliableMessage ice.
             * @member {ICMsgICERendezvous|null|undefined} ice
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @instance
             */
            ReliableMessage.prototype.ice = null;
    
            /**
             * Creates a new ReliableMessage instance using the specified properties.
             * @function create
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IReliableMessage=} [properties] Properties to set
             * @returns {CMsgSteamNetworkingP2PRendezvous.ReliableMessage} ReliableMessage instance
             */
            ReliableMessage.create = function create(properties) {
                return new ReliableMessage(properties);
            };
    
            /**
             * Encodes the specified ReliableMessage message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ReliableMessage.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IReliableMessage} message ReliableMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReliableMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ice != null && Object.hasOwnProperty.call(message, "ice"))
                    $root.CMsgICERendezvous.encode(message.ice, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };
    
            /**
             * Encodes the specified ReliableMessage message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ReliableMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IReliableMessage} message ReliableMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReliableMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ReliableMessage message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamNetworkingP2PRendezvous.ReliableMessage} ReliableMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReliableMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ice = $root.CMsgICERendezvous.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ReliableMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamNetworkingP2PRendezvous.ReliableMessage} ReliableMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReliableMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ReliableMessage message.
             * @function verify
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReliableMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ice != null && message.hasOwnProperty("ice")) {
                    var error = $root.CMsgICERendezvous.verify(message.ice);
                    if (error)
                        return "ice." + error;
                }
                return null;
            };
    
            /**
             * Creates a ReliableMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamNetworkingP2PRendezvous.ReliableMessage} ReliableMessage
             */
            ReliableMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage)
                    return object;
                var message = new $root.CMsgSteamNetworkingP2PRendezvous.ReliableMessage();
                if (object.ice != null) {
                    if (typeof object.ice !== "object")
                        throw TypeError(".CMsgSteamNetworkingP2PRendezvous.ReliableMessage.ice: object expected");
                    message.ice = $root.CMsgICERendezvous.fromObject(object.ice);
                }
                return message;
            };
    
            /**
             * Creates a plain object from a ReliableMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.ReliableMessage} message ReliableMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReliableMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ice = null;
                if (message.ice != null && message.hasOwnProperty("ice"))
                    object.ice = $root.CMsgICERendezvous.toObject(message.ice, options);
                return object;
            };
    
            /**
             * Converts this ReliableMessage to JSON.
             * @function toJSON
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReliableMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for ReliableMessage
             * @function getTypeUrl
             * @memberof CMsgSteamNetworkingP2PRendezvous.ReliableMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ReliableMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamNetworkingP2PRendezvous.ReliableMessage";
            };
    
            return ReliableMessage;
        })();
    
        CMsgSteamNetworkingP2PRendezvous.ApplicationMessage = (function() {
    
            /**
             * Properties of an ApplicationMessage.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @interface IApplicationMessage
             * @property {Uint8Array|null} [data] ApplicationMessage data
             * @property {number|Long|null} [msgNum] ApplicationMessage msgNum
             * @property {number|null} [flags] ApplicationMessage flags
             * @property {number|null} [laneIdx] ApplicationMessage laneIdx
             */
    
            /**
             * Constructs a new ApplicationMessage.
             * @memberof CMsgSteamNetworkingP2PRendezvous
             * @classdesc Represents an ApplicationMessage.
             * @implements IApplicationMessage
             * @constructor
             * @param {CMsgSteamNetworkingP2PRendezvous.IApplicationMessage=} [properties] Properties to set
             */
            function ApplicationMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ApplicationMessage data.
             * @member {Uint8Array} data
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @instance
             */
            ApplicationMessage.prototype.data = $util.newBuffer([]);
    
            /**
             * ApplicationMessage msgNum.
             * @member {number|Long} msgNum
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @instance
             */
            ApplicationMessage.prototype.msgNum = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
            /**
             * ApplicationMessage flags.
             * @member {number} flags
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @instance
             */
            ApplicationMessage.prototype.flags = 0;
    
            /**
             * ApplicationMessage laneIdx.
             * @member {number} laneIdx
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @instance
             */
            ApplicationMessage.prototype.laneIdx = 0;
    
            /**
             * Creates a new ApplicationMessage instance using the specified properties.
             * @function create
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IApplicationMessage=} [properties] Properties to set
             * @returns {CMsgSteamNetworkingP2PRendezvous.ApplicationMessage} ApplicationMessage instance
             */
            ApplicationMessage.create = function create(properties) {
                return new ApplicationMessage(properties);
            };
    
            /**
             * Encodes the specified ApplicationMessage message. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ApplicationMessage.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IApplicationMessage} message ApplicationMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApplicationMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                if (message.msgNum != null && Object.hasOwnProperty.call(message, "msgNum"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.msgNum);
                if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.flags);
                if (message.laneIdx != null && Object.hasOwnProperty.call(message, "laneIdx"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.laneIdx);
                return writer;
            };
    
            /**
             * Encodes the specified ApplicationMessage message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PRendezvous.ApplicationMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.IApplicationMessage} message ApplicationMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApplicationMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an ApplicationMessage message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamNetworkingP2PRendezvous.ApplicationMessage} ApplicationMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApplicationMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PRendezvous.ApplicationMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.data = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.msgNum = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.flags = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.laneIdx = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an ApplicationMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamNetworkingP2PRendezvous.ApplicationMessage} ApplicationMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApplicationMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an ApplicationMessage message.
             * @function verify
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ApplicationMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.msgNum != null && message.hasOwnProperty("msgNum"))
                    if (!$util.isInteger(message.msgNum) && !(message.msgNum && $util.isInteger(message.msgNum.low) && $util.isInteger(message.msgNum.high)))
                        return "msgNum: integer|Long expected";
                if (message.flags != null && message.hasOwnProperty("flags"))
                    if (!$util.isInteger(message.flags))
                        return "flags: integer expected";
                if (message.laneIdx != null && message.hasOwnProperty("laneIdx"))
                    if (!$util.isInteger(message.laneIdx))
                        return "laneIdx: integer expected";
                return null;
            };
    
            /**
             * Creates an ApplicationMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamNetworkingP2PRendezvous.ApplicationMessage} ApplicationMessage
             */
            ApplicationMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamNetworkingP2PRendezvous.ApplicationMessage)
                    return object;
                var message = new $root.CMsgSteamNetworkingP2PRendezvous.ApplicationMessage();
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length >= 0)
                        message.data = object.data;
                if (object.msgNum != null)
                    if ($util.Long)
                        (message.msgNum = $util.Long.fromValue(object.msgNum)).unsigned = true;
                    else if (typeof object.msgNum === "string")
                        message.msgNum = parseInt(object.msgNum, 10);
                    else if (typeof object.msgNum === "number")
                        message.msgNum = object.msgNum;
                    else if (typeof object.msgNum === "object")
                        message.msgNum = new $util.LongBits(object.msgNum.low >>> 0, object.msgNum.high >>> 0).toNumber(true);
                if (object.flags != null)
                    message.flags = object.flags >>> 0;
                if (object.laneIdx != null)
                    message.laneIdx = object.laneIdx >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from an ApplicationMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @static
             * @param {CMsgSteamNetworkingP2PRendezvous.ApplicationMessage} message ApplicationMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ApplicationMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.msgNum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.msgNum = options.longs === String ? "0" : 0;
                    object.flags = 0;
                    object.laneIdx = 0;
                }
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.msgNum != null && message.hasOwnProperty("msgNum"))
                    if (typeof message.msgNum === "number")
                        object.msgNum = options.longs === String ? String(message.msgNum) : message.msgNum;
                    else
                        object.msgNum = options.longs === String ? $util.Long.prototype.toString.call(message.msgNum) : options.longs === Number ? new $util.LongBits(message.msgNum.low >>> 0, message.msgNum.high >>> 0).toNumber(true) : message.msgNum;
                if (message.flags != null && message.hasOwnProperty("flags"))
                    object.flags = message.flags;
                if (message.laneIdx != null && message.hasOwnProperty("laneIdx"))
                    object.laneIdx = message.laneIdx;
                return object;
            };
    
            /**
             * Converts this ApplicationMessage to JSON.
             * @function toJSON
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ApplicationMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for ApplicationMessage
             * @function getTypeUrl
             * @memberof CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ApplicationMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamNetworkingP2PRendezvous.ApplicationMessage";
            };
    
            return ApplicationMessage;
        })();
    
        return CMsgSteamNetworkingP2PRendezvous;
    })();
    
    $root.CMsgSteamNetworkingICESessionSummary = (function() {
    
        /**
         * Properties of a CMsgSteamNetworkingICESessionSummary.
         * @exports ICMsgSteamNetworkingICESessionSummary
         * @interface ICMsgSteamNetworkingICESessionSummary
         * @property {number|null} [failureReasonCode] CMsgSteamNetworkingICESessionSummary failureReasonCode
         * @property {number|null} [localCandidateTypes] CMsgSteamNetworkingICESessionSummary localCandidateTypes
         * @property {number|null} [remoteCandidateTypes] CMsgSteamNetworkingICESessionSummary remoteCandidateTypes
         * @property {number|null} [initialRouteKind] CMsgSteamNetworkingICESessionSummary initialRouteKind
         * @property {number|null} [initialPing] CMsgSteamNetworkingICESessionSummary initialPing
         * @property {number|null} [initialScore] CMsgSteamNetworkingICESessionSummary initialScore
         * @property {number|null} [negotiationMs] CMsgSteamNetworkingICESessionSummary negotiationMs
         * @property {number|null} [bestRouteKind] CMsgSteamNetworkingICESessionSummary bestRouteKind
         * @property {number|null} [bestPing] CMsgSteamNetworkingICESessionSummary bestPing
         * @property {number|null} [bestScore] CMsgSteamNetworkingICESessionSummary bestScore
         * @property {number|null} [bestTime] CMsgSteamNetworkingICESessionSummary bestTime
         * @property {number|null} [selectedSeconds] CMsgSteamNetworkingICESessionSummary selectedSeconds
         * @property {number|null} [userSettings] CMsgSteamNetworkingICESessionSummary userSettings
         * @property {number|null} [iceEnableVar] CMsgSteamNetworkingICESessionSummary iceEnableVar
         * @property {number|null} [localCandidateTypesAllowed] CMsgSteamNetworkingICESessionSummary localCandidateTypesAllowed
         */
    
        /**
         * Constructs a new CMsgSteamNetworkingICESessionSummary.
         * @exports CMsgSteamNetworkingICESessionSummary
         * @classdesc Represents a CMsgSteamNetworkingICESessionSummary.
         * @implements ICMsgSteamNetworkingICESessionSummary
         * @constructor
         * @param {ICMsgSteamNetworkingICESessionSummary=} [properties] Properties to set
         */
        function CMsgSteamNetworkingICESessionSummary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamNetworkingICESessionSummary failureReasonCode.
         * @member {number} failureReasonCode
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.failureReasonCode = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary localCandidateTypes.
         * @member {number} localCandidateTypes
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.localCandidateTypes = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary remoteCandidateTypes.
         * @member {number} remoteCandidateTypes
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.remoteCandidateTypes = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary initialRouteKind.
         * @member {number} initialRouteKind
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.initialRouteKind = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary initialPing.
         * @member {number} initialPing
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.initialPing = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary initialScore.
         * @member {number} initialScore
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.initialScore = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary negotiationMs.
         * @member {number} negotiationMs
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.negotiationMs = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary bestRouteKind.
         * @member {number} bestRouteKind
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.bestRouteKind = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary bestPing.
         * @member {number} bestPing
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.bestPing = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary bestScore.
         * @member {number} bestScore
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.bestScore = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary bestTime.
         * @member {number} bestTime
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.bestTime = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary selectedSeconds.
         * @member {number} selectedSeconds
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.selectedSeconds = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary userSettings.
         * @member {number} userSettings
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.userSettings = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary iceEnableVar.
         * @member {number} iceEnableVar
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.iceEnableVar = 0;
    
        /**
         * CMsgSteamNetworkingICESessionSummary localCandidateTypesAllowed.
         * @member {number} localCandidateTypesAllowed
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         */
        CMsgSteamNetworkingICESessionSummary.prototype.localCandidateTypesAllowed = 0;
    
        /**
         * Creates a new CMsgSteamNetworkingICESessionSummary instance using the specified properties.
         * @function create
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {ICMsgSteamNetworkingICESessionSummary=} [properties] Properties to set
         * @returns {CMsgSteamNetworkingICESessionSummary} CMsgSteamNetworkingICESessionSummary instance
         */
        CMsgSteamNetworkingICESessionSummary.create = function create(properties) {
            return new CMsgSteamNetworkingICESessionSummary(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingICESessionSummary message. Does not implicitly {@link CMsgSteamNetworkingICESessionSummary.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {ICMsgSteamNetworkingICESessionSummary} message CMsgSteamNetworkingICESessionSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingICESessionSummary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.localCandidateTypes != null && Object.hasOwnProperty.call(message, "localCandidateTypes"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.localCandidateTypes);
            if (message.remoteCandidateTypes != null && Object.hasOwnProperty.call(message, "remoteCandidateTypes"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.remoteCandidateTypes);
            if (message.initialRouteKind != null && Object.hasOwnProperty.call(message, "initialRouteKind"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.initialRouteKind);
            if (message.initialPing != null && Object.hasOwnProperty.call(message, "initialPing"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.initialPing);
            if (message.negotiationMs != null && Object.hasOwnProperty.call(message, "negotiationMs"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.negotiationMs);
            if (message.initialScore != null && Object.hasOwnProperty.call(message, "initialScore"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.initialScore);
            if (message.failureReasonCode != null && Object.hasOwnProperty.call(message, "failureReasonCode"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.failureReasonCode);
            if (message.selectedSeconds != null && Object.hasOwnProperty.call(message, "selectedSeconds"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.selectedSeconds);
            if (message.userSettings != null && Object.hasOwnProperty.call(message, "userSettings"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.userSettings);
            if (message.iceEnableVar != null && Object.hasOwnProperty.call(message, "iceEnableVar"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.iceEnableVar);
            if (message.localCandidateTypesAllowed != null && Object.hasOwnProperty.call(message, "localCandidateTypesAllowed"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.localCandidateTypesAllowed);
            if (message.bestRouteKind != null && Object.hasOwnProperty.call(message, "bestRouteKind"))
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.bestRouteKind);
            if (message.bestPing != null && Object.hasOwnProperty.call(message, "bestPing"))
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.bestPing);
            if (message.bestScore != null && Object.hasOwnProperty.call(message, "bestScore"))
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.bestScore);
            if (message.bestTime != null && Object.hasOwnProperty.call(message, "bestTime"))
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.bestTime);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingICESessionSummary message, length delimited. Does not implicitly {@link CMsgSteamNetworkingICESessionSummary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {ICMsgSteamNetworkingICESessionSummary} message CMsgSteamNetworkingICESessionSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingICESessionSummary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamNetworkingICESessionSummary message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamNetworkingICESessionSummary} CMsgSteamNetworkingICESessionSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingICESessionSummary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingICESessionSummary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 7: {
                        message.failureReasonCode = reader.uint32();
                        break;
                    }
                case 1: {
                        message.localCandidateTypes = reader.uint32();
                        break;
                    }
                case 2: {
                        message.remoteCandidateTypes = reader.uint32();
                        break;
                    }
                case 3: {
                        message.initialRouteKind = reader.uint32();
                        break;
                    }
                case 4: {
                        message.initialPing = reader.uint32();
                        break;
                    }
                case 6: {
                        message.initialScore = reader.uint32();
                        break;
                    }
                case 5: {
                        message.negotiationMs = reader.uint32();
                        break;
                    }
                case 16: {
                        message.bestRouteKind = reader.uint32();
                        break;
                    }
                case 17: {
                        message.bestPing = reader.uint32();
                        break;
                    }
                case 18: {
                        message.bestScore = reader.uint32();
                        break;
                    }
                case 19: {
                        message.bestTime = reader.uint32();
                        break;
                    }
                case 12: {
                        message.selectedSeconds = reader.uint32();
                        break;
                    }
                case 13: {
                        message.userSettings = reader.uint32();
                        break;
                    }
                case 14: {
                        message.iceEnableVar = reader.uint32();
                        break;
                    }
                case 15: {
                        message.localCandidateTypesAllowed = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamNetworkingICESessionSummary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamNetworkingICESessionSummary} CMsgSteamNetworkingICESessionSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingICESessionSummary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamNetworkingICESessionSummary message.
         * @function verify
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamNetworkingICESessionSummary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.failureReasonCode != null && message.hasOwnProperty("failureReasonCode"))
                if (!$util.isInteger(message.failureReasonCode))
                    return "failureReasonCode: integer expected";
            if (message.localCandidateTypes != null && message.hasOwnProperty("localCandidateTypes"))
                if (!$util.isInteger(message.localCandidateTypes))
                    return "localCandidateTypes: integer expected";
            if (message.remoteCandidateTypes != null && message.hasOwnProperty("remoteCandidateTypes"))
                if (!$util.isInteger(message.remoteCandidateTypes))
                    return "remoteCandidateTypes: integer expected";
            if (message.initialRouteKind != null && message.hasOwnProperty("initialRouteKind"))
                if (!$util.isInteger(message.initialRouteKind))
                    return "initialRouteKind: integer expected";
            if (message.initialPing != null && message.hasOwnProperty("initialPing"))
                if (!$util.isInteger(message.initialPing))
                    return "initialPing: integer expected";
            if (message.initialScore != null && message.hasOwnProperty("initialScore"))
                if (!$util.isInteger(message.initialScore))
                    return "initialScore: integer expected";
            if (message.negotiationMs != null && message.hasOwnProperty("negotiationMs"))
                if (!$util.isInteger(message.negotiationMs))
                    return "negotiationMs: integer expected";
            if (message.bestRouteKind != null && message.hasOwnProperty("bestRouteKind"))
                if (!$util.isInteger(message.bestRouteKind))
                    return "bestRouteKind: integer expected";
            if (message.bestPing != null && message.hasOwnProperty("bestPing"))
                if (!$util.isInteger(message.bestPing))
                    return "bestPing: integer expected";
            if (message.bestScore != null && message.hasOwnProperty("bestScore"))
                if (!$util.isInteger(message.bestScore))
                    return "bestScore: integer expected";
            if (message.bestTime != null && message.hasOwnProperty("bestTime"))
                if (!$util.isInteger(message.bestTime))
                    return "bestTime: integer expected";
            if (message.selectedSeconds != null && message.hasOwnProperty("selectedSeconds"))
                if (!$util.isInteger(message.selectedSeconds))
                    return "selectedSeconds: integer expected";
            if (message.userSettings != null && message.hasOwnProperty("userSettings"))
                if (!$util.isInteger(message.userSettings))
                    return "userSettings: integer expected";
            if (message.iceEnableVar != null && message.hasOwnProperty("iceEnableVar"))
                if (!$util.isInteger(message.iceEnableVar))
                    return "iceEnableVar: integer expected";
            if (message.localCandidateTypesAllowed != null && message.hasOwnProperty("localCandidateTypesAllowed"))
                if (!$util.isInteger(message.localCandidateTypesAllowed))
                    return "localCandidateTypesAllowed: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamNetworkingICESessionSummary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamNetworkingICESessionSummary} CMsgSteamNetworkingICESessionSummary
         */
        CMsgSteamNetworkingICESessionSummary.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamNetworkingICESessionSummary)
                return object;
            var message = new $root.CMsgSteamNetworkingICESessionSummary();
            if (object.failureReasonCode != null)
                message.failureReasonCode = object.failureReasonCode >>> 0;
            if (object.localCandidateTypes != null)
                message.localCandidateTypes = object.localCandidateTypes >>> 0;
            if (object.remoteCandidateTypes != null)
                message.remoteCandidateTypes = object.remoteCandidateTypes >>> 0;
            if (object.initialRouteKind != null)
                message.initialRouteKind = object.initialRouteKind >>> 0;
            if (object.initialPing != null)
                message.initialPing = object.initialPing >>> 0;
            if (object.initialScore != null)
                message.initialScore = object.initialScore >>> 0;
            if (object.negotiationMs != null)
                message.negotiationMs = object.negotiationMs >>> 0;
            if (object.bestRouteKind != null)
                message.bestRouteKind = object.bestRouteKind >>> 0;
            if (object.bestPing != null)
                message.bestPing = object.bestPing >>> 0;
            if (object.bestScore != null)
                message.bestScore = object.bestScore >>> 0;
            if (object.bestTime != null)
                message.bestTime = object.bestTime >>> 0;
            if (object.selectedSeconds != null)
                message.selectedSeconds = object.selectedSeconds >>> 0;
            if (object.userSettings != null)
                message.userSettings = object.userSettings >>> 0;
            if (object.iceEnableVar != null)
                message.iceEnableVar = object.iceEnableVar >>> 0;
            if (object.localCandidateTypesAllowed != null)
                message.localCandidateTypesAllowed = object.localCandidateTypesAllowed >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamNetworkingICESessionSummary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {CMsgSteamNetworkingICESessionSummary} message CMsgSteamNetworkingICESessionSummary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamNetworkingICESessionSummary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.localCandidateTypes = 0;
                object.remoteCandidateTypes = 0;
                object.initialRouteKind = 0;
                object.initialPing = 0;
                object.negotiationMs = 0;
                object.initialScore = 0;
                object.failureReasonCode = 0;
                object.selectedSeconds = 0;
                object.userSettings = 0;
                object.iceEnableVar = 0;
                object.localCandidateTypesAllowed = 0;
                object.bestRouteKind = 0;
                object.bestPing = 0;
                object.bestScore = 0;
                object.bestTime = 0;
            }
            if (message.localCandidateTypes != null && message.hasOwnProperty("localCandidateTypes"))
                object.localCandidateTypes = message.localCandidateTypes;
            if (message.remoteCandidateTypes != null && message.hasOwnProperty("remoteCandidateTypes"))
                object.remoteCandidateTypes = message.remoteCandidateTypes;
            if (message.initialRouteKind != null && message.hasOwnProperty("initialRouteKind"))
                object.initialRouteKind = message.initialRouteKind;
            if (message.initialPing != null && message.hasOwnProperty("initialPing"))
                object.initialPing = message.initialPing;
            if (message.negotiationMs != null && message.hasOwnProperty("negotiationMs"))
                object.negotiationMs = message.negotiationMs;
            if (message.initialScore != null && message.hasOwnProperty("initialScore"))
                object.initialScore = message.initialScore;
            if (message.failureReasonCode != null && message.hasOwnProperty("failureReasonCode"))
                object.failureReasonCode = message.failureReasonCode;
            if (message.selectedSeconds != null && message.hasOwnProperty("selectedSeconds"))
                object.selectedSeconds = message.selectedSeconds;
            if (message.userSettings != null && message.hasOwnProperty("userSettings"))
                object.userSettings = message.userSettings;
            if (message.iceEnableVar != null && message.hasOwnProperty("iceEnableVar"))
                object.iceEnableVar = message.iceEnableVar;
            if (message.localCandidateTypesAllowed != null && message.hasOwnProperty("localCandidateTypesAllowed"))
                object.localCandidateTypesAllowed = message.localCandidateTypesAllowed;
            if (message.bestRouteKind != null && message.hasOwnProperty("bestRouteKind"))
                object.bestRouteKind = message.bestRouteKind;
            if (message.bestPing != null && message.hasOwnProperty("bestPing"))
                object.bestPing = message.bestPing;
            if (message.bestScore != null && message.hasOwnProperty("bestScore"))
                object.bestScore = message.bestScore;
            if (message.bestTime != null && message.hasOwnProperty("bestTime"))
                object.bestTime = message.bestTime;
            return object;
        };
    
        /**
         * Converts this CMsgSteamNetworkingICESessionSummary to JSON.
         * @function toJSON
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamNetworkingICESessionSummary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamNetworkingICESessionSummary
         * @function getTypeUrl
         * @memberof CMsgSteamNetworkingICESessionSummary
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamNetworkingICESessionSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamNetworkingICESessionSummary";
        };
    
        return CMsgSteamNetworkingICESessionSummary;
    })();
    
    $root.CMsgSteamNetworkingIdentityLegacyBinary = (function() {
    
        /**
         * Properties of a CMsgSteamNetworkingIdentityLegacyBinary.
         * @exports ICMsgSteamNetworkingIdentityLegacyBinary
         * @interface ICMsgSteamNetworkingIdentityLegacyBinary
         * @property {number|Long|null} [steamId] CMsgSteamNetworkingIdentityLegacyBinary steamId
         * @property {string|null} [xboxPairwiseId] CMsgSteamNetworkingIdentityLegacyBinary xboxPairwiseId
         * @property {Uint8Array|null} [genericBytes] CMsgSteamNetworkingIdentityLegacyBinary genericBytes
         * @property {string|null} [genericString] CMsgSteamNetworkingIdentityLegacyBinary genericString
         * @property {Uint8Array|null} [ipv6AndPort] CMsgSteamNetworkingIdentityLegacyBinary ipv6AndPort
         */
    
        /**
         * Constructs a new CMsgSteamNetworkingIdentityLegacyBinary.
         * @exports CMsgSteamNetworkingIdentityLegacyBinary
         * @classdesc Represents a CMsgSteamNetworkingIdentityLegacyBinary.
         * @implements ICMsgSteamNetworkingIdentityLegacyBinary
         * @constructor
         * @param {ICMsgSteamNetworkingIdentityLegacyBinary=} [properties] Properties to set
         */
        function CMsgSteamNetworkingIdentityLegacyBinary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamNetworkingIdentityLegacyBinary steamId.
         * @member {number|Long} steamId
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.steamId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamNetworkingIdentityLegacyBinary xboxPairwiseId.
         * @member {string} xboxPairwiseId
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.xboxPairwiseId = "";
    
        /**
         * CMsgSteamNetworkingIdentityLegacyBinary genericBytes.
         * @member {Uint8Array} genericBytes
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.genericBytes = $util.newBuffer([]);
    
        /**
         * CMsgSteamNetworkingIdentityLegacyBinary genericString.
         * @member {string} genericString
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.genericString = "";
    
        /**
         * CMsgSteamNetworkingIdentityLegacyBinary ipv6AndPort.
         * @member {Uint8Array} ipv6AndPort
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.ipv6AndPort = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamNetworkingIdentityLegacyBinary instance using the specified properties.
         * @function create
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {ICMsgSteamNetworkingIdentityLegacyBinary=} [properties] Properties to set
         * @returns {CMsgSteamNetworkingIdentityLegacyBinary} CMsgSteamNetworkingIdentityLegacyBinary instance
         */
        CMsgSteamNetworkingIdentityLegacyBinary.create = function create(properties) {
            return new CMsgSteamNetworkingIdentityLegacyBinary(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingIdentityLegacyBinary message. Does not implicitly {@link CMsgSteamNetworkingIdentityLegacyBinary.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {ICMsgSteamNetworkingIdentityLegacyBinary} message CMsgSteamNetworkingIdentityLegacyBinary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingIdentityLegacyBinary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.genericBytes != null && Object.hasOwnProperty.call(message, "genericBytes"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.genericBytes);
            if (message.genericString != null && Object.hasOwnProperty.call(message, "genericString"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.genericString);
            if (message.ipv6AndPort != null && Object.hasOwnProperty.call(message, "ipv6AndPort"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.ipv6AndPort);
            if (message.steamId != null && Object.hasOwnProperty.call(message, "steamId"))
                writer.uint32(/* id 16, wireType 1 =*/129).fixed64(message.steamId);
            if (message.xboxPairwiseId != null && Object.hasOwnProperty.call(message, "xboxPairwiseId"))
                writer.uint32(/* id 17, wireType 2 =*/138).string(message.xboxPairwiseId);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingIdentityLegacyBinary message, length delimited. Does not implicitly {@link CMsgSteamNetworkingIdentityLegacyBinary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {ICMsgSteamNetworkingIdentityLegacyBinary} message CMsgSteamNetworkingIdentityLegacyBinary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingIdentityLegacyBinary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamNetworkingIdentityLegacyBinary message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamNetworkingIdentityLegacyBinary} CMsgSteamNetworkingIdentityLegacyBinary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingIdentityLegacyBinary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingIdentityLegacyBinary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 16: {
                        message.steamId = reader.fixed64();
                        break;
                    }
                case 17: {
                        message.xboxPairwiseId = reader.string();
                        break;
                    }
                case 2: {
                        message.genericBytes = reader.bytes();
                        break;
                    }
                case 3: {
                        message.genericString = reader.string();
                        break;
                    }
                case 4: {
                        message.ipv6AndPort = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamNetworkingIdentityLegacyBinary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamNetworkingIdentityLegacyBinary} CMsgSteamNetworkingIdentityLegacyBinary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingIdentityLegacyBinary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamNetworkingIdentityLegacyBinary message.
         * @function verify
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamNetworkingIdentityLegacyBinary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.steamId != null && message.hasOwnProperty("steamId"))
                if (!$util.isInteger(message.steamId) && !(message.steamId && $util.isInteger(message.steamId.low) && $util.isInteger(message.steamId.high)))
                    return "steamId: integer|Long expected";
            if (message.xboxPairwiseId != null && message.hasOwnProperty("xboxPairwiseId"))
                if (!$util.isString(message.xboxPairwiseId))
                    return "xboxPairwiseId: string expected";
            if (message.genericBytes != null && message.hasOwnProperty("genericBytes"))
                if (!(message.genericBytes && typeof message.genericBytes.length === "number" || $util.isString(message.genericBytes)))
                    return "genericBytes: buffer expected";
            if (message.genericString != null && message.hasOwnProperty("genericString"))
                if (!$util.isString(message.genericString))
                    return "genericString: string expected";
            if (message.ipv6AndPort != null && message.hasOwnProperty("ipv6AndPort"))
                if (!(message.ipv6AndPort && typeof message.ipv6AndPort.length === "number" || $util.isString(message.ipv6AndPort)))
                    return "ipv6AndPort: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamNetworkingIdentityLegacyBinary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamNetworkingIdentityLegacyBinary} CMsgSteamNetworkingIdentityLegacyBinary
         */
        CMsgSteamNetworkingIdentityLegacyBinary.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamNetworkingIdentityLegacyBinary)
                return object;
            var message = new $root.CMsgSteamNetworkingIdentityLegacyBinary();
            if (object.steamId != null)
                if ($util.Long)
                    (message.steamId = $util.Long.fromValue(object.steamId)).unsigned = false;
                else if (typeof object.steamId === "string")
                    message.steamId = parseInt(object.steamId, 10);
                else if (typeof object.steamId === "number")
                    message.steamId = object.steamId;
                else if (typeof object.steamId === "object")
                    message.steamId = new $util.LongBits(object.steamId.low >>> 0, object.steamId.high >>> 0).toNumber();
            if (object.xboxPairwiseId != null)
                message.xboxPairwiseId = String(object.xboxPairwiseId);
            if (object.genericBytes != null)
                if (typeof object.genericBytes === "string")
                    $util.base64.decode(object.genericBytes, message.genericBytes = $util.newBuffer($util.base64.length(object.genericBytes)), 0);
                else if (object.genericBytes.length >= 0)
                    message.genericBytes = object.genericBytes;
            if (object.genericString != null)
                message.genericString = String(object.genericString);
            if (object.ipv6AndPort != null)
                if (typeof object.ipv6AndPort === "string")
                    $util.base64.decode(object.ipv6AndPort, message.ipv6AndPort = $util.newBuffer($util.base64.length(object.ipv6AndPort)), 0);
                else if (object.ipv6AndPort.length >= 0)
                    message.ipv6AndPort = object.ipv6AndPort;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamNetworkingIdentityLegacyBinary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {CMsgSteamNetworkingIdentityLegacyBinary} message CMsgSteamNetworkingIdentityLegacyBinary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamNetworkingIdentityLegacyBinary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.genericBytes = "";
                else {
                    object.genericBytes = [];
                    if (options.bytes !== Array)
                        object.genericBytes = $util.newBuffer(object.genericBytes);
                }
                object.genericString = "";
                if (options.bytes === String)
                    object.ipv6AndPort = "";
                else {
                    object.ipv6AndPort = [];
                    if (options.bytes !== Array)
                        object.ipv6AndPort = $util.newBuffer(object.ipv6AndPort);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.steamId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.steamId = options.longs === String ? "0" : 0;
                object.xboxPairwiseId = "";
            }
            if (message.genericBytes != null && message.hasOwnProperty("genericBytes"))
                object.genericBytes = options.bytes === String ? $util.base64.encode(message.genericBytes, 0, message.genericBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.genericBytes) : message.genericBytes;
            if (message.genericString != null && message.hasOwnProperty("genericString"))
                object.genericString = message.genericString;
            if (message.ipv6AndPort != null && message.hasOwnProperty("ipv6AndPort"))
                object.ipv6AndPort = options.bytes === String ? $util.base64.encode(message.ipv6AndPort, 0, message.ipv6AndPort.length) : options.bytes === Array ? Array.prototype.slice.call(message.ipv6AndPort) : message.ipv6AndPort;
            if (message.steamId != null && message.hasOwnProperty("steamId"))
                if (typeof message.steamId === "number")
                    object.steamId = options.longs === String ? String(message.steamId) : message.steamId;
                else
                    object.steamId = options.longs === String ? $util.Long.prototype.toString.call(message.steamId) : options.longs === Number ? new $util.LongBits(message.steamId.low >>> 0, message.steamId.high >>> 0).toNumber() : message.steamId;
            if (message.xboxPairwiseId != null && message.hasOwnProperty("xboxPairwiseId"))
                object.xboxPairwiseId = message.xboxPairwiseId;
            return object;
        };
    
        /**
         * Converts this CMsgSteamNetworkingIdentityLegacyBinary to JSON.
         * @function toJSON
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamNetworkingIdentityLegacyBinary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamNetworkingIdentityLegacyBinary
         * @function getTypeUrl
         * @memberof CMsgSteamNetworkingIdentityLegacyBinary
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamNetworkingIdentityLegacyBinary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamNetworkingIdentityLegacyBinary";
        };
    
        return CMsgSteamNetworkingIdentityLegacyBinary;
    })();
    
    $root.CMsgSteamDatagramCertificate = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramCertificate.
         * @exports ICMsgSteamDatagramCertificate
         * @interface ICMsgSteamDatagramCertificate
         * @property {CMsgSteamDatagramCertificate.EKeyType|null} [keyType] CMsgSteamDatagramCertificate keyType
         * @property {Uint8Array|null} [keyData] CMsgSteamDatagramCertificate keyData
         * @property {number|Long|null} [legacySteamId] CMsgSteamDatagramCertificate legacySteamId
         * @property {ICMsgSteamNetworkingIdentityLegacyBinary|null} [legacyIdentityBinary] CMsgSteamDatagramCertificate legacyIdentityBinary
         * @property {string|null} [identityString] CMsgSteamDatagramCertificate identityString
         * @property {Array.<number>|null} [gameserverDatacenterIds] CMsgSteamDatagramCertificate gameserverDatacenterIds
         * @property {number|null} [timeCreated] CMsgSteamDatagramCertificate timeCreated
         * @property {number|null} [timeExpiry] CMsgSteamDatagramCertificate timeExpiry
         * @property {Array.<number>|null} [appIds] CMsgSteamDatagramCertificate appIds
         * @property {Array.<string>|null} [ipAddresses] CMsgSteamDatagramCertificate ipAddresses
         */
    
        /**
         * Constructs a new CMsgSteamDatagramCertificate.
         * @exports CMsgSteamDatagramCertificate
         * @classdesc Represents a CMsgSteamDatagramCertificate.
         * @implements ICMsgSteamDatagramCertificate
         * @constructor
         * @param {ICMsgSteamDatagramCertificate=} [properties] Properties to set
         */
        function CMsgSteamDatagramCertificate(properties) {
            this.gameserverDatacenterIds = [];
            this.appIds = [];
            this.ipAddresses = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramCertificate keyType.
         * @member {CMsgSteamDatagramCertificate.EKeyType} keyType
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.keyType = 0;
    
        /**
         * CMsgSteamDatagramCertificate keyData.
         * @member {Uint8Array} keyData
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.keyData = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramCertificate legacySteamId.
         * @member {number|Long} legacySteamId
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.legacySteamId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramCertificate legacyIdentityBinary.
         * @member {ICMsgSteamNetworkingIdentityLegacyBinary|null|undefined} legacyIdentityBinary
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.legacyIdentityBinary = null;
    
        /**
         * CMsgSteamDatagramCertificate identityString.
         * @member {string} identityString
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.identityString = "";
    
        /**
         * CMsgSteamDatagramCertificate gameserverDatacenterIds.
         * @member {Array.<number>} gameserverDatacenterIds
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.gameserverDatacenterIds = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramCertificate timeCreated.
         * @member {number} timeCreated
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.timeCreated = 0;
    
        /**
         * CMsgSteamDatagramCertificate timeExpiry.
         * @member {number} timeExpiry
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.timeExpiry = 0;
    
        /**
         * CMsgSteamDatagramCertificate appIds.
         * @member {Array.<number>} appIds
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.appIds = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramCertificate ipAddresses.
         * @member {Array.<string>} ipAddresses
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         */
        CMsgSteamDatagramCertificate.prototype.ipAddresses = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamDatagramCertificate instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {ICMsgSteamDatagramCertificate=} [properties] Properties to set
         * @returns {CMsgSteamDatagramCertificate} CMsgSteamDatagramCertificate instance
         */
        CMsgSteamDatagramCertificate.create = function create(properties) {
            return new CMsgSteamDatagramCertificate(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificate message. Does not implicitly {@link CMsgSteamDatagramCertificate.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {ICMsgSteamDatagramCertificate} message CMsgSteamDatagramCertificate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.keyType != null && Object.hasOwnProperty.call(message, "keyType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);
            if (message.keyData != null && Object.hasOwnProperty.call(message, "keyData"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.keyData);
            if (message.legacySteamId != null && Object.hasOwnProperty.call(message, "legacySteamId"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.legacySteamId);
            if (message.gameserverDatacenterIds != null && message.gameserverDatacenterIds.length)
                for (var i = 0; i < message.gameserverDatacenterIds.length; ++i)
                    writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.gameserverDatacenterIds[i]);
            if (message.timeCreated != null && Object.hasOwnProperty.call(message, "timeCreated"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.timeCreated);
            if (message.timeExpiry != null && Object.hasOwnProperty.call(message, "timeExpiry"))
                writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.timeExpiry);
            if (message.appIds != null && message.appIds.length)
                for (var i = 0; i < message.appIds.length; ++i)
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.appIds[i]);
            if (message.legacyIdentityBinary != null && Object.hasOwnProperty.call(message, "legacyIdentityBinary"))
                $root.CMsgSteamNetworkingIdentityLegacyBinary.encode(message.legacyIdentityBinary, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.identityString != null && Object.hasOwnProperty.call(message, "identityString"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.identityString);
            if (message.ipAddresses != null && message.ipAddresses.length)
                for (var i = 0; i < message.ipAddresses.length; ++i)
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.ipAddresses[i]);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificate message, length delimited. Does not implicitly {@link CMsgSteamDatagramCertificate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {ICMsgSteamDatagramCertificate} message CMsgSteamDatagramCertificate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificate message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramCertificate} CMsgSteamDatagramCertificate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramCertificate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.keyType = reader.int32();
                        break;
                    }
                case 2: {
                        message.keyData = reader.bytes();
                        break;
                    }
                case 4: {
                        message.legacySteamId = reader.fixed64();
                        break;
                    }
                case 11: {
                        message.legacyIdentityBinary = $root.CMsgSteamNetworkingIdentityLegacyBinary.decode(reader, reader.uint32());
                        break;
                    }
                case 12: {
                        message.identityString = reader.string();
                        break;
                    }
                case 5: {
                        if (!(message.gameserverDatacenterIds && message.gameserverDatacenterIds.length))
                            message.gameserverDatacenterIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.gameserverDatacenterIds.push(reader.fixed32());
                        } else
                            message.gameserverDatacenterIds.push(reader.fixed32());
                        break;
                    }
                case 8: {
                        message.timeCreated = reader.fixed32();
                        break;
                    }
                case 9: {
                        message.timeExpiry = reader.fixed32();
                        break;
                    }
                case 10: {
                        if (!(message.appIds && message.appIds.length))
                            message.appIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.appIds.push(reader.uint32());
                        } else
                            message.appIds.push(reader.uint32());
                        break;
                    }
                case 13: {
                        if (!(message.ipAddresses && message.ipAddresses.length))
                            message.ipAddresses = [];
                        message.ipAddresses.push(reader.string());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramCertificate} CMsgSteamDatagramCertificate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramCertificate message.
         * @function verify
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramCertificate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.keyType != null && message.hasOwnProperty("keyType"))
                switch (message.keyType) {
                default:
                    return "keyType: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.keyData != null && message.hasOwnProperty("keyData"))
                if (!(message.keyData && typeof message.keyData.length === "number" || $util.isString(message.keyData)))
                    return "keyData: buffer expected";
            if (message.legacySteamId != null && message.hasOwnProperty("legacySteamId"))
                if (!$util.isInteger(message.legacySteamId) && !(message.legacySteamId && $util.isInteger(message.legacySteamId.low) && $util.isInteger(message.legacySteamId.high)))
                    return "legacySteamId: integer|Long expected";
            if (message.legacyIdentityBinary != null && message.hasOwnProperty("legacyIdentityBinary")) {
                var error = $root.CMsgSteamNetworkingIdentityLegacyBinary.verify(message.legacyIdentityBinary);
                if (error)
                    return "legacyIdentityBinary." + error;
            }
            if (message.identityString != null && message.hasOwnProperty("identityString"))
                if (!$util.isString(message.identityString))
                    return "identityString: string expected";
            if (message.gameserverDatacenterIds != null && message.hasOwnProperty("gameserverDatacenterIds")) {
                if (!Array.isArray(message.gameserverDatacenterIds))
                    return "gameserverDatacenterIds: array expected";
                for (var i = 0; i < message.gameserverDatacenterIds.length; ++i)
                    if (!$util.isInteger(message.gameserverDatacenterIds[i]))
                        return "gameserverDatacenterIds: integer[] expected";
            }
            if (message.timeCreated != null && message.hasOwnProperty("timeCreated"))
                if (!$util.isInteger(message.timeCreated))
                    return "timeCreated: integer expected";
            if (message.timeExpiry != null && message.hasOwnProperty("timeExpiry"))
                if (!$util.isInteger(message.timeExpiry))
                    return "timeExpiry: integer expected";
            if (message.appIds != null && message.hasOwnProperty("appIds")) {
                if (!Array.isArray(message.appIds))
                    return "appIds: array expected";
                for (var i = 0; i < message.appIds.length; ++i)
                    if (!$util.isInteger(message.appIds[i]))
                        return "appIds: integer[] expected";
            }
            if (message.ipAddresses != null && message.hasOwnProperty("ipAddresses")) {
                if (!Array.isArray(message.ipAddresses))
                    return "ipAddresses: array expected";
                for (var i = 0; i < message.ipAddresses.length; ++i)
                    if (!$util.isString(message.ipAddresses[i]))
                        return "ipAddresses: string[] expected";
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramCertificate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramCertificate} CMsgSteamDatagramCertificate
         */
        CMsgSteamDatagramCertificate.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramCertificate)
                return object;
            var message = new $root.CMsgSteamDatagramCertificate();
            switch (object.keyType) {
            default:
                if (typeof object.keyType === "number") {
                    message.keyType = object.keyType;
                    break;
                }
                break;
            case "INVALID":
            case 0:
                message.keyType = 0;
                break;
            case "ED25519":
            case 1:
                message.keyType = 1;
                break;
            }
            if (object.keyData != null)
                if (typeof object.keyData === "string")
                    $util.base64.decode(object.keyData, message.keyData = $util.newBuffer($util.base64.length(object.keyData)), 0);
                else if (object.keyData.length >= 0)
                    message.keyData = object.keyData;
            if (object.legacySteamId != null)
                if ($util.Long)
                    (message.legacySteamId = $util.Long.fromValue(object.legacySteamId)).unsigned = false;
                else if (typeof object.legacySteamId === "string")
                    message.legacySteamId = parseInt(object.legacySteamId, 10);
                else if (typeof object.legacySteamId === "number")
                    message.legacySteamId = object.legacySteamId;
                else if (typeof object.legacySteamId === "object")
                    message.legacySteamId = new $util.LongBits(object.legacySteamId.low >>> 0, object.legacySteamId.high >>> 0).toNumber();
            if (object.legacyIdentityBinary != null) {
                if (typeof object.legacyIdentityBinary !== "object")
                    throw TypeError(".CMsgSteamDatagramCertificate.legacyIdentityBinary: object expected");
                message.legacyIdentityBinary = $root.CMsgSteamNetworkingIdentityLegacyBinary.fromObject(object.legacyIdentityBinary);
            }
            if (object.identityString != null)
                message.identityString = String(object.identityString);
            if (object.gameserverDatacenterIds) {
                if (!Array.isArray(object.gameserverDatacenterIds))
                    throw TypeError(".CMsgSteamDatagramCertificate.gameserverDatacenterIds: array expected");
                message.gameserverDatacenterIds = [];
                for (var i = 0; i < object.gameserverDatacenterIds.length; ++i)
                    message.gameserverDatacenterIds[i] = object.gameserverDatacenterIds[i] >>> 0;
            }
            if (object.timeCreated != null)
                message.timeCreated = object.timeCreated >>> 0;
            if (object.timeExpiry != null)
                message.timeExpiry = object.timeExpiry >>> 0;
            if (object.appIds) {
                if (!Array.isArray(object.appIds))
                    throw TypeError(".CMsgSteamDatagramCertificate.appIds: array expected");
                message.appIds = [];
                for (var i = 0; i < object.appIds.length; ++i)
                    message.appIds[i] = object.appIds[i] >>> 0;
            }
            if (object.ipAddresses) {
                if (!Array.isArray(object.ipAddresses))
                    throw TypeError(".CMsgSteamDatagramCertificate.ipAddresses: array expected");
                message.ipAddresses = [];
                for (var i = 0; i < object.ipAddresses.length; ++i)
                    message.ipAddresses[i] = String(object.ipAddresses[i]);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramCertificate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {CMsgSteamDatagramCertificate} message CMsgSteamDatagramCertificate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramCertificate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.gameserverDatacenterIds = [];
                object.appIds = [];
                object.ipAddresses = [];
            }
            if (options.defaults) {
                object.keyType = options.enums === String ? "INVALID" : 0;
                if (options.bytes === String)
                    object.keyData = "";
                else {
                    object.keyData = [];
                    if (options.bytes !== Array)
                        object.keyData = $util.newBuffer(object.keyData);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacySteamId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacySteamId = options.longs === String ? "0" : 0;
                object.timeCreated = 0;
                object.timeExpiry = 0;
                object.legacyIdentityBinary = null;
                object.identityString = "";
            }
            if (message.keyType != null && message.hasOwnProperty("keyType"))
                object.keyType = options.enums === String ? $root.CMsgSteamDatagramCertificate.EKeyType[message.keyType] === undefined ? message.keyType : $root.CMsgSteamDatagramCertificate.EKeyType[message.keyType] : message.keyType;
            if (message.keyData != null && message.hasOwnProperty("keyData"))
                object.keyData = options.bytes === String ? $util.base64.encode(message.keyData, 0, message.keyData.length) : options.bytes === Array ? Array.prototype.slice.call(message.keyData) : message.keyData;
            if (message.legacySteamId != null && message.hasOwnProperty("legacySteamId"))
                if (typeof message.legacySteamId === "number")
                    object.legacySteamId = options.longs === String ? String(message.legacySteamId) : message.legacySteamId;
                else
                    object.legacySteamId = options.longs === String ? $util.Long.prototype.toString.call(message.legacySteamId) : options.longs === Number ? new $util.LongBits(message.legacySteamId.low >>> 0, message.legacySteamId.high >>> 0).toNumber() : message.legacySteamId;
            if (message.gameserverDatacenterIds && message.gameserverDatacenterIds.length) {
                object.gameserverDatacenterIds = [];
                for (var j = 0; j < message.gameserverDatacenterIds.length; ++j)
                    object.gameserverDatacenterIds[j] = message.gameserverDatacenterIds[j];
            }
            if (message.timeCreated != null && message.hasOwnProperty("timeCreated"))
                object.timeCreated = message.timeCreated;
            if (message.timeExpiry != null && message.hasOwnProperty("timeExpiry"))
                object.timeExpiry = message.timeExpiry;
            if (message.appIds && message.appIds.length) {
                object.appIds = [];
                for (var j = 0; j < message.appIds.length; ++j)
                    object.appIds[j] = message.appIds[j];
            }
            if (message.legacyIdentityBinary != null && message.hasOwnProperty("legacyIdentityBinary"))
                object.legacyIdentityBinary = $root.CMsgSteamNetworkingIdentityLegacyBinary.toObject(message.legacyIdentityBinary, options);
            if (message.identityString != null && message.hasOwnProperty("identityString"))
                object.identityString = message.identityString;
            if (message.ipAddresses && message.ipAddresses.length) {
                object.ipAddresses = [];
                for (var j = 0; j < message.ipAddresses.length; ++j)
                    object.ipAddresses[j] = message.ipAddresses[j];
            }
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramCertificate to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramCertificate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramCertificate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramCertificate
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramCertificate
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramCertificate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramCertificate";
        };
    
        /**
         * EKeyType enum.
         * @name CMsgSteamDatagramCertificate.EKeyType
         * @enum {number}
         * @property {number} INVALID=0 INVALID value
         * @property {number} ED25519=1 ED25519 value
         */
        CMsgSteamDatagramCertificate.EKeyType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "INVALID"] = 0;
            values[valuesById[1] = "ED25519"] = 1;
            return values;
        })();
    
        return CMsgSteamDatagramCertificate;
    })();
    
    $root.CMsgSteamDatagramCertificateSigned = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramCertificateSigned.
         * @exports ICMsgSteamDatagramCertificateSigned
         * @interface ICMsgSteamDatagramCertificateSigned
         * @property {Uint8Array|null} [cert] CMsgSteamDatagramCertificateSigned cert
         * @property {number|Long|null} [caKeyId] CMsgSteamDatagramCertificateSigned caKeyId
         * @property {Uint8Array|null} [caSignature] CMsgSteamDatagramCertificateSigned caSignature
         * @property {Uint8Array|null} [privateKeyData] CMsgSteamDatagramCertificateSigned privateKeyData
         */
    
        /**
         * Constructs a new CMsgSteamDatagramCertificateSigned.
         * @exports CMsgSteamDatagramCertificateSigned
         * @classdesc Represents a CMsgSteamDatagramCertificateSigned.
         * @implements ICMsgSteamDatagramCertificateSigned
         * @constructor
         * @param {ICMsgSteamDatagramCertificateSigned=} [properties] Properties to set
         */
        function CMsgSteamDatagramCertificateSigned(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramCertificateSigned cert.
         * @member {Uint8Array} cert
         * @memberof CMsgSteamDatagramCertificateSigned
         * @instance
         */
        CMsgSteamDatagramCertificateSigned.prototype.cert = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramCertificateSigned caKeyId.
         * @member {number|Long} caKeyId
         * @memberof CMsgSteamDatagramCertificateSigned
         * @instance
         */
        CMsgSteamDatagramCertificateSigned.prototype.caKeyId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramCertificateSigned caSignature.
         * @member {Uint8Array} caSignature
         * @memberof CMsgSteamDatagramCertificateSigned
         * @instance
         */
        CMsgSteamDatagramCertificateSigned.prototype.caSignature = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramCertificateSigned privateKeyData.
         * @member {Uint8Array} privateKeyData
         * @memberof CMsgSteamDatagramCertificateSigned
         * @instance
         */
        CMsgSteamDatagramCertificateSigned.prototype.privateKeyData = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramCertificateSigned instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {ICMsgSteamDatagramCertificateSigned=} [properties] Properties to set
         * @returns {CMsgSteamDatagramCertificateSigned} CMsgSteamDatagramCertificateSigned instance
         */
        CMsgSteamDatagramCertificateSigned.create = function create(properties) {
            return new CMsgSteamDatagramCertificateSigned(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificateSigned message. Does not implicitly {@link CMsgSteamDatagramCertificateSigned.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {ICMsgSteamDatagramCertificateSigned} message CMsgSteamDatagramCertificateSigned message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificateSigned.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.privateKeyData != null && Object.hasOwnProperty.call(message, "privateKeyData"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.privateKeyData);
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.cert);
            if (message.caKeyId != null && Object.hasOwnProperty.call(message, "caKeyId"))
                writer.uint32(/* id 5, wireType 1 =*/41).fixed64(message.caKeyId);
            if (message.caSignature != null && Object.hasOwnProperty.call(message, "caSignature"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.caSignature);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificateSigned message, length delimited. Does not implicitly {@link CMsgSteamDatagramCertificateSigned.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {ICMsgSteamDatagramCertificateSigned} message CMsgSteamDatagramCertificateSigned message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificateSigned.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificateSigned message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramCertificateSigned} CMsgSteamDatagramCertificateSigned
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificateSigned.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramCertificateSigned();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 4: {
                        message.cert = reader.bytes();
                        break;
                    }
                case 5: {
                        message.caKeyId = reader.fixed64();
                        break;
                    }
                case 6: {
                        message.caSignature = reader.bytes();
                        break;
                    }
                case 1: {
                        message.privateKeyData = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificateSigned message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramCertificateSigned} CMsgSteamDatagramCertificateSigned
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificateSigned.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramCertificateSigned message.
         * @function verify
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramCertificateSigned.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cert != null && message.hasOwnProperty("cert"))
                if (!(message.cert && typeof message.cert.length === "number" || $util.isString(message.cert)))
                    return "cert: buffer expected";
            if (message.caKeyId != null && message.hasOwnProperty("caKeyId"))
                if (!$util.isInteger(message.caKeyId) && !(message.caKeyId && $util.isInteger(message.caKeyId.low) && $util.isInteger(message.caKeyId.high)))
                    return "caKeyId: integer|Long expected";
            if (message.caSignature != null && message.hasOwnProperty("caSignature"))
                if (!(message.caSignature && typeof message.caSignature.length === "number" || $util.isString(message.caSignature)))
                    return "caSignature: buffer expected";
            if (message.privateKeyData != null && message.hasOwnProperty("privateKeyData"))
                if (!(message.privateKeyData && typeof message.privateKeyData.length === "number" || $util.isString(message.privateKeyData)))
                    return "privateKeyData: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramCertificateSigned message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramCertificateSigned} CMsgSteamDatagramCertificateSigned
         */
        CMsgSteamDatagramCertificateSigned.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramCertificateSigned)
                return object;
            var message = new $root.CMsgSteamDatagramCertificateSigned();
            if (object.cert != null)
                if (typeof object.cert === "string")
                    $util.base64.decode(object.cert, message.cert = $util.newBuffer($util.base64.length(object.cert)), 0);
                else if (object.cert.length >= 0)
                    message.cert = object.cert;
            if (object.caKeyId != null)
                if ($util.Long)
                    (message.caKeyId = $util.Long.fromValue(object.caKeyId)).unsigned = false;
                else if (typeof object.caKeyId === "string")
                    message.caKeyId = parseInt(object.caKeyId, 10);
                else if (typeof object.caKeyId === "number")
                    message.caKeyId = object.caKeyId;
                else if (typeof object.caKeyId === "object")
                    message.caKeyId = new $util.LongBits(object.caKeyId.low >>> 0, object.caKeyId.high >>> 0).toNumber();
            if (object.caSignature != null)
                if (typeof object.caSignature === "string")
                    $util.base64.decode(object.caSignature, message.caSignature = $util.newBuffer($util.base64.length(object.caSignature)), 0);
                else if (object.caSignature.length >= 0)
                    message.caSignature = object.caSignature;
            if (object.privateKeyData != null)
                if (typeof object.privateKeyData === "string")
                    $util.base64.decode(object.privateKeyData, message.privateKeyData = $util.newBuffer($util.base64.length(object.privateKeyData)), 0);
                else if (object.privateKeyData.length >= 0)
                    message.privateKeyData = object.privateKeyData;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramCertificateSigned message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {CMsgSteamDatagramCertificateSigned} message CMsgSteamDatagramCertificateSigned
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramCertificateSigned.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.privateKeyData = "";
                else {
                    object.privateKeyData = [];
                    if (options.bytes !== Array)
                        object.privateKeyData = $util.newBuffer(object.privateKeyData);
                }
                if (options.bytes === String)
                    object.cert = "";
                else {
                    object.cert = [];
                    if (options.bytes !== Array)
                        object.cert = $util.newBuffer(object.cert);
                }
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.caKeyId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.caKeyId = options.longs === String ? "0" : 0;
                if (options.bytes === String)
                    object.caSignature = "";
                else {
                    object.caSignature = [];
                    if (options.bytes !== Array)
                        object.caSignature = $util.newBuffer(object.caSignature);
                }
            }
            if (message.privateKeyData != null && message.hasOwnProperty("privateKeyData"))
                object.privateKeyData = options.bytes === String ? $util.base64.encode(message.privateKeyData, 0, message.privateKeyData.length) : options.bytes === Array ? Array.prototype.slice.call(message.privateKeyData) : message.privateKeyData;
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = options.bytes === String ? $util.base64.encode(message.cert, 0, message.cert.length) : options.bytes === Array ? Array.prototype.slice.call(message.cert) : message.cert;
            if (message.caKeyId != null && message.hasOwnProperty("caKeyId"))
                if (typeof message.caKeyId === "number")
                    object.caKeyId = options.longs === String ? String(message.caKeyId) : message.caKeyId;
                else
                    object.caKeyId = options.longs === String ? $util.Long.prototype.toString.call(message.caKeyId) : options.longs === Number ? new $util.LongBits(message.caKeyId.low >>> 0, message.caKeyId.high >>> 0).toNumber() : message.caKeyId;
            if (message.caSignature != null && message.hasOwnProperty("caSignature"))
                object.caSignature = options.bytes === String ? $util.base64.encode(message.caSignature, 0, message.caSignature.length) : options.bytes === Array ? Array.prototype.slice.call(message.caSignature) : message.caSignature;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramCertificateSigned to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramCertificateSigned
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramCertificateSigned.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramCertificateSigned
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramCertificateSigned
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramCertificateSigned.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramCertificateSigned";
        };
    
        return CMsgSteamDatagramCertificateSigned;
    })();
    
    $root.CMsgSteamDatagramCertificateRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramCertificateRequest.
         * @exports ICMsgSteamDatagramCertificateRequest
         * @interface ICMsgSteamDatagramCertificateRequest
         * @property {ICMsgSteamDatagramCertificate|null} [cert] CMsgSteamDatagramCertificateRequest cert
         */
    
        /**
         * Constructs a new CMsgSteamDatagramCertificateRequest.
         * @exports CMsgSteamDatagramCertificateRequest
         * @classdesc Represents a CMsgSteamDatagramCertificateRequest.
         * @implements ICMsgSteamDatagramCertificateRequest
         * @constructor
         * @param {ICMsgSteamDatagramCertificateRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramCertificateRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramCertificateRequest cert.
         * @member {ICMsgSteamDatagramCertificate|null|undefined} cert
         * @memberof CMsgSteamDatagramCertificateRequest
         * @instance
         */
        CMsgSteamDatagramCertificateRequest.prototype.cert = null;
    
        /**
         * Creates a new CMsgSteamDatagramCertificateRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {ICMsgSteamDatagramCertificateRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramCertificateRequest} CMsgSteamDatagramCertificateRequest instance
         */
        CMsgSteamDatagramCertificateRequest.create = function create(properties) {
            return new CMsgSteamDatagramCertificateRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificateRequest message. Does not implicitly {@link CMsgSteamDatagramCertificateRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {ICMsgSteamDatagramCertificateRequest} message CMsgSteamDatagramCertificateRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificateRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificate.encode(message.cert, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramCertificateRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramCertificateRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {ICMsgSteamDatagramCertificateRequest} message CMsgSteamDatagramCertificateRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramCertificateRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificateRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramCertificateRequest} CMsgSteamDatagramCertificateRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificateRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramCertificateRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.cert = $root.CMsgSteamDatagramCertificate.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramCertificateRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramCertificateRequest} CMsgSteamDatagramCertificateRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramCertificateRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramCertificateRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramCertificateRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificate.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramCertificateRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramCertificateRequest} CMsgSteamDatagramCertificateRequest
         */
        CMsgSteamDatagramCertificateRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramCertificateRequest)
                return object;
            var message = new $root.CMsgSteamDatagramCertificateRequest();
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramCertificateRequest.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificate.fromObject(object.cert);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramCertificateRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {CMsgSteamDatagramCertificateRequest} message CMsgSteamDatagramCertificateRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramCertificateRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.cert = null;
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificate.toObject(message.cert, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramCertificateRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramCertificateRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramCertificateRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramCertificateRequest
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramCertificateRequest
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramCertificateRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramCertificateRequest";
        };
    
        return CMsgSteamDatagramCertificateRequest;
    })();
    
    /**
     * ESteamDatagramMsgID enum.
     * @exports ESteamDatagramMsgID
     * @enum {number}
     * @property {number} k_ESteamDatagramMsg_Invalid=0 k_ESteamDatagramMsg_Invalid value
     * @property {number} k_ESteamDatagramMsg_RouterPingRequest=1 k_ESteamDatagramMsg_RouterPingRequest value
     * @property {number} k_ESteamDatagramMsg_RouterPingReply=2 k_ESteamDatagramMsg_RouterPingReply value
     * @property {number} k_ESteamDatagramMsg_GameserverPingRequest=3 k_ESteamDatagramMsg_GameserverPingRequest value
     * @property {number} k_ESteamDatagramMsg_GameserverSessionRequest=5 k_ESteamDatagramMsg_GameserverSessionRequest value
     * @property {number} k_ESteamDatagramMsg_GameserverSessionEstablished=6 k_ESteamDatagramMsg_GameserverSessionEstablished value
     * @property {number} k_ESteamDatagramMsg_NoSession=7 k_ESteamDatagramMsg_NoSession value
     * @property {number} k_ESteamDatagramMsg_Diagnostic=8 k_ESteamDatagramMsg_Diagnostic value
     * @property {number} k_ESteamDatagramMsg_DataClientToRouter=9 k_ESteamDatagramMsg_DataClientToRouter value
     * @property {number} k_ESteamDatagramMsg_DataRouterToServer=10 k_ESteamDatagramMsg_DataRouterToServer value
     * @property {number} k_ESteamDatagramMsg_DataServerToRouter=11 k_ESteamDatagramMsg_DataServerToRouter value
     * @property {number} k_ESteamDatagramMsg_DataRouterToClient=12 k_ESteamDatagramMsg_DataRouterToClient value
     * @property {number} k_ESteamDatagramMsg_Stats=13 k_ESteamDatagramMsg_Stats value
     * @property {number} k_ESteamDatagramMsg_ClientPingSampleRequest=14 k_ESteamDatagramMsg_ClientPingSampleRequest value
     * @property {number} k_ESteamDatagramMsg_ClientPingSampleReply=15 k_ESteamDatagramMsg_ClientPingSampleReply value
     * @property {number} k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary=16 k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary value
     * @property {number} k_ESteamDatagramMsg_RelayHealth=17 k_ESteamDatagramMsg_RelayHealth value
     * @property {number} k_ESteamDatagramMsg_ConnectRequest=18 k_ESteamDatagramMsg_ConnectRequest value
     * @property {number} k_ESteamDatagramMsg_ConnectOK=19 k_ESteamDatagramMsg_ConnectOK value
     * @property {number} k_ESteamDatagramMsg_ConnectionClosed=20 k_ESteamDatagramMsg_ConnectionClosed value
     * @property {number} k_ESteamDatagramMsg_NoConnection=21 k_ESteamDatagramMsg_NoConnection value
     * @property {number} k_ESteamDatagramMsg_TicketDecryptRequest=22 k_ESteamDatagramMsg_TicketDecryptRequest value
     * @property {number} k_ESteamDatagramMsg_TicketDecryptReply=23 k_ESteamDatagramMsg_TicketDecryptReply value
     * @property {number} k_ESteamDatagramMsg_P2PSessionRequest=24 k_ESteamDatagramMsg_P2PSessionRequest value
     * @property {number} k_ESteamDatagramMsg_P2PSessionEstablished=25 k_ESteamDatagramMsg_P2PSessionEstablished value
     * @property {number} k_ESteamDatagramMsg_P2PStatsClient=26 k_ESteamDatagramMsg_P2PStatsClient value
     * @property {number} k_ESteamDatagramMsg_P2PStatsRelay=27 k_ESteamDatagramMsg_P2PStatsRelay value
     * @property {number} k_ESteamDatagramMsg_P2PBadRoute=28 k_ESteamDatagramMsg_P2PBadRoute value
     * @property {number} k_ESteamDatagramMsg_GameserverPingReply=29 k_ESteamDatagramMsg_GameserverPingReply value
     * @property {number} k_ESteamDatagramMsg_LegacyGameserverRegistration=30 k_ESteamDatagramMsg_LegacyGameserverRegistration value
     * @property {number} k_ESteamDatagramMsg_SetSecondaryAddressRequest=31 k_ESteamDatagramMsg_SetSecondaryAddressRequest value
     * @property {number} k_ESteamDatagramMsg_SetSecondaryAddressResult=32 k_ESteamDatagramMsg_SetSecondaryAddressResult value
     * @property {number} k_ESteamDatagramMsg_RelayToRelayPingRequest=33 k_ESteamDatagramMsg_RelayToRelayPingRequest value
     * @property {number} k_ESteamDatagramMsg_RelayToRelayPingReply=34 k_ESteamDatagramMsg_RelayToRelayPingReply value
     */
    $root.ESteamDatagramMsgID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "k_ESteamDatagramMsg_Invalid"] = 0;
        values[valuesById[1] = "k_ESteamDatagramMsg_RouterPingRequest"] = 1;
        values[valuesById[2] = "k_ESteamDatagramMsg_RouterPingReply"] = 2;
        values[valuesById[3] = "k_ESteamDatagramMsg_GameserverPingRequest"] = 3;
        values[valuesById[5] = "k_ESteamDatagramMsg_GameserverSessionRequest"] = 5;
        values[valuesById[6] = "k_ESteamDatagramMsg_GameserverSessionEstablished"] = 6;
        values[valuesById[7] = "k_ESteamDatagramMsg_NoSession"] = 7;
        values[valuesById[8] = "k_ESteamDatagramMsg_Diagnostic"] = 8;
        values[valuesById[9] = "k_ESteamDatagramMsg_DataClientToRouter"] = 9;
        values[valuesById[10] = "k_ESteamDatagramMsg_DataRouterToServer"] = 10;
        values[valuesById[11] = "k_ESteamDatagramMsg_DataServerToRouter"] = 11;
        values[valuesById[12] = "k_ESteamDatagramMsg_DataRouterToClient"] = 12;
        values[valuesById[13] = "k_ESteamDatagramMsg_Stats"] = 13;
        values[valuesById[14] = "k_ESteamDatagramMsg_ClientPingSampleRequest"] = 14;
        values[valuesById[15] = "k_ESteamDatagramMsg_ClientPingSampleReply"] = 15;
        values[valuesById[16] = "k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary"] = 16;
        values[valuesById[17] = "k_ESteamDatagramMsg_RelayHealth"] = 17;
        values[valuesById[18] = "k_ESteamDatagramMsg_ConnectRequest"] = 18;
        values[valuesById[19] = "k_ESteamDatagramMsg_ConnectOK"] = 19;
        values[valuesById[20] = "k_ESteamDatagramMsg_ConnectionClosed"] = 20;
        values[valuesById[21] = "k_ESteamDatagramMsg_NoConnection"] = 21;
        values[valuesById[22] = "k_ESteamDatagramMsg_TicketDecryptRequest"] = 22;
        values[valuesById[23] = "k_ESteamDatagramMsg_TicketDecryptReply"] = 23;
        values[valuesById[24] = "k_ESteamDatagramMsg_P2PSessionRequest"] = 24;
        values[valuesById[25] = "k_ESteamDatagramMsg_P2PSessionEstablished"] = 25;
        values[valuesById[26] = "k_ESteamDatagramMsg_P2PStatsClient"] = 26;
        values[valuesById[27] = "k_ESteamDatagramMsg_P2PStatsRelay"] = 27;
        values[valuesById[28] = "k_ESteamDatagramMsg_P2PBadRoute"] = 28;
        values[valuesById[29] = "k_ESteamDatagramMsg_GameserverPingReply"] = 29;
        values[valuesById[30] = "k_ESteamDatagramMsg_LegacyGameserverRegistration"] = 30;
        values[valuesById[31] = "k_ESteamDatagramMsg_SetSecondaryAddressRequest"] = 31;
        values[valuesById[32] = "k_ESteamDatagramMsg_SetSecondaryAddressResult"] = 32;
        values[valuesById[33] = "k_ESteamDatagramMsg_RelayToRelayPingRequest"] = 33;
        values[valuesById[34] = "k_ESteamDatagramMsg_RelayToRelayPingReply"] = 34;
        return values;
    })();
    
    $root.CMsgSteamNetworkingIPAddress = (function() {
    
        /**
         * Properties of a CMsgSteamNetworkingIPAddress.
         * @exports ICMsgSteamNetworkingIPAddress
         * @interface ICMsgSteamNetworkingIPAddress
         * @property {number|null} [v4] CMsgSteamNetworkingIPAddress v4
         * @property {Uint8Array|null} [v6] CMsgSteamNetworkingIPAddress v6
         */
    
        /**
         * Constructs a new CMsgSteamNetworkingIPAddress.
         * @exports CMsgSteamNetworkingIPAddress
         * @classdesc Represents a CMsgSteamNetworkingIPAddress.
         * @implements ICMsgSteamNetworkingIPAddress
         * @constructor
         * @param {ICMsgSteamNetworkingIPAddress=} [properties] Properties to set
         */
        function CMsgSteamNetworkingIPAddress(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamNetworkingIPAddress v4.
         * @member {number} v4
         * @memberof CMsgSteamNetworkingIPAddress
         * @instance
         */
        CMsgSteamNetworkingIPAddress.prototype.v4 = 0;
    
        /**
         * CMsgSteamNetworkingIPAddress v6.
         * @member {Uint8Array} v6
         * @memberof CMsgSteamNetworkingIPAddress
         * @instance
         */
        CMsgSteamNetworkingIPAddress.prototype.v6 = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamNetworkingIPAddress instance using the specified properties.
         * @function create
         * @memberof CMsgSteamNetworkingIPAddress
         * @static
         * @param {ICMsgSteamNetworkingIPAddress=} [properties] Properties to set
         * @returns {CMsgSteamNetworkingIPAddress} CMsgSteamNetworkingIPAddress instance
         */
        CMsgSteamNetworkingIPAddress.create = function create(properties) {
            return new CMsgSteamNetworkingIPAddress(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingIPAddress message. Does not implicitly {@link CMsgSteamNetworkingIPAddress.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamNetworkingIPAddress
         * @static
         * @param {ICMsgSteamNetworkingIPAddress} message CMsgSteamNetworkingIPAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingIPAddress.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.v4 != null && Object.hasOwnProperty.call(message, "v4"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.v4);
            if (message.v6 != null && Object.hasOwnProperty.call(message, "v6"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.v6);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingIPAddress message, length delimited. Does not implicitly {@link CMsgSteamNetworkingIPAddress.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamNetworkingIPAddress
         * @static
         * @param {ICMsgSteamNetworkingIPAddress} message CMsgSteamNetworkingIPAddress message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingIPAddress.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamNetworkingIPAddress message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamNetworkingIPAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamNetworkingIPAddress} CMsgSteamNetworkingIPAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingIPAddress.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingIPAddress();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.v4 = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.v6 = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamNetworkingIPAddress message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamNetworkingIPAddress
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamNetworkingIPAddress} CMsgSteamNetworkingIPAddress
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingIPAddress.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamNetworkingIPAddress message.
         * @function verify
         * @memberof CMsgSteamNetworkingIPAddress
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamNetworkingIPAddress.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.v4 != null && message.hasOwnProperty("v4"))
                if (!$util.isInteger(message.v4))
                    return "v4: integer expected";
            if (message.v6 != null && message.hasOwnProperty("v6"))
                if (!(message.v6 && typeof message.v6.length === "number" || $util.isString(message.v6)))
                    return "v6: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamNetworkingIPAddress message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamNetworkingIPAddress
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamNetworkingIPAddress} CMsgSteamNetworkingIPAddress
         */
        CMsgSteamNetworkingIPAddress.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamNetworkingIPAddress)
                return object;
            var message = new $root.CMsgSteamNetworkingIPAddress();
            if (object.v4 != null)
                message.v4 = object.v4 >>> 0;
            if (object.v6 != null)
                if (typeof object.v6 === "string")
                    $util.base64.decode(object.v6, message.v6 = $util.newBuffer($util.base64.length(object.v6)), 0);
                else if (object.v6.length >= 0)
                    message.v6 = object.v6;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamNetworkingIPAddress message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamNetworkingIPAddress
         * @static
         * @param {CMsgSteamNetworkingIPAddress} message CMsgSteamNetworkingIPAddress
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamNetworkingIPAddress.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.v4 = 0;
                if (options.bytes === String)
                    object.v6 = "";
                else {
                    object.v6 = [];
                    if (options.bytes !== Array)
                        object.v6 = $util.newBuffer(object.v6);
                }
            }
            if (message.v4 != null && message.hasOwnProperty("v4"))
                object.v4 = message.v4;
            if (message.v6 != null && message.hasOwnProperty("v6"))
                object.v6 = options.bytes === String ? $util.base64.encode(message.v6, 0, message.v6.length) : options.bytes === Array ? Array.prototype.slice.call(message.v6) : message.v6;
            return object;
        };
    
        /**
         * Converts this CMsgSteamNetworkingIPAddress to JSON.
         * @function toJSON
         * @memberof CMsgSteamNetworkingIPAddress
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamNetworkingIPAddress.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamNetworkingIPAddress
         * @function getTypeUrl
         * @memberof CMsgSteamNetworkingIPAddress
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamNetworkingIPAddress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamNetworkingIPAddress";
        };
    
        return CMsgSteamNetworkingIPAddress;
    })();
    
    $root.CMsgSteamDatagramSignedMessageGeneric = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramSignedMessageGeneric.
         * @exports ICMsgSteamDatagramSignedMessageGeneric
         * @interface ICMsgSteamDatagramSignedMessageGeneric
         * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] CMsgSteamDatagramSignedMessageGeneric cert
         * @property {Uint8Array|null} [signedData] CMsgSteamDatagramSignedMessageGeneric signedData
         * @property {Uint8Array|null} [signature] CMsgSteamDatagramSignedMessageGeneric signature
         * @property {Uint8Array|null} [dummyPad] CMsgSteamDatagramSignedMessageGeneric dummyPad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramSignedMessageGeneric.
         * @exports CMsgSteamDatagramSignedMessageGeneric
         * @classdesc Represents a CMsgSteamDatagramSignedMessageGeneric.
         * @implements ICMsgSteamDatagramSignedMessageGeneric
         * @constructor
         * @param {ICMsgSteamDatagramSignedMessageGeneric=} [properties] Properties to set
         */
        function CMsgSteamDatagramSignedMessageGeneric(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramSignedMessageGeneric cert.
         * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @instance
         */
        CMsgSteamDatagramSignedMessageGeneric.prototype.cert = null;
    
        /**
         * CMsgSteamDatagramSignedMessageGeneric signedData.
         * @member {Uint8Array} signedData
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @instance
         */
        CMsgSteamDatagramSignedMessageGeneric.prototype.signedData = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramSignedMessageGeneric signature.
         * @member {Uint8Array} signature
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @instance
         */
        CMsgSteamDatagramSignedMessageGeneric.prototype.signature = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramSignedMessageGeneric dummyPad.
         * @member {Uint8Array} dummyPad
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @instance
         */
        CMsgSteamDatagramSignedMessageGeneric.prototype.dummyPad = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramSignedMessageGeneric instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @static
         * @param {ICMsgSteamDatagramSignedMessageGeneric=} [properties] Properties to set
         * @returns {CMsgSteamDatagramSignedMessageGeneric} CMsgSteamDatagramSignedMessageGeneric instance
         */
        CMsgSteamDatagramSignedMessageGeneric.create = function create(properties) {
            return new CMsgSteamDatagramSignedMessageGeneric(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSignedMessageGeneric message. Does not implicitly {@link CMsgSteamDatagramSignedMessageGeneric.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @static
         * @param {ICMsgSteamDatagramSignedMessageGeneric} message CMsgSteamDatagramSignedMessageGeneric message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSignedMessageGeneric.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.signedData != null && Object.hasOwnProperty.call(message, "signedData"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.signedData);
            if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.signature);
            if (message.dummyPad != null && Object.hasOwnProperty.call(message, "dummyPad"))
                writer.uint32(/* id 1023, wireType 2 =*/8186).bytes(message.dummyPad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSignedMessageGeneric message, length delimited. Does not implicitly {@link CMsgSteamDatagramSignedMessageGeneric.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @static
         * @param {ICMsgSteamDatagramSignedMessageGeneric} message CMsgSteamDatagramSignedMessageGeneric message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSignedMessageGeneric.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramSignedMessageGeneric message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramSignedMessageGeneric} CMsgSteamDatagramSignedMessageGeneric
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSignedMessageGeneric.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramSignedMessageGeneric();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.signedData = reader.bytes();
                        break;
                    }
                case 3: {
                        message.signature = reader.bytes();
                        break;
                    }
                case 1023: {
                        message.dummyPad = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramSignedMessageGeneric message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramSignedMessageGeneric} CMsgSteamDatagramSignedMessageGeneric
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSignedMessageGeneric.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramSignedMessageGeneric message.
         * @function verify
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramSignedMessageGeneric.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            if (message.signedData != null && message.hasOwnProperty("signedData"))
                if (!(message.signedData && typeof message.signedData.length === "number" || $util.isString(message.signedData)))
                    return "signedData: buffer expected";
            if (message.signature != null && message.hasOwnProperty("signature"))
                if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                    return "signature: buffer expected";
            if (message.dummyPad != null && message.hasOwnProperty("dummyPad"))
                if (!(message.dummyPad && typeof message.dummyPad.length === "number" || $util.isString(message.dummyPad)))
                    return "dummyPad: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramSignedMessageGeneric message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramSignedMessageGeneric} CMsgSteamDatagramSignedMessageGeneric
         */
        CMsgSteamDatagramSignedMessageGeneric.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramSignedMessageGeneric)
                return object;
            var message = new $root.CMsgSteamDatagramSignedMessageGeneric();
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramSignedMessageGeneric.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
            }
            if (object.signedData != null)
                if (typeof object.signedData === "string")
                    $util.base64.decode(object.signedData, message.signedData = $util.newBuffer($util.base64.length(object.signedData)), 0);
                else if (object.signedData.length >= 0)
                    message.signedData = object.signedData;
            if (object.signature != null)
                if (typeof object.signature === "string")
                    $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                else if (object.signature.length >= 0)
                    message.signature = object.signature;
            if (object.dummyPad != null)
                if (typeof object.dummyPad === "string")
                    $util.base64.decode(object.dummyPad, message.dummyPad = $util.newBuffer($util.base64.length(object.dummyPad)), 0);
                else if (object.dummyPad.length >= 0)
                    message.dummyPad = object.dummyPad;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramSignedMessageGeneric message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @static
         * @param {CMsgSteamDatagramSignedMessageGeneric} message CMsgSteamDatagramSignedMessageGeneric
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramSignedMessageGeneric.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.cert = null;
                if (options.bytes === String)
                    object.signedData = "";
                else {
                    object.signedData = [];
                    if (options.bytes !== Array)
                        object.signedData = $util.newBuffer(object.signedData);
                }
                if (options.bytes === String)
                    object.signature = "";
                else {
                    object.signature = [];
                    if (options.bytes !== Array)
                        object.signature = $util.newBuffer(object.signature);
                }
                if (options.bytes === String)
                    object.dummyPad = "";
                else {
                    object.dummyPad = [];
                    if (options.bytes !== Array)
                        object.dummyPad = $util.newBuffer(object.dummyPad);
                }
            }
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
            if (message.signedData != null && message.hasOwnProperty("signedData"))
                object.signedData = options.bytes === String ? $util.base64.encode(message.signedData, 0, message.signedData.length) : options.bytes === Array ? Array.prototype.slice.call(message.signedData) : message.signedData;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
            if (message.dummyPad != null && message.hasOwnProperty("dummyPad"))
                object.dummyPad = options.bytes === String ? $util.base64.encode(message.dummyPad, 0, message.dummyPad.length) : options.bytes === Array ? Array.prototype.slice.call(message.dummyPad) : message.dummyPad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramSignedMessageGeneric to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramSignedMessageGeneric.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramSignedMessageGeneric
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramSignedMessageGeneric
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramSignedMessageGeneric.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramSignedMessageGeneric";
        };
    
        return CMsgSteamDatagramSignedMessageGeneric;
    })();
    
    $root.CMsgSteamDatagramRouterPingReply = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramRouterPingReply.
         * @exports ICMsgSteamDatagramRouterPingReply
         * @interface ICMsgSteamDatagramRouterPingReply
         * @property {number|null} [clientTimestamp] CMsgSteamDatagramRouterPingReply clientTimestamp
         * @property {Array.<number>|null} [latencyDatacenterIds] CMsgSteamDatagramRouterPingReply latencyDatacenterIds
         * @property {Array.<number>|null} [latencyPingMs] CMsgSteamDatagramRouterPingReply latencyPingMs
         * @property {Array.<number>|null} [latencyDatacenterIdsP2p] CMsgSteamDatagramRouterPingReply latencyDatacenterIdsP2p
         * @property {Array.<number>|null} [latencyPingMsP2p] CMsgSteamDatagramRouterPingReply latencyPingMsP2p
         * @property {number|null} [yourPublicIp] CMsgSteamDatagramRouterPingReply yourPublicIp
         * @property {number|null} [yourPublicPort] CMsgSteamDatagramRouterPingReply yourPublicPort
         * @property {number|null} [serverTime] CMsgSteamDatagramRouterPingReply serverTime
         * @property {number|Long|null} [challenge] CMsgSteamDatagramRouterPingReply challenge
         * @property {number|null} [secondsUntilShutdown] CMsgSteamDatagramRouterPingReply secondsUntilShutdown
         * @property {number|null} [clientCookie] CMsgSteamDatagramRouterPingReply clientCookie
         * @property {number|null} [scoringPenaltyRelayCluster] CMsgSteamDatagramRouterPingReply scoringPenaltyRelayCluster
         * @property {number|null} [flags] CMsgSteamDatagramRouterPingReply flags
         * @property {Array.<CMsgSteamDatagramRouterPingReply.IRouteException>|null} [routeExceptions] CMsgSteamDatagramRouterPingReply routeExceptions
         * @property {Array.<CMsgSteamDatagramRouterPingReply.IAltAddress>|null} [altAddresses] CMsgSteamDatagramRouterPingReply altAddresses
         * @property {Uint8Array|null} [dummyPad] CMsgSteamDatagramRouterPingReply dummyPad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramRouterPingReply.
         * @exports CMsgSteamDatagramRouterPingReply
         * @classdesc Represents a CMsgSteamDatagramRouterPingReply.
         * @implements ICMsgSteamDatagramRouterPingReply
         * @constructor
         * @param {ICMsgSteamDatagramRouterPingReply=} [properties] Properties to set
         */
        function CMsgSteamDatagramRouterPingReply(properties) {
            this.latencyDatacenterIds = [];
            this.latencyPingMs = [];
            this.latencyDatacenterIdsP2p = [];
            this.latencyPingMsP2p = [];
            this.routeExceptions = [];
            this.altAddresses = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramRouterPingReply clientTimestamp.
         * @member {number} clientTimestamp
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.clientTimestamp = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply latencyDatacenterIds.
         * @member {Array.<number>} latencyDatacenterIds
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.latencyDatacenterIds = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramRouterPingReply latencyPingMs.
         * @member {Array.<number>} latencyPingMs
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.latencyPingMs = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramRouterPingReply latencyDatacenterIdsP2p.
         * @member {Array.<number>} latencyDatacenterIdsP2p
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.latencyDatacenterIdsP2p = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramRouterPingReply latencyPingMsP2p.
         * @member {Array.<number>} latencyPingMsP2p
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.latencyPingMsP2p = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramRouterPingReply yourPublicIp.
         * @member {number} yourPublicIp
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.yourPublicIp = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply yourPublicPort.
         * @member {number} yourPublicPort
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.yourPublicPort = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply serverTime.
         * @member {number} serverTime
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.serverTime = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply challenge.
         * @member {number|Long} challenge
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.challenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply secondsUntilShutdown.
         * @member {number} secondsUntilShutdown
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.secondsUntilShutdown = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply clientCookie.
         * @member {number} clientCookie
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.clientCookie = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply scoringPenaltyRelayCluster.
         * @member {number} scoringPenaltyRelayCluster
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.scoringPenaltyRelayCluster = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramRouterPingReply routeExceptions.
         * @member {Array.<CMsgSteamDatagramRouterPingReply.IRouteException>} routeExceptions
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.routeExceptions = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramRouterPingReply altAddresses.
         * @member {Array.<CMsgSteamDatagramRouterPingReply.IAltAddress>} altAddresses
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.altAddresses = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramRouterPingReply dummyPad.
         * @member {Uint8Array} dummyPad
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         */
        CMsgSteamDatagramRouterPingReply.prototype.dummyPad = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramRouterPingReply instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {ICMsgSteamDatagramRouterPingReply=} [properties] Properties to set
         * @returns {CMsgSteamDatagramRouterPingReply} CMsgSteamDatagramRouterPingReply instance
         */
        CMsgSteamDatagramRouterPingReply.create = function create(properties) {
            return new CMsgSteamDatagramRouterPingReply(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramRouterPingReply message. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {ICMsgSteamDatagramRouterPingReply} message CMsgSteamDatagramRouterPingReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramRouterPingReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.clientTimestamp != null && Object.hasOwnProperty.call(message, "clientTimestamp"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.clientTimestamp);
            if (message.latencyDatacenterIds != null && message.latencyDatacenterIds.length) {
                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                for (var i = 0; i < message.latencyDatacenterIds.length; ++i)
                    writer.fixed32(message.latencyDatacenterIds[i]);
                writer.ldelim();
            }
            if (message.latencyPingMs != null && message.latencyPingMs.length) {
                writer.uint32(/* id 3, wireType 2 =*/26).fork();
                for (var i = 0; i < message.latencyPingMs.length; ++i)
                    writer.uint32(message.latencyPingMs[i]);
                writer.ldelim();
            }
            if (message.yourPublicIp != null && Object.hasOwnProperty.call(message, "yourPublicIp"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.yourPublicIp);
            if (message.serverTime != null && Object.hasOwnProperty.call(message, "serverTime"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.serverTime);
            if (message.challenge != null && Object.hasOwnProperty.call(message, "challenge"))
                writer.uint32(/* id 6, wireType 1 =*/49).fixed64(message.challenge);
            if (message.secondsUntilShutdown != null && Object.hasOwnProperty.call(message, "secondsUntilShutdown"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.secondsUntilShutdown);
            if (message.clientCookie != null && Object.hasOwnProperty.call(message, "clientCookie"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.clientCookie);
            if (message.scoringPenaltyRelayCluster != null && Object.hasOwnProperty.call(message, "scoringPenaltyRelayCluster"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.scoringPenaltyRelayCluster);
            if (message.routeExceptions != null && message.routeExceptions.length)
                for (var i = 0; i < message.routeExceptions.length; ++i)
                    $root.CMsgSteamDatagramRouterPingReply.RouteException.encode(message.routeExceptions[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.yourPublicPort != null && Object.hasOwnProperty.call(message, "yourPublicPort"))
                writer.uint32(/* id 11, wireType 5 =*/93).fixed32(message.yourPublicPort);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.flags);
            if (message.altAddresses != null && message.altAddresses.length)
                for (var i = 0; i < message.altAddresses.length; ++i)
                    $root.CMsgSteamDatagramRouterPingReply.AltAddress.encode(message.altAddresses[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.latencyDatacenterIdsP2p != null && message.latencyDatacenterIdsP2p.length) {
                writer.uint32(/* id 14, wireType 2 =*/114).fork();
                for (var i = 0; i < message.latencyDatacenterIdsP2p.length; ++i)
                    writer.fixed32(message.latencyDatacenterIdsP2p[i]);
                writer.ldelim();
            }
            if (message.latencyPingMsP2p != null && message.latencyPingMsP2p.length) {
                writer.uint32(/* id 15, wireType 2 =*/122).fork();
                for (var i = 0; i < message.latencyPingMsP2p.length; ++i)
                    writer.uint32(message.latencyPingMsP2p[i]);
                writer.ldelim();
            }
            if (message.dummyPad != null && Object.hasOwnProperty.call(message, "dummyPad"))
                writer.uint32(/* id 99, wireType 2 =*/794).bytes(message.dummyPad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramRouterPingReply message, length delimited. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {ICMsgSteamDatagramRouterPingReply} message CMsgSteamDatagramRouterPingReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramRouterPingReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramRouterPingReply message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramRouterPingReply} CMsgSteamDatagramRouterPingReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramRouterPingReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramRouterPingReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.clientTimestamp = reader.fixed32();
                        break;
                    }
                case 2: {
                        if (!(message.latencyDatacenterIds && message.latencyDatacenterIds.length))
                            message.latencyDatacenterIds = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.latencyDatacenterIds.push(reader.fixed32());
                        } else
                            message.latencyDatacenterIds.push(reader.fixed32());
                        break;
                    }
                case 3: {
                        if (!(message.latencyPingMs && message.latencyPingMs.length))
                            message.latencyPingMs = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.latencyPingMs.push(reader.uint32());
                        } else
                            message.latencyPingMs.push(reader.uint32());
                        break;
                    }
                case 14: {
                        if (!(message.latencyDatacenterIdsP2p && message.latencyDatacenterIdsP2p.length))
                            message.latencyDatacenterIdsP2p = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.latencyDatacenterIdsP2p.push(reader.fixed32());
                        } else
                            message.latencyDatacenterIdsP2p.push(reader.fixed32());
                        break;
                    }
                case 15: {
                        if (!(message.latencyPingMsP2p && message.latencyPingMsP2p.length))
                            message.latencyPingMsP2p = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.latencyPingMsP2p.push(reader.uint32());
                        } else
                            message.latencyPingMsP2p.push(reader.uint32());
                        break;
                    }
                case 4: {
                        message.yourPublicIp = reader.fixed32();
                        break;
                    }
                case 11: {
                        message.yourPublicPort = reader.fixed32();
                        break;
                    }
                case 5: {
                        message.serverTime = reader.fixed32();
                        break;
                    }
                case 6: {
                        message.challenge = reader.fixed64();
                        break;
                    }
                case 7: {
                        message.secondsUntilShutdown = reader.uint32();
                        break;
                    }
                case 8: {
                        message.clientCookie = reader.fixed32();
                        break;
                    }
                case 9: {
                        message.scoringPenaltyRelayCluster = reader.uint32();
                        break;
                    }
                case 12: {
                        message.flags = reader.uint32();
                        break;
                    }
                case 10: {
                        if (!(message.routeExceptions && message.routeExceptions.length))
                            message.routeExceptions = [];
                        message.routeExceptions.push($root.CMsgSteamDatagramRouterPingReply.RouteException.decode(reader, reader.uint32()));
                        break;
                    }
                case 13: {
                        if (!(message.altAddresses && message.altAddresses.length))
                            message.altAddresses = [];
                        message.altAddresses.push($root.CMsgSteamDatagramRouterPingReply.AltAddress.decode(reader, reader.uint32()));
                        break;
                    }
                case 99: {
                        message.dummyPad = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramRouterPingReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramRouterPingReply} CMsgSteamDatagramRouterPingReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramRouterPingReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramRouterPingReply message.
         * @function verify
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramRouterPingReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.clientTimestamp != null && message.hasOwnProperty("clientTimestamp"))
                if (!$util.isInteger(message.clientTimestamp))
                    return "clientTimestamp: integer expected";
            if (message.latencyDatacenterIds != null && message.hasOwnProperty("latencyDatacenterIds")) {
                if (!Array.isArray(message.latencyDatacenterIds))
                    return "latencyDatacenterIds: array expected";
                for (var i = 0; i < message.latencyDatacenterIds.length; ++i)
                    if (!$util.isInteger(message.latencyDatacenterIds[i]))
                        return "latencyDatacenterIds: integer[] expected";
            }
            if (message.latencyPingMs != null && message.hasOwnProperty("latencyPingMs")) {
                if (!Array.isArray(message.latencyPingMs))
                    return "latencyPingMs: array expected";
                for (var i = 0; i < message.latencyPingMs.length; ++i)
                    if (!$util.isInteger(message.latencyPingMs[i]))
                        return "latencyPingMs: integer[] expected";
            }
            if (message.latencyDatacenterIdsP2p != null && message.hasOwnProperty("latencyDatacenterIdsP2p")) {
                if (!Array.isArray(message.latencyDatacenterIdsP2p))
                    return "latencyDatacenterIdsP2p: array expected";
                for (var i = 0; i < message.latencyDatacenterIdsP2p.length; ++i)
                    if (!$util.isInteger(message.latencyDatacenterIdsP2p[i]))
                        return "latencyDatacenterIdsP2p: integer[] expected";
            }
            if (message.latencyPingMsP2p != null && message.hasOwnProperty("latencyPingMsP2p")) {
                if (!Array.isArray(message.latencyPingMsP2p))
                    return "latencyPingMsP2p: array expected";
                for (var i = 0; i < message.latencyPingMsP2p.length; ++i)
                    if (!$util.isInteger(message.latencyPingMsP2p[i]))
                        return "latencyPingMsP2p: integer[] expected";
            }
            if (message.yourPublicIp != null && message.hasOwnProperty("yourPublicIp"))
                if (!$util.isInteger(message.yourPublicIp))
                    return "yourPublicIp: integer expected";
            if (message.yourPublicPort != null && message.hasOwnProperty("yourPublicPort"))
                if (!$util.isInteger(message.yourPublicPort))
                    return "yourPublicPort: integer expected";
            if (message.serverTime != null && message.hasOwnProperty("serverTime"))
                if (!$util.isInteger(message.serverTime))
                    return "serverTime: integer expected";
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (!$util.isInteger(message.challenge) && !(message.challenge && $util.isInteger(message.challenge.low) && $util.isInteger(message.challenge.high)))
                    return "challenge: integer|Long expected";
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                if (!$util.isInteger(message.secondsUntilShutdown))
                    return "secondsUntilShutdown: integer expected";
            if (message.clientCookie != null && message.hasOwnProperty("clientCookie"))
                if (!$util.isInteger(message.clientCookie))
                    return "clientCookie: integer expected";
            if (message.scoringPenaltyRelayCluster != null && message.hasOwnProperty("scoringPenaltyRelayCluster"))
                if (!$util.isInteger(message.scoringPenaltyRelayCluster))
                    return "scoringPenaltyRelayCluster: integer expected";
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.routeExceptions != null && message.hasOwnProperty("routeExceptions")) {
                if (!Array.isArray(message.routeExceptions))
                    return "routeExceptions: array expected";
                for (var i = 0; i < message.routeExceptions.length; ++i) {
                    var error = $root.CMsgSteamDatagramRouterPingReply.RouteException.verify(message.routeExceptions[i]);
                    if (error)
                        return "routeExceptions." + error;
                }
            }
            if (message.altAddresses != null && message.hasOwnProperty("altAddresses")) {
                if (!Array.isArray(message.altAddresses))
                    return "altAddresses: array expected";
                for (var i = 0; i < message.altAddresses.length; ++i) {
                    var error = $root.CMsgSteamDatagramRouterPingReply.AltAddress.verify(message.altAddresses[i]);
                    if (error)
                        return "altAddresses." + error;
                }
            }
            if (message.dummyPad != null && message.hasOwnProperty("dummyPad"))
                if (!(message.dummyPad && typeof message.dummyPad.length === "number" || $util.isString(message.dummyPad)))
                    return "dummyPad: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramRouterPingReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramRouterPingReply} CMsgSteamDatagramRouterPingReply
         */
        CMsgSteamDatagramRouterPingReply.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramRouterPingReply)
                return object;
            var message = new $root.CMsgSteamDatagramRouterPingReply();
            if (object.clientTimestamp != null)
                message.clientTimestamp = object.clientTimestamp >>> 0;
            if (object.latencyDatacenterIds) {
                if (!Array.isArray(object.latencyDatacenterIds))
                    throw TypeError(".CMsgSteamDatagramRouterPingReply.latencyDatacenterIds: array expected");
                message.latencyDatacenterIds = [];
                for (var i = 0; i < object.latencyDatacenterIds.length; ++i)
                    message.latencyDatacenterIds[i] = object.latencyDatacenterIds[i] >>> 0;
            }
            if (object.latencyPingMs) {
                if (!Array.isArray(object.latencyPingMs))
                    throw TypeError(".CMsgSteamDatagramRouterPingReply.latencyPingMs: array expected");
                message.latencyPingMs = [];
                for (var i = 0; i < object.latencyPingMs.length; ++i)
                    message.latencyPingMs[i] = object.latencyPingMs[i] >>> 0;
            }
            if (object.latencyDatacenterIdsP2p) {
                if (!Array.isArray(object.latencyDatacenterIdsP2p))
                    throw TypeError(".CMsgSteamDatagramRouterPingReply.latencyDatacenterIdsP2p: array expected");
                message.latencyDatacenterIdsP2p = [];
                for (var i = 0; i < object.latencyDatacenterIdsP2p.length; ++i)
                    message.latencyDatacenterIdsP2p[i] = object.latencyDatacenterIdsP2p[i] >>> 0;
            }
            if (object.latencyPingMsP2p) {
                if (!Array.isArray(object.latencyPingMsP2p))
                    throw TypeError(".CMsgSteamDatagramRouterPingReply.latencyPingMsP2p: array expected");
                message.latencyPingMsP2p = [];
                for (var i = 0; i < object.latencyPingMsP2p.length; ++i)
                    message.latencyPingMsP2p[i] = object.latencyPingMsP2p[i] >>> 0;
            }
            if (object.yourPublicIp != null)
                message.yourPublicIp = object.yourPublicIp >>> 0;
            if (object.yourPublicPort != null)
                message.yourPublicPort = object.yourPublicPort >>> 0;
            if (object.serverTime != null)
                message.serverTime = object.serverTime >>> 0;
            if (object.challenge != null)
                if ($util.Long)
                    (message.challenge = $util.Long.fromValue(object.challenge)).unsigned = false;
                else if (typeof object.challenge === "string")
                    message.challenge = parseInt(object.challenge, 10);
                else if (typeof object.challenge === "number")
                    message.challenge = object.challenge;
                else if (typeof object.challenge === "object")
                    message.challenge = new $util.LongBits(object.challenge.low >>> 0, object.challenge.high >>> 0).toNumber();
            if (object.secondsUntilShutdown != null)
                message.secondsUntilShutdown = object.secondsUntilShutdown >>> 0;
            if (object.clientCookie != null)
                message.clientCookie = object.clientCookie >>> 0;
            if (object.scoringPenaltyRelayCluster != null)
                message.scoringPenaltyRelayCluster = object.scoringPenaltyRelayCluster >>> 0;
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.routeExceptions) {
                if (!Array.isArray(object.routeExceptions))
                    throw TypeError(".CMsgSteamDatagramRouterPingReply.routeExceptions: array expected");
                message.routeExceptions = [];
                for (var i = 0; i < object.routeExceptions.length; ++i) {
                    if (typeof object.routeExceptions[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramRouterPingReply.routeExceptions: object expected");
                    message.routeExceptions[i] = $root.CMsgSteamDatagramRouterPingReply.RouteException.fromObject(object.routeExceptions[i]);
                }
            }
            if (object.altAddresses) {
                if (!Array.isArray(object.altAddresses))
                    throw TypeError(".CMsgSteamDatagramRouterPingReply.altAddresses: array expected");
                message.altAddresses = [];
                for (var i = 0; i < object.altAddresses.length; ++i) {
                    if (typeof object.altAddresses[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramRouterPingReply.altAddresses: object expected");
                    message.altAddresses[i] = $root.CMsgSteamDatagramRouterPingReply.AltAddress.fromObject(object.altAddresses[i]);
                }
            }
            if (object.dummyPad != null)
                if (typeof object.dummyPad === "string")
                    $util.base64.decode(object.dummyPad, message.dummyPad = $util.newBuffer($util.base64.length(object.dummyPad)), 0);
                else if (object.dummyPad.length >= 0)
                    message.dummyPad = object.dummyPad;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramRouterPingReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {CMsgSteamDatagramRouterPingReply} message CMsgSteamDatagramRouterPingReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramRouterPingReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.latencyDatacenterIds = [];
                object.latencyPingMs = [];
                object.routeExceptions = [];
                object.altAddresses = [];
                object.latencyDatacenterIdsP2p = [];
                object.latencyPingMsP2p = [];
            }
            if (options.defaults) {
                object.clientTimestamp = 0;
                object.yourPublicIp = 0;
                object.serverTime = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.challenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.challenge = options.longs === String ? "0" : 0;
                object.secondsUntilShutdown = 0;
                object.clientCookie = 0;
                object.scoringPenaltyRelayCluster = 0;
                object.yourPublicPort = 0;
                object.flags = 0;
                if (options.bytes === String)
                    object.dummyPad = "";
                else {
                    object.dummyPad = [];
                    if (options.bytes !== Array)
                        object.dummyPad = $util.newBuffer(object.dummyPad);
                }
            }
            if (message.clientTimestamp != null && message.hasOwnProperty("clientTimestamp"))
                object.clientTimestamp = message.clientTimestamp;
            if (message.latencyDatacenterIds && message.latencyDatacenterIds.length) {
                object.latencyDatacenterIds = [];
                for (var j = 0; j < message.latencyDatacenterIds.length; ++j)
                    object.latencyDatacenterIds[j] = message.latencyDatacenterIds[j];
            }
            if (message.latencyPingMs && message.latencyPingMs.length) {
                object.latencyPingMs = [];
                for (var j = 0; j < message.latencyPingMs.length; ++j)
                    object.latencyPingMs[j] = message.latencyPingMs[j];
            }
            if (message.yourPublicIp != null && message.hasOwnProperty("yourPublicIp"))
                object.yourPublicIp = message.yourPublicIp;
            if (message.serverTime != null && message.hasOwnProperty("serverTime"))
                object.serverTime = message.serverTime;
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (typeof message.challenge === "number")
                    object.challenge = options.longs === String ? String(message.challenge) : message.challenge;
                else
                    object.challenge = options.longs === String ? $util.Long.prototype.toString.call(message.challenge) : options.longs === Number ? new $util.LongBits(message.challenge.low >>> 0, message.challenge.high >>> 0).toNumber() : message.challenge;
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                object.secondsUntilShutdown = message.secondsUntilShutdown;
            if (message.clientCookie != null && message.hasOwnProperty("clientCookie"))
                object.clientCookie = message.clientCookie;
            if (message.scoringPenaltyRelayCluster != null && message.hasOwnProperty("scoringPenaltyRelayCluster"))
                object.scoringPenaltyRelayCluster = message.scoringPenaltyRelayCluster;
            if (message.routeExceptions && message.routeExceptions.length) {
                object.routeExceptions = [];
                for (var j = 0; j < message.routeExceptions.length; ++j)
                    object.routeExceptions[j] = $root.CMsgSteamDatagramRouterPingReply.RouteException.toObject(message.routeExceptions[j], options);
            }
            if (message.yourPublicPort != null && message.hasOwnProperty("yourPublicPort"))
                object.yourPublicPort = message.yourPublicPort;
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.altAddresses && message.altAddresses.length) {
                object.altAddresses = [];
                for (var j = 0; j < message.altAddresses.length; ++j)
                    object.altAddresses[j] = $root.CMsgSteamDatagramRouterPingReply.AltAddress.toObject(message.altAddresses[j], options);
            }
            if (message.latencyDatacenterIdsP2p && message.latencyDatacenterIdsP2p.length) {
                object.latencyDatacenterIdsP2p = [];
                for (var j = 0; j < message.latencyDatacenterIdsP2p.length; ++j)
                    object.latencyDatacenterIdsP2p[j] = message.latencyDatacenterIdsP2p[j];
            }
            if (message.latencyPingMsP2p && message.latencyPingMsP2p.length) {
                object.latencyPingMsP2p = [];
                for (var j = 0; j < message.latencyPingMsP2p.length; ++j)
                    object.latencyPingMsP2p[j] = message.latencyPingMsP2p[j];
            }
            if (message.dummyPad != null && message.hasOwnProperty("dummyPad"))
                object.dummyPad = options.bytes === String ? $util.base64.encode(message.dummyPad, 0, message.dummyPad.length) : options.bytes === Array ? Array.prototype.slice.call(message.dummyPad) : message.dummyPad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramRouterPingReply to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramRouterPingReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramRouterPingReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramRouterPingReply
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramRouterPingReply
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramRouterPingReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramRouterPingReply";
        };
    
        CMsgSteamDatagramRouterPingReply.RouteException = (function() {
    
            /**
             * Properties of a RouteException.
             * @memberof CMsgSteamDatagramRouterPingReply
             * @interface IRouteException
             * @property {number|null} [dataCenterId] RouteException dataCenterId
             * @property {number|null} [flags] RouteException flags
             * @property {number|null} [penalty] RouteException penalty
             */
    
            /**
             * Constructs a new RouteException.
             * @memberof CMsgSteamDatagramRouterPingReply
             * @classdesc Represents a RouteException.
             * @implements IRouteException
             * @constructor
             * @param {CMsgSteamDatagramRouterPingReply.IRouteException=} [properties] Properties to set
             */
            function RouteException(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RouteException dataCenterId.
             * @member {number} dataCenterId
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @instance
             */
            RouteException.prototype.dataCenterId = 0;
    
            /**
             * RouteException flags.
             * @member {number} flags
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @instance
             */
            RouteException.prototype.flags = 0;
    
            /**
             * RouteException penalty.
             * @member {number} penalty
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @instance
             */
            RouteException.prototype.penalty = 0;
    
            /**
             * Creates a new RouteException instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IRouteException=} [properties] Properties to set
             * @returns {CMsgSteamDatagramRouterPingReply.RouteException} RouteException instance
             */
            RouteException.create = function create(properties) {
                return new RouteException(properties);
            };
    
            /**
             * Encodes the specified RouteException message. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.RouteException.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IRouteException} message RouteException message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RouteException.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.dataCenterId != null && Object.hasOwnProperty.call(message, "dataCenterId"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.dataCenterId);
                if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.flags);
                if (message.penalty != null && Object.hasOwnProperty.call(message, "penalty"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.penalty);
                return writer;
            };
    
            /**
             * Encodes the specified RouteException message, length delimited. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.RouteException.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IRouteException} message RouteException message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RouteException.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RouteException message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramRouterPingReply.RouteException} RouteException
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RouteException.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramRouterPingReply.RouteException();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.dataCenterId = reader.fixed32();
                            break;
                        }
                    case 2: {
                            message.flags = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.penalty = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RouteException message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramRouterPingReply.RouteException} RouteException
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RouteException.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RouteException message.
             * @function verify
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RouteException.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.dataCenterId != null && message.hasOwnProperty("dataCenterId"))
                    if (!$util.isInteger(message.dataCenterId))
                        return "dataCenterId: integer expected";
                if (message.flags != null && message.hasOwnProperty("flags"))
                    if (!$util.isInteger(message.flags))
                        return "flags: integer expected";
                if (message.penalty != null && message.hasOwnProperty("penalty"))
                    if (!$util.isInteger(message.penalty))
                        return "penalty: integer expected";
                return null;
            };
    
            /**
             * Creates a RouteException message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramRouterPingReply.RouteException} RouteException
             */
            RouteException.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramRouterPingReply.RouteException)
                    return object;
                var message = new $root.CMsgSteamDatagramRouterPingReply.RouteException();
                if (object.dataCenterId != null)
                    message.dataCenterId = object.dataCenterId >>> 0;
                if (object.flags != null)
                    message.flags = object.flags >>> 0;
                if (object.penalty != null)
                    message.penalty = object.penalty >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RouteException message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.RouteException} message RouteException
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RouteException.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.dataCenterId = 0;
                    object.flags = 0;
                    object.penalty = 0;
                }
                if (message.dataCenterId != null && message.hasOwnProperty("dataCenterId"))
                    object.dataCenterId = message.dataCenterId;
                if (message.flags != null && message.hasOwnProperty("flags"))
                    object.flags = message.flags;
                if (message.penalty != null && message.hasOwnProperty("penalty"))
                    object.penalty = message.penalty;
                return object;
            };
    
            /**
             * Converts this RouteException to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RouteException.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for RouteException
             * @function getTypeUrl
             * @memberof CMsgSteamDatagramRouterPingReply.RouteException
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RouteException.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamDatagramRouterPingReply.RouteException";
            };
    
            return RouteException;
        })();
    
        CMsgSteamDatagramRouterPingReply.AltAddress = (function() {
    
            /**
             * Properties of an AltAddress.
             * @memberof CMsgSteamDatagramRouterPingReply
             * @interface IAltAddress
             * @property {number|null} [ipv4] AltAddress ipv4
             * @property {number|null} [port] AltAddress port
             * @property {number|null} [penalty] AltAddress penalty
             * @property {CMsgSteamDatagramRouterPingReply.AltAddress.Protocol|null} [protocol] AltAddress protocol
             * @property {string|null} [id] AltAddress id
             */
    
            /**
             * Constructs a new AltAddress.
             * @memberof CMsgSteamDatagramRouterPingReply
             * @classdesc Represents an AltAddress.
             * @implements IAltAddress
             * @constructor
             * @param {CMsgSteamDatagramRouterPingReply.IAltAddress=} [properties] Properties to set
             */
            function AltAddress(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * AltAddress ipv4.
             * @member {number} ipv4
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             */
            AltAddress.prototype.ipv4 = 0;
    
            /**
             * AltAddress port.
             * @member {number} port
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             */
            AltAddress.prototype.port = 0;
    
            /**
             * AltAddress penalty.
             * @member {number} penalty
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             */
            AltAddress.prototype.penalty = 0;
    
            /**
             * AltAddress protocol.
             * @member {CMsgSteamDatagramRouterPingReply.AltAddress.Protocol} protocol
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             */
            AltAddress.prototype.protocol = 0;
    
            /**
             * AltAddress id.
             * @member {string} id
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             */
            AltAddress.prototype.id = "";
    
            /**
             * Creates a new AltAddress instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IAltAddress=} [properties] Properties to set
             * @returns {CMsgSteamDatagramRouterPingReply.AltAddress} AltAddress instance
             */
            AltAddress.create = function create(properties) {
                return new AltAddress(properties);
            };
    
            /**
             * Encodes the specified AltAddress message. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.AltAddress.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IAltAddress} message AltAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AltAddress.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ipv4 != null && Object.hasOwnProperty.call(message, "ipv4"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.ipv4);
                if (message.port != null && Object.hasOwnProperty.call(message, "port"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.port);
                if (message.penalty != null && Object.hasOwnProperty.call(message, "penalty"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.penalty);
                if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.protocol);
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.id);
                return writer;
            };
    
            /**
             * Encodes the specified AltAddress message, length delimited. Does not implicitly {@link CMsgSteamDatagramRouterPingReply.AltAddress.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.IAltAddress} message AltAddress message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AltAddress.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an AltAddress message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramRouterPingReply.AltAddress} AltAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AltAddress.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramRouterPingReply.AltAddress();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ipv4 = reader.fixed32();
                            break;
                        }
                    case 2: {
                            message.port = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.penalty = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.protocol = reader.int32();
                            break;
                        }
                    case 5: {
                            message.id = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an AltAddress message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramRouterPingReply.AltAddress} AltAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AltAddress.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an AltAddress message.
             * @function verify
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AltAddress.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ipv4 != null && message.hasOwnProperty("ipv4"))
                    if (!$util.isInteger(message.ipv4))
                        return "ipv4: integer expected";
                if (message.port != null && message.hasOwnProperty("port"))
                    if (!$util.isInteger(message.port))
                        return "port: integer expected";
                if (message.penalty != null && message.hasOwnProperty("penalty"))
                    if (!$util.isInteger(message.penalty))
                        return "penalty: integer expected";
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    switch (message.protocol) {
                    default:
                        return "protocol: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                return null;
            };
    
            /**
             * Creates an AltAddress message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramRouterPingReply.AltAddress} AltAddress
             */
            AltAddress.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramRouterPingReply.AltAddress)
                    return object;
                var message = new $root.CMsgSteamDatagramRouterPingReply.AltAddress();
                if (object.ipv4 != null)
                    message.ipv4 = object.ipv4 >>> 0;
                if (object.port != null)
                    message.port = object.port >>> 0;
                if (object.penalty != null)
                    message.penalty = object.penalty >>> 0;
                switch (object.protocol) {
                default:
                    if (typeof object.protocol === "number") {
                        message.protocol = object.protocol;
                        break;
                    }
                    break;
                case "DefaultProtocol":
                case 0:
                    message.protocol = 0;
                    break;
                case "NetworkNext":
                case 1:
                    message.protocol = 1;
                    break;
                }
                if (object.id != null)
                    message.id = String(object.id);
                return message;
            };
    
            /**
             * Creates a plain object from an AltAddress message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {CMsgSteamDatagramRouterPingReply.AltAddress} message AltAddress
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AltAddress.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ipv4 = 0;
                    object.port = 0;
                    object.penalty = 0;
                    object.protocol = options.enums === String ? "DefaultProtocol" : 0;
                    object.id = "";
                }
                if (message.ipv4 != null && message.hasOwnProperty("ipv4"))
                    object.ipv4 = message.ipv4;
                if (message.port != null && message.hasOwnProperty("port"))
                    object.port = message.port;
                if (message.penalty != null && message.hasOwnProperty("penalty"))
                    object.penalty = message.penalty;
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    object.protocol = options.enums === String ? $root.CMsgSteamDatagramRouterPingReply.AltAddress.Protocol[message.protocol] === undefined ? message.protocol : $root.CMsgSteamDatagramRouterPingReply.AltAddress.Protocol[message.protocol] : message.protocol;
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                return object;
            };
    
            /**
             * Converts this AltAddress to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AltAddress.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for AltAddress
             * @function getTypeUrl
             * @memberof CMsgSteamDatagramRouterPingReply.AltAddress
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AltAddress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamDatagramRouterPingReply.AltAddress";
            };
    
            /**
             * Protocol enum.
             * @name CMsgSteamDatagramRouterPingReply.AltAddress.Protocol
             * @enum {number}
             * @property {number} DefaultProtocol=0 DefaultProtocol value
             * @property {number} NetworkNext=1 NetworkNext value
             */
            AltAddress.Protocol = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DefaultProtocol"] = 0;
                values[valuesById[1] = "NetworkNext"] = 1;
                return values;
            })();
    
            return AltAddress;
        })();
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramRouterPingReply.Flags
         * @enum {number}
         * @property {number} FLAG_MAYBE_MORE_DATA_CENTERS=1 FLAG_MAYBE_MORE_DATA_CENTERS value
         * @property {number} FLAG_MAYBE_MORE_ALT_ADDRESSES=2 FLAG_MAYBE_MORE_ALT_ADDRESSES value
         */
        CMsgSteamDatagramRouterPingReply.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "FLAG_MAYBE_MORE_DATA_CENTERS"] = 1;
            values[valuesById[2] = "FLAG_MAYBE_MORE_ALT_ADDRESSES"] = 2;
            return values;
        })();
    
        return CMsgSteamDatagramRouterPingReply;
    })();
    
    $root.CMsgSteamDatagramGameserverPingRequestBody = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameserverPingRequestBody.
         * @exports ICMsgSteamDatagramGameserverPingRequestBody
         * @interface ICMsgSteamDatagramGameserverPingRequestBody
         * @property {number|null} [relayPopid] CMsgSteamDatagramGameserverPingRequestBody relayPopid
         * @property {ICMsgSteamNetworkingIPAddress|null} [yourPublicIp] CMsgSteamDatagramGameserverPingRequestBody yourPublicIp
         * @property {number|null} [yourPublicPort] CMsgSteamDatagramGameserverPingRequestBody yourPublicPort
         * @property {number|Long|null} [relayUnixTime] CMsgSteamDatagramGameserverPingRequestBody relayUnixTime
         * @property {number|Long|null} [routingSecret] CMsgSteamDatagramGameserverPingRequestBody routingSecret
         * @property {Array.<ICMsgSteamNetworkingIPAddress>|null} [myIps] CMsgSteamDatagramGameserverPingRequestBody myIps
         * @property {Uint8Array|null} [echo] CMsgSteamDatagramGameserverPingRequestBody echo
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameserverPingRequestBody.
         * @exports CMsgSteamDatagramGameserverPingRequestBody
         * @classdesc Represents a CMsgSteamDatagramGameserverPingRequestBody.
         * @implements ICMsgSteamDatagramGameserverPingRequestBody
         * @constructor
         * @param {ICMsgSteamDatagramGameserverPingRequestBody=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameserverPingRequestBody(properties) {
            this.myIps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameserverPingRequestBody relayPopid.
         * @member {number} relayPopid
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestBody.prototype.relayPopid = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestBody yourPublicIp.
         * @member {ICMsgSteamNetworkingIPAddress|null|undefined} yourPublicIp
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestBody.prototype.yourPublicIp = null;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestBody yourPublicPort.
         * @member {number} yourPublicPort
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestBody.prototype.yourPublicPort = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestBody relayUnixTime.
         * @member {number|Long} relayUnixTime
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestBody.prototype.relayUnixTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestBody routingSecret.
         * @member {number|Long} routingSecret
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestBody.prototype.routingSecret = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestBody myIps.
         * @member {Array.<ICMsgSteamNetworkingIPAddress>} myIps
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestBody.prototype.myIps = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestBody echo.
         * @member {Uint8Array} echo
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestBody.prototype.echo = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramGameserverPingRequestBody instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @static
         * @param {ICMsgSteamDatagramGameserverPingRequestBody=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameserverPingRequestBody} CMsgSteamDatagramGameserverPingRequestBody instance
         */
        CMsgSteamDatagramGameserverPingRequestBody.create = function create(properties) {
            return new CMsgSteamDatagramGameserverPingRequestBody(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverPingRequestBody message. Does not implicitly {@link CMsgSteamDatagramGameserverPingRequestBody.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @static
         * @param {ICMsgSteamDatagramGameserverPingRequestBody} message CMsgSteamDatagramGameserverPingRequestBody message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverPingRequestBody.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.relayPopid != null && Object.hasOwnProperty.call(message, "relayPopid"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.relayPopid);
            if (message.yourPublicIp != null && Object.hasOwnProperty.call(message, "yourPublicIp"))
                $root.CMsgSteamNetworkingIPAddress.encode(message.yourPublicIp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.yourPublicPort != null && Object.hasOwnProperty.call(message, "yourPublicPort"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.yourPublicPort);
            if (message.relayUnixTime != null && Object.hasOwnProperty.call(message, "relayUnixTime"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.relayUnixTime);
            if (message.routingSecret != null && Object.hasOwnProperty.call(message, "routingSecret"))
                writer.uint32(/* id 5, wireType 1 =*/41).fixed64(message.routingSecret);
            if (message.myIps != null && message.myIps.length)
                for (var i = 0; i < message.myIps.length; ++i)
                    $root.CMsgSteamNetworkingIPAddress.encode(message.myIps[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.echo != null && Object.hasOwnProperty.call(message, "echo"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.echo);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverPingRequestBody message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameserverPingRequestBody.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @static
         * @param {ICMsgSteamDatagramGameserverPingRequestBody} message CMsgSteamDatagramGameserverPingRequestBody message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverPingRequestBody.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverPingRequestBody message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameserverPingRequestBody} CMsgSteamDatagramGameserverPingRequestBody
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverPingRequestBody.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameserverPingRequestBody();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.relayPopid = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.yourPublicIp = $root.CMsgSteamNetworkingIPAddress.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.yourPublicPort = reader.uint32();
                        break;
                    }
                case 4: {
                        message.relayUnixTime = reader.uint64();
                        break;
                    }
                case 5: {
                        message.routingSecret = reader.fixed64();
                        break;
                    }
                case 6: {
                        if (!(message.myIps && message.myIps.length))
                            message.myIps = [];
                        message.myIps.push($root.CMsgSteamNetworkingIPAddress.decode(reader, reader.uint32()));
                        break;
                    }
                case 8: {
                        message.echo = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverPingRequestBody message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameserverPingRequestBody} CMsgSteamDatagramGameserverPingRequestBody
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverPingRequestBody.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameserverPingRequestBody message.
         * @function verify
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameserverPingRequestBody.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.relayPopid != null && message.hasOwnProperty("relayPopid"))
                if (!$util.isInteger(message.relayPopid))
                    return "relayPopid: integer expected";
            if (message.yourPublicIp != null && message.hasOwnProperty("yourPublicIp")) {
                var error = $root.CMsgSteamNetworkingIPAddress.verify(message.yourPublicIp);
                if (error)
                    return "yourPublicIp." + error;
            }
            if (message.yourPublicPort != null && message.hasOwnProperty("yourPublicPort"))
                if (!$util.isInteger(message.yourPublicPort))
                    return "yourPublicPort: integer expected";
            if (message.relayUnixTime != null && message.hasOwnProperty("relayUnixTime"))
                if (!$util.isInteger(message.relayUnixTime) && !(message.relayUnixTime && $util.isInteger(message.relayUnixTime.low) && $util.isInteger(message.relayUnixTime.high)))
                    return "relayUnixTime: integer|Long expected";
            if (message.routingSecret != null && message.hasOwnProperty("routingSecret"))
                if (!$util.isInteger(message.routingSecret) && !(message.routingSecret && $util.isInteger(message.routingSecret.low) && $util.isInteger(message.routingSecret.high)))
                    return "routingSecret: integer|Long expected";
            if (message.myIps != null && message.hasOwnProperty("myIps")) {
                if (!Array.isArray(message.myIps))
                    return "myIps: array expected";
                for (var i = 0; i < message.myIps.length; ++i) {
                    var error = $root.CMsgSteamNetworkingIPAddress.verify(message.myIps[i]);
                    if (error)
                        return "myIps." + error;
                }
            }
            if (message.echo != null && message.hasOwnProperty("echo"))
                if (!(message.echo && typeof message.echo.length === "number" || $util.isString(message.echo)))
                    return "echo: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameserverPingRequestBody message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameserverPingRequestBody} CMsgSteamDatagramGameserverPingRequestBody
         */
        CMsgSteamDatagramGameserverPingRequestBody.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameserverPingRequestBody)
                return object;
            var message = new $root.CMsgSteamDatagramGameserverPingRequestBody();
            if (object.relayPopid != null)
                message.relayPopid = object.relayPopid >>> 0;
            if (object.yourPublicIp != null) {
                if (typeof object.yourPublicIp !== "object")
                    throw TypeError(".CMsgSteamDatagramGameserverPingRequestBody.yourPublicIp: object expected");
                message.yourPublicIp = $root.CMsgSteamNetworkingIPAddress.fromObject(object.yourPublicIp);
            }
            if (object.yourPublicPort != null)
                message.yourPublicPort = object.yourPublicPort >>> 0;
            if (object.relayUnixTime != null)
                if ($util.Long)
                    (message.relayUnixTime = $util.Long.fromValue(object.relayUnixTime)).unsigned = true;
                else if (typeof object.relayUnixTime === "string")
                    message.relayUnixTime = parseInt(object.relayUnixTime, 10);
                else if (typeof object.relayUnixTime === "number")
                    message.relayUnixTime = object.relayUnixTime;
                else if (typeof object.relayUnixTime === "object")
                    message.relayUnixTime = new $util.LongBits(object.relayUnixTime.low >>> 0, object.relayUnixTime.high >>> 0).toNumber(true);
            if (object.routingSecret != null)
                if ($util.Long)
                    (message.routingSecret = $util.Long.fromValue(object.routingSecret)).unsigned = false;
                else if (typeof object.routingSecret === "string")
                    message.routingSecret = parseInt(object.routingSecret, 10);
                else if (typeof object.routingSecret === "number")
                    message.routingSecret = object.routingSecret;
                else if (typeof object.routingSecret === "object")
                    message.routingSecret = new $util.LongBits(object.routingSecret.low >>> 0, object.routingSecret.high >>> 0).toNumber();
            if (object.myIps) {
                if (!Array.isArray(object.myIps))
                    throw TypeError(".CMsgSteamDatagramGameserverPingRequestBody.myIps: array expected");
                message.myIps = [];
                for (var i = 0; i < object.myIps.length; ++i) {
                    if (typeof object.myIps[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramGameserverPingRequestBody.myIps: object expected");
                    message.myIps[i] = $root.CMsgSteamNetworkingIPAddress.fromObject(object.myIps[i]);
                }
            }
            if (object.echo != null)
                if (typeof object.echo === "string")
                    $util.base64.decode(object.echo, message.echo = $util.newBuffer($util.base64.length(object.echo)), 0);
                else if (object.echo.length >= 0)
                    message.echo = object.echo;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameserverPingRequestBody message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @static
         * @param {CMsgSteamDatagramGameserverPingRequestBody} message CMsgSteamDatagramGameserverPingRequestBody
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameserverPingRequestBody.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.myIps = [];
            if (options.defaults) {
                object.relayPopid = 0;
                object.yourPublicIp = null;
                object.yourPublicPort = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.relayUnixTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.relayUnixTime = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.routingSecret = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.routingSecret = options.longs === String ? "0" : 0;
                if (options.bytes === String)
                    object.echo = "";
                else {
                    object.echo = [];
                    if (options.bytes !== Array)
                        object.echo = $util.newBuffer(object.echo);
                }
            }
            if (message.relayPopid != null && message.hasOwnProperty("relayPopid"))
                object.relayPopid = message.relayPopid;
            if (message.yourPublicIp != null && message.hasOwnProperty("yourPublicIp"))
                object.yourPublicIp = $root.CMsgSteamNetworkingIPAddress.toObject(message.yourPublicIp, options);
            if (message.yourPublicPort != null && message.hasOwnProperty("yourPublicPort"))
                object.yourPublicPort = message.yourPublicPort;
            if (message.relayUnixTime != null && message.hasOwnProperty("relayUnixTime"))
                if (typeof message.relayUnixTime === "number")
                    object.relayUnixTime = options.longs === String ? String(message.relayUnixTime) : message.relayUnixTime;
                else
                    object.relayUnixTime = options.longs === String ? $util.Long.prototype.toString.call(message.relayUnixTime) : options.longs === Number ? new $util.LongBits(message.relayUnixTime.low >>> 0, message.relayUnixTime.high >>> 0).toNumber(true) : message.relayUnixTime;
            if (message.routingSecret != null && message.hasOwnProperty("routingSecret"))
                if (typeof message.routingSecret === "number")
                    object.routingSecret = options.longs === String ? String(message.routingSecret) : message.routingSecret;
                else
                    object.routingSecret = options.longs === String ? $util.Long.prototype.toString.call(message.routingSecret) : options.longs === Number ? new $util.LongBits(message.routingSecret.low >>> 0, message.routingSecret.high >>> 0).toNumber() : message.routingSecret;
            if (message.myIps && message.myIps.length) {
                object.myIps = [];
                for (var j = 0; j < message.myIps.length; ++j)
                    object.myIps[j] = $root.CMsgSteamNetworkingIPAddress.toObject(message.myIps[j], options);
            }
            if (message.echo != null && message.hasOwnProperty("echo"))
                object.echo = options.bytes === String ? $util.base64.encode(message.echo, 0, message.echo.length) : options.bytes === Array ? Array.prototype.slice.call(message.echo) : message.echo;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameserverPingRequestBody to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameserverPingRequestBody.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramGameserverPingRequestBody
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramGameserverPingRequestBody
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramGameserverPingRequestBody.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramGameserverPingRequestBody";
        };
    
        return CMsgSteamDatagramGameserverPingRequestBody;
    })();
    
    $root.CMsgSteamDatagramGameserverPingRequestEnvelope = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameserverPingRequestEnvelope.
         * @exports ICMsgSteamDatagramGameserverPingRequestEnvelope
         * @interface ICMsgSteamDatagramGameserverPingRequestEnvelope
         * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] CMsgSteamDatagramGameserverPingRequestEnvelope cert
         * @property {Uint8Array|null} [signedData] CMsgSteamDatagramGameserverPingRequestEnvelope signedData
         * @property {Uint8Array|null} [signature] CMsgSteamDatagramGameserverPingRequestEnvelope signature
         * @property {number|null} [legacyYourPublicIp] CMsgSteamDatagramGameserverPingRequestEnvelope legacyYourPublicIp
         * @property {number|null} [legacyYourPublicPort] CMsgSteamDatagramGameserverPingRequestEnvelope legacyYourPublicPort
         * @property {number|null} [legacyRelayUnixTime] CMsgSteamDatagramGameserverPingRequestEnvelope legacyRelayUnixTime
         * @property {number|Long|null} [legacyChallenge] CMsgSteamDatagramGameserverPingRequestEnvelope legacyChallenge
         * @property {number|null} [legacyRouterTimestamp] CMsgSteamDatagramGameserverPingRequestEnvelope legacyRouterTimestamp
         * @property {Uint8Array|null} [dummyPad] CMsgSteamDatagramGameserverPingRequestEnvelope dummyPad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameserverPingRequestEnvelope.
         * @exports CMsgSteamDatagramGameserverPingRequestEnvelope
         * @classdesc Represents a CMsgSteamDatagramGameserverPingRequestEnvelope.
         * @implements ICMsgSteamDatagramGameserverPingRequestEnvelope
         * @constructor
         * @param {ICMsgSteamDatagramGameserverPingRequestEnvelope=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameserverPingRequestEnvelope(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameserverPingRequestEnvelope cert.
         * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.prototype.cert = null;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestEnvelope signedData.
         * @member {Uint8Array} signedData
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.prototype.signedData = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramGameserverPingRequestEnvelope signature.
         * @member {Uint8Array} signature
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.prototype.signature = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramGameserverPingRequestEnvelope legacyYourPublicIp.
         * @member {number} legacyYourPublicIp
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.prototype.legacyYourPublicIp = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestEnvelope legacyYourPublicPort.
         * @member {number} legacyYourPublicPort
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.prototype.legacyYourPublicPort = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestEnvelope legacyRelayUnixTime.
         * @member {number} legacyRelayUnixTime
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.prototype.legacyRelayUnixTime = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestEnvelope legacyChallenge.
         * @member {number|Long} legacyChallenge
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.prototype.legacyChallenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestEnvelope legacyRouterTimestamp.
         * @member {number} legacyRouterTimestamp
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.prototype.legacyRouterTimestamp = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingRequestEnvelope dummyPad.
         * @member {Uint8Array} dummyPad
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @instance
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.prototype.dummyPad = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramGameserverPingRequestEnvelope instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @static
         * @param {ICMsgSteamDatagramGameserverPingRequestEnvelope=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameserverPingRequestEnvelope} CMsgSteamDatagramGameserverPingRequestEnvelope instance
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.create = function create(properties) {
            return new CMsgSteamDatagramGameserverPingRequestEnvelope(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverPingRequestEnvelope message. Does not implicitly {@link CMsgSteamDatagramGameserverPingRequestEnvelope.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @static
         * @param {ICMsgSteamDatagramGameserverPingRequestEnvelope} message CMsgSteamDatagramGameserverPingRequestEnvelope message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.legacyYourPublicIp != null && Object.hasOwnProperty.call(message, "legacyYourPublicIp"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.legacyYourPublicIp);
            if (message.legacyRelayUnixTime != null && Object.hasOwnProperty.call(message, "legacyRelayUnixTime"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.legacyRelayUnixTime);
            if (message.legacyChallenge != null && Object.hasOwnProperty.call(message, "legacyChallenge"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.legacyChallenge);
            if (message.legacyRouterTimestamp != null && Object.hasOwnProperty.call(message, "legacyRouterTimestamp"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.legacyRouterTimestamp);
            if (message.legacyYourPublicPort != null && Object.hasOwnProperty.call(message, "legacyYourPublicPort"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.legacyYourPublicPort);
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.signedData != null && Object.hasOwnProperty.call(message, "signedData"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.signedData);
            if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.signature);
            if (message.dummyPad != null && Object.hasOwnProperty.call(message, "dummyPad"))
                writer.uint32(/* id 1023, wireType 2 =*/8186).bytes(message.dummyPad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverPingRequestEnvelope message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameserverPingRequestEnvelope.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @static
         * @param {ICMsgSteamDatagramGameserverPingRequestEnvelope} message CMsgSteamDatagramGameserverPingRequestEnvelope message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverPingRequestEnvelope message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameserverPingRequestEnvelope} CMsgSteamDatagramGameserverPingRequestEnvelope
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameserverPingRequestEnvelope();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 6: {
                        message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                        break;
                    }
                case 7: {
                        message.signedData = reader.bytes();
                        break;
                    }
                case 8: {
                        message.signature = reader.bytes();
                        break;
                    }
                case 1: {
                        message.legacyYourPublicIp = reader.fixed32();
                        break;
                    }
                case 5: {
                        message.legacyYourPublicPort = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.legacyRelayUnixTime = reader.fixed32();
                        break;
                    }
                case 3: {
                        message.legacyChallenge = reader.fixed64();
                        break;
                    }
                case 4: {
                        message.legacyRouterTimestamp = reader.fixed32();
                        break;
                    }
                case 1023: {
                        message.dummyPad = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverPingRequestEnvelope message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameserverPingRequestEnvelope} CMsgSteamDatagramGameserverPingRequestEnvelope
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameserverPingRequestEnvelope message.
         * @function verify
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            if (message.signedData != null && message.hasOwnProperty("signedData"))
                if (!(message.signedData && typeof message.signedData.length === "number" || $util.isString(message.signedData)))
                    return "signedData: buffer expected";
            if (message.signature != null && message.hasOwnProperty("signature"))
                if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                    return "signature: buffer expected";
            if (message.legacyYourPublicIp != null && message.hasOwnProperty("legacyYourPublicIp"))
                if (!$util.isInteger(message.legacyYourPublicIp))
                    return "legacyYourPublicIp: integer expected";
            if (message.legacyYourPublicPort != null && message.hasOwnProperty("legacyYourPublicPort"))
                if (!$util.isInteger(message.legacyYourPublicPort))
                    return "legacyYourPublicPort: integer expected";
            if (message.legacyRelayUnixTime != null && message.hasOwnProperty("legacyRelayUnixTime"))
                if (!$util.isInteger(message.legacyRelayUnixTime))
                    return "legacyRelayUnixTime: integer expected";
            if (message.legacyChallenge != null && message.hasOwnProperty("legacyChallenge"))
                if (!$util.isInteger(message.legacyChallenge) && !(message.legacyChallenge && $util.isInteger(message.legacyChallenge.low) && $util.isInteger(message.legacyChallenge.high)))
                    return "legacyChallenge: integer|Long expected";
            if (message.legacyRouterTimestamp != null && message.hasOwnProperty("legacyRouterTimestamp"))
                if (!$util.isInteger(message.legacyRouterTimestamp))
                    return "legacyRouterTimestamp: integer expected";
            if (message.dummyPad != null && message.hasOwnProperty("dummyPad"))
                if (!(message.dummyPad && typeof message.dummyPad.length === "number" || $util.isString(message.dummyPad)))
                    return "dummyPad: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameserverPingRequestEnvelope message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameserverPingRequestEnvelope} CMsgSteamDatagramGameserverPingRequestEnvelope
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameserverPingRequestEnvelope)
                return object;
            var message = new $root.CMsgSteamDatagramGameserverPingRequestEnvelope();
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramGameserverPingRequestEnvelope.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
            }
            if (object.signedData != null)
                if (typeof object.signedData === "string")
                    $util.base64.decode(object.signedData, message.signedData = $util.newBuffer($util.base64.length(object.signedData)), 0);
                else if (object.signedData.length >= 0)
                    message.signedData = object.signedData;
            if (object.signature != null)
                if (typeof object.signature === "string")
                    $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                else if (object.signature.length >= 0)
                    message.signature = object.signature;
            if (object.legacyYourPublicIp != null)
                message.legacyYourPublicIp = object.legacyYourPublicIp >>> 0;
            if (object.legacyYourPublicPort != null)
                message.legacyYourPublicPort = object.legacyYourPublicPort >>> 0;
            if (object.legacyRelayUnixTime != null)
                message.legacyRelayUnixTime = object.legacyRelayUnixTime >>> 0;
            if (object.legacyChallenge != null)
                if ($util.Long)
                    (message.legacyChallenge = $util.Long.fromValue(object.legacyChallenge)).unsigned = false;
                else if (typeof object.legacyChallenge === "string")
                    message.legacyChallenge = parseInt(object.legacyChallenge, 10);
                else if (typeof object.legacyChallenge === "number")
                    message.legacyChallenge = object.legacyChallenge;
                else if (typeof object.legacyChallenge === "object")
                    message.legacyChallenge = new $util.LongBits(object.legacyChallenge.low >>> 0, object.legacyChallenge.high >>> 0).toNumber();
            if (object.legacyRouterTimestamp != null)
                message.legacyRouterTimestamp = object.legacyRouterTimestamp >>> 0;
            if (object.dummyPad != null)
                if (typeof object.dummyPad === "string")
                    $util.base64.decode(object.dummyPad, message.dummyPad = $util.newBuffer($util.base64.length(object.dummyPad)), 0);
                else if (object.dummyPad.length >= 0)
                    message.dummyPad = object.dummyPad;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameserverPingRequestEnvelope message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @static
         * @param {CMsgSteamDatagramGameserverPingRequestEnvelope} message CMsgSteamDatagramGameserverPingRequestEnvelope
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.legacyYourPublicIp = 0;
                object.legacyRelayUnixTime = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacyChallenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacyChallenge = options.longs === String ? "0" : 0;
                object.legacyRouterTimestamp = 0;
                object.legacyYourPublicPort = 0;
                object.cert = null;
                if (options.bytes === String)
                    object.signedData = "";
                else {
                    object.signedData = [];
                    if (options.bytes !== Array)
                        object.signedData = $util.newBuffer(object.signedData);
                }
                if (options.bytes === String)
                    object.signature = "";
                else {
                    object.signature = [];
                    if (options.bytes !== Array)
                        object.signature = $util.newBuffer(object.signature);
                }
                if (options.bytes === String)
                    object.dummyPad = "";
                else {
                    object.dummyPad = [];
                    if (options.bytes !== Array)
                        object.dummyPad = $util.newBuffer(object.dummyPad);
                }
            }
            if (message.legacyYourPublicIp != null && message.hasOwnProperty("legacyYourPublicIp"))
                object.legacyYourPublicIp = message.legacyYourPublicIp;
            if (message.legacyRelayUnixTime != null && message.hasOwnProperty("legacyRelayUnixTime"))
                object.legacyRelayUnixTime = message.legacyRelayUnixTime;
            if (message.legacyChallenge != null && message.hasOwnProperty("legacyChallenge"))
                if (typeof message.legacyChallenge === "number")
                    object.legacyChallenge = options.longs === String ? String(message.legacyChallenge) : message.legacyChallenge;
                else
                    object.legacyChallenge = options.longs === String ? $util.Long.prototype.toString.call(message.legacyChallenge) : options.longs === Number ? new $util.LongBits(message.legacyChallenge.low >>> 0, message.legacyChallenge.high >>> 0).toNumber() : message.legacyChallenge;
            if (message.legacyRouterTimestamp != null && message.hasOwnProperty("legacyRouterTimestamp"))
                object.legacyRouterTimestamp = message.legacyRouterTimestamp;
            if (message.legacyYourPublicPort != null && message.hasOwnProperty("legacyYourPublicPort"))
                object.legacyYourPublicPort = message.legacyYourPublicPort;
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
            if (message.signedData != null && message.hasOwnProperty("signedData"))
                object.signedData = options.bytes === String ? $util.base64.encode(message.signedData, 0, message.signedData.length) : options.bytes === Array ? Array.prototype.slice.call(message.signedData) : message.signedData;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
            if (message.dummyPad != null && message.hasOwnProperty("dummyPad"))
                object.dummyPad = options.bytes === String ? $util.base64.encode(message.dummyPad, 0, message.dummyPad.length) : options.bytes === Array ? Array.prototype.slice.call(message.dummyPad) : message.dummyPad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameserverPingRequestEnvelope to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramGameserverPingRequestEnvelope
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramGameserverPingRequestEnvelope
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramGameserverPingRequestEnvelope.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramGameserverPingRequestEnvelope";
        };
    
        return CMsgSteamDatagramGameserverPingRequestEnvelope;
    })();
    
    $root.CMsgSteamDatagramGameserverPingReplyData = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameserverPingReplyData.
         * @exports ICMsgSteamDatagramGameserverPingReplyData
         * @interface ICMsgSteamDatagramGameserverPingReplyData
         * @property {number|null} [echoRelayUnixTime] CMsgSteamDatagramGameserverPingReplyData echoRelayUnixTime
         * @property {Uint8Array|null} [echo] CMsgSteamDatagramGameserverPingReplyData echo
         * @property {number|Long|null} [legacyChallenge] CMsgSteamDatagramGameserverPingReplyData legacyChallenge
         * @property {number|null} [legacyRouterTimestamp] CMsgSteamDatagramGameserverPingReplyData legacyRouterTimestamp
         * @property {number|null} [dataCenterId] CMsgSteamDatagramGameserverPingReplyData dataCenterId
         * @property {number|null} [appid] CMsgSteamDatagramGameserverPingReplyData appid
         * @property {number|null} [protocolVersion] CMsgSteamDatagramGameserverPingReplyData protocolVersion
         * @property {string|null} [build] CMsgSteamDatagramGameserverPingReplyData build
         * @property {number|Long|null} [networkConfigVersion] CMsgSteamDatagramGameserverPingReplyData networkConfigVersion
         * @property {number|null} [myUnixTime] CMsgSteamDatagramGameserverPingReplyData myUnixTime
         * @property {Uint8Array|null} [routingBlob] CMsgSteamDatagramGameserverPingReplyData routingBlob
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameserverPingReplyData.
         * @exports CMsgSteamDatagramGameserverPingReplyData
         * @classdesc Represents a CMsgSteamDatagramGameserverPingReplyData.
         * @implements ICMsgSteamDatagramGameserverPingReplyData
         * @constructor
         * @param {ICMsgSteamDatagramGameserverPingReplyData=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameserverPingReplyData(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData echoRelayUnixTime.
         * @member {number} echoRelayUnixTime
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.echoRelayUnixTime = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData echo.
         * @member {Uint8Array} echo
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.echo = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData legacyChallenge.
         * @member {number|Long} legacyChallenge
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.legacyChallenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData legacyRouterTimestamp.
         * @member {number} legacyRouterTimestamp
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.legacyRouterTimestamp = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData dataCenterId.
         * @member {number} dataCenterId
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.dataCenterId = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData appid.
         * @member {number} appid
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.appid = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData protocolVersion.
         * @member {number} protocolVersion
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.protocolVersion = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData build.
         * @member {string} build
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.build = "";
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData networkConfigVersion.
         * @member {number|Long} networkConfigVersion
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.networkConfigVersion = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData myUnixTime.
         * @member {number} myUnixTime
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.myUnixTime = 0;
    
        /**
         * CMsgSteamDatagramGameserverPingReplyData routingBlob.
         * @member {Uint8Array} routingBlob
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.routingBlob = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramGameserverPingReplyData instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @static
         * @param {ICMsgSteamDatagramGameserverPingReplyData=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameserverPingReplyData} CMsgSteamDatagramGameserverPingReplyData instance
         */
        CMsgSteamDatagramGameserverPingReplyData.create = function create(properties) {
            return new CMsgSteamDatagramGameserverPingReplyData(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverPingReplyData message. Does not implicitly {@link CMsgSteamDatagramGameserverPingReplyData.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @static
         * @param {ICMsgSteamDatagramGameserverPingReplyData} message CMsgSteamDatagramGameserverPingReplyData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverPingReplyData.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.echoRelayUnixTime != null && Object.hasOwnProperty.call(message, "echoRelayUnixTime"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.echoRelayUnixTime);
            if (message.legacyChallenge != null && Object.hasOwnProperty.call(message, "legacyChallenge"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.legacyChallenge);
            if (message.legacyRouterTimestamp != null && Object.hasOwnProperty.call(message, "legacyRouterTimestamp"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.legacyRouterTimestamp);
            if (message.dataCenterId != null && Object.hasOwnProperty.call(message, "dataCenterId"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.dataCenterId);
            if (message.appid != null && Object.hasOwnProperty.call(message, "appid"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.appid);
            if (message.protocolVersion != null && Object.hasOwnProperty.call(message, "protocolVersion"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.protocolVersion);
            if (message.echo != null && Object.hasOwnProperty.call(message, "echo"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.echo);
            if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.build);
            if (message.networkConfigVersion != null && Object.hasOwnProperty.call(message, "networkConfigVersion"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.networkConfigVersion);
            if (message.myUnixTime != null && Object.hasOwnProperty.call(message, "myUnixTime"))
                writer.uint32(/* id 11, wireType 5 =*/93).fixed32(message.myUnixTime);
            if (message.routingBlob != null && Object.hasOwnProperty.call(message, "routingBlob"))
                writer.uint32(/* id 12, wireType 2 =*/98).bytes(message.routingBlob);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverPingReplyData message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameserverPingReplyData.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @static
         * @param {ICMsgSteamDatagramGameserverPingReplyData} message CMsgSteamDatagramGameserverPingReplyData message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverPingReplyData.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverPingReplyData message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameserverPingReplyData} CMsgSteamDatagramGameserverPingReplyData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverPingReplyData.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameserverPingReplyData();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2: {
                        message.echoRelayUnixTime = reader.fixed32();
                        break;
                    }
                case 8: {
                        message.echo = reader.bytes();
                        break;
                    }
                case 3: {
                        message.legacyChallenge = reader.fixed64();
                        break;
                    }
                case 4: {
                        message.legacyRouterTimestamp = reader.fixed32();
                        break;
                    }
                case 5: {
                        message.dataCenterId = reader.fixed32();
                        break;
                    }
                case 6: {
                        message.appid = reader.uint32();
                        break;
                    }
                case 7: {
                        message.protocolVersion = reader.uint32();
                        break;
                    }
                case 9: {
                        message.build = reader.string();
                        break;
                    }
                case 10: {
                        message.networkConfigVersion = reader.uint64();
                        break;
                    }
                case 11: {
                        message.myUnixTime = reader.fixed32();
                        break;
                    }
                case 12: {
                        message.routingBlob = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverPingReplyData message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameserverPingReplyData} CMsgSteamDatagramGameserverPingReplyData
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverPingReplyData.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameserverPingReplyData message.
         * @function verify
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameserverPingReplyData.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.echoRelayUnixTime != null && message.hasOwnProperty("echoRelayUnixTime"))
                if (!$util.isInteger(message.echoRelayUnixTime))
                    return "echoRelayUnixTime: integer expected";
            if (message.echo != null && message.hasOwnProperty("echo"))
                if (!(message.echo && typeof message.echo.length === "number" || $util.isString(message.echo)))
                    return "echo: buffer expected";
            if (message.legacyChallenge != null && message.hasOwnProperty("legacyChallenge"))
                if (!$util.isInteger(message.legacyChallenge) && !(message.legacyChallenge && $util.isInteger(message.legacyChallenge.low) && $util.isInteger(message.legacyChallenge.high)))
                    return "legacyChallenge: integer|Long expected";
            if (message.legacyRouterTimestamp != null && message.hasOwnProperty("legacyRouterTimestamp"))
                if (!$util.isInteger(message.legacyRouterTimestamp))
                    return "legacyRouterTimestamp: integer expected";
            if (message.dataCenterId != null && message.hasOwnProperty("dataCenterId"))
                if (!$util.isInteger(message.dataCenterId))
                    return "dataCenterId: integer expected";
            if (message.appid != null && message.hasOwnProperty("appid"))
                if (!$util.isInteger(message.appid))
                    return "appid: integer expected";
            if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
                if (!$util.isInteger(message.protocolVersion))
                    return "protocolVersion: integer expected";
            if (message.build != null && message.hasOwnProperty("build"))
                if (!$util.isString(message.build))
                    return "build: string expected";
            if (message.networkConfigVersion != null && message.hasOwnProperty("networkConfigVersion"))
                if (!$util.isInteger(message.networkConfigVersion) && !(message.networkConfigVersion && $util.isInteger(message.networkConfigVersion.low) && $util.isInteger(message.networkConfigVersion.high)))
                    return "networkConfigVersion: integer|Long expected";
            if (message.myUnixTime != null && message.hasOwnProperty("myUnixTime"))
                if (!$util.isInteger(message.myUnixTime))
                    return "myUnixTime: integer expected";
            if (message.routingBlob != null && message.hasOwnProperty("routingBlob"))
                if (!(message.routingBlob && typeof message.routingBlob.length === "number" || $util.isString(message.routingBlob)))
                    return "routingBlob: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameserverPingReplyData message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameserverPingReplyData} CMsgSteamDatagramGameserverPingReplyData
         */
        CMsgSteamDatagramGameserverPingReplyData.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameserverPingReplyData)
                return object;
            var message = new $root.CMsgSteamDatagramGameserverPingReplyData();
            if (object.echoRelayUnixTime != null)
                message.echoRelayUnixTime = object.echoRelayUnixTime >>> 0;
            if (object.echo != null)
                if (typeof object.echo === "string")
                    $util.base64.decode(object.echo, message.echo = $util.newBuffer($util.base64.length(object.echo)), 0);
                else if (object.echo.length >= 0)
                    message.echo = object.echo;
            if (object.legacyChallenge != null)
                if ($util.Long)
                    (message.legacyChallenge = $util.Long.fromValue(object.legacyChallenge)).unsigned = false;
                else if (typeof object.legacyChallenge === "string")
                    message.legacyChallenge = parseInt(object.legacyChallenge, 10);
                else if (typeof object.legacyChallenge === "number")
                    message.legacyChallenge = object.legacyChallenge;
                else if (typeof object.legacyChallenge === "object")
                    message.legacyChallenge = new $util.LongBits(object.legacyChallenge.low >>> 0, object.legacyChallenge.high >>> 0).toNumber();
            if (object.legacyRouterTimestamp != null)
                message.legacyRouterTimestamp = object.legacyRouterTimestamp >>> 0;
            if (object.dataCenterId != null)
                message.dataCenterId = object.dataCenterId >>> 0;
            if (object.appid != null)
                message.appid = object.appid >>> 0;
            if (object.protocolVersion != null)
                message.protocolVersion = object.protocolVersion >>> 0;
            if (object.build != null)
                message.build = String(object.build);
            if (object.networkConfigVersion != null)
                if ($util.Long)
                    (message.networkConfigVersion = $util.Long.fromValue(object.networkConfigVersion)).unsigned = true;
                else if (typeof object.networkConfigVersion === "string")
                    message.networkConfigVersion = parseInt(object.networkConfigVersion, 10);
                else if (typeof object.networkConfigVersion === "number")
                    message.networkConfigVersion = object.networkConfigVersion;
                else if (typeof object.networkConfigVersion === "object")
                    message.networkConfigVersion = new $util.LongBits(object.networkConfigVersion.low >>> 0, object.networkConfigVersion.high >>> 0).toNumber(true);
            if (object.myUnixTime != null)
                message.myUnixTime = object.myUnixTime >>> 0;
            if (object.routingBlob != null)
                if (typeof object.routingBlob === "string")
                    $util.base64.decode(object.routingBlob, message.routingBlob = $util.newBuffer($util.base64.length(object.routingBlob)), 0);
                else if (object.routingBlob.length >= 0)
                    message.routingBlob = object.routingBlob;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameserverPingReplyData message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @static
         * @param {CMsgSteamDatagramGameserverPingReplyData} message CMsgSteamDatagramGameserverPingReplyData
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameserverPingReplyData.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.echoRelayUnixTime = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacyChallenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacyChallenge = options.longs === String ? "0" : 0;
                object.legacyRouterTimestamp = 0;
                object.dataCenterId = 0;
                object.appid = 0;
                object.protocolVersion = 0;
                if (options.bytes === String)
                    object.echo = "";
                else {
                    object.echo = [];
                    if (options.bytes !== Array)
                        object.echo = $util.newBuffer(object.echo);
                }
                object.build = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.networkConfigVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.networkConfigVersion = options.longs === String ? "0" : 0;
                object.myUnixTime = 0;
                if (options.bytes === String)
                    object.routingBlob = "";
                else {
                    object.routingBlob = [];
                    if (options.bytes !== Array)
                        object.routingBlob = $util.newBuffer(object.routingBlob);
                }
            }
            if (message.echoRelayUnixTime != null && message.hasOwnProperty("echoRelayUnixTime"))
                object.echoRelayUnixTime = message.echoRelayUnixTime;
            if (message.legacyChallenge != null && message.hasOwnProperty("legacyChallenge"))
                if (typeof message.legacyChallenge === "number")
                    object.legacyChallenge = options.longs === String ? String(message.legacyChallenge) : message.legacyChallenge;
                else
                    object.legacyChallenge = options.longs === String ? $util.Long.prototype.toString.call(message.legacyChallenge) : options.longs === Number ? new $util.LongBits(message.legacyChallenge.low >>> 0, message.legacyChallenge.high >>> 0).toNumber() : message.legacyChallenge;
            if (message.legacyRouterTimestamp != null && message.hasOwnProperty("legacyRouterTimestamp"))
                object.legacyRouterTimestamp = message.legacyRouterTimestamp;
            if (message.dataCenterId != null && message.hasOwnProperty("dataCenterId"))
                object.dataCenterId = message.dataCenterId;
            if (message.appid != null && message.hasOwnProperty("appid"))
                object.appid = message.appid;
            if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
                object.protocolVersion = message.protocolVersion;
            if (message.echo != null && message.hasOwnProperty("echo"))
                object.echo = options.bytes === String ? $util.base64.encode(message.echo, 0, message.echo.length) : options.bytes === Array ? Array.prototype.slice.call(message.echo) : message.echo;
            if (message.build != null && message.hasOwnProperty("build"))
                object.build = message.build;
            if (message.networkConfigVersion != null && message.hasOwnProperty("networkConfigVersion"))
                if (typeof message.networkConfigVersion === "number")
                    object.networkConfigVersion = options.longs === String ? String(message.networkConfigVersion) : message.networkConfigVersion;
                else
                    object.networkConfigVersion = options.longs === String ? $util.Long.prototype.toString.call(message.networkConfigVersion) : options.longs === Number ? new $util.LongBits(message.networkConfigVersion.low >>> 0, message.networkConfigVersion.high >>> 0).toNumber(true) : message.networkConfigVersion;
            if (message.myUnixTime != null && message.hasOwnProperty("myUnixTime"))
                object.myUnixTime = message.myUnixTime;
            if (message.routingBlob != null && message.hasOwnProperty("routingBlob"))
                object.routingBlob = options.bytes === String ? $util.base64.encode(message.routingBlob, 0, message.routingBlob.length) : options.bytes === Array ? Array.prototype.slice.call(message.routingBlob) : message.routingBlob;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameserverPingReplyData to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameserverPingReplyData.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramGameserverPingReplyData
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramGameserverPingReplyData
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramGameserverPingReplyData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramGameserverPingReplyData";
        };
    
        return CMsgSteamDatagramGameserverPingReplyData;
    })();
    
    $root.CMsgSteamDatagramNoSessionRelayToClient = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramNoSessionRelayToClient.
         * @exports ICMsgSteamDatagramNoSessionRelayToClient
         * @interface ICMsgSteamDatagramNoSessionRelayToClient
         * @property {number|null} [connectionId] CMsgSteamDatagramNoSessionRelayToClient connectionId
         * @property {number|null} [yourPublicIp] CMsgSteamDatagramNoSessionRelayToClient yourPublicIp
         * @property {number|null} [yourPublicPort] CMsgSteamDatagramNoSessionRelayToClient yourPublicPort
         * @property {number|null} [serverTime] CMsgSteamDatagramNoSessionRelayToClient serverTime
         * @property {number|Long|null} [challenge] CMsgSteamDatagramNoSessionRelayToClient challenge
         * @property {number|null} [secondsUntilShutdown] CMsgSteamDatagramNoSessionRelayToClient secondsUntilShutdown
         */
    
        /**
         * Constructs a new CMsgSteamDatagramNoSessionRelayToClient.
         * @exports CMsgSteamDatagramNoSessionRelayToClient
         * @classdesc Represents a CMsgSteamDatagramNoSessionRelayToClient.
         * @implements ICMsgSteamDatagramNoSessionRelayToClient
         * @constructor
         * @param {ICMsgSteamDatagramNoSessionRelayToClient=} [properties] Properties to set
         */
        function CMsgSteamDatagramNoSessionRelayToClient(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient connectionId.
         * @member {number} connectionId
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.connectionId = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient yourPublicIp.
         * @member {number} yourPublicIp
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.yourPublicIp = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient yourPublicPort.
         * @member {number} yourPublicPort
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.yourPublicPort = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient serverTime.
         * @member {number} serverTime
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.serverTime = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient challenge.
         * @member {number|Long} challenge
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.challenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToClient secondsUntilShutdown.
         * @member {number} secondsUntilShutdown
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.secondsUntilShutdown = 0;
    
        /**
         * Creates a new CMsgSteamDatagramNoSessionRelayToClient instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToClient=} [properties] Properties to set
         * @returns {CMsgSteamDatagramNoSessionRelayToClient} CMsgSteamDatagramNoSessionRelayToClient instance
         */
        CMsgSteamDatagramNoSessionRelayToClient.create = function create(properties) {
            return new CMsgSteamDatagramNoSessionRelayToClient(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoSessionRelayToClient message. Does not implicitly {@link CMsgSteamDatagramNoSessionRelayToClient.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToClient} message CMsgSteamDatagramNoSessionRelayToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoSessionRelayToClient.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.yourPublicIp != null && Object.hasOwnProperty.call(message, "yourPublicIp"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.yourPublicIp);
            if (message.serverTime != null && Object.hasOwnProperty.call(message, "serverTime"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.serverTime);
            if (message.challenge != null && Object.hasOwnProperty.call(message, "challenge"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.challenge);
            if (message.secondsUntilShutdown != null && Object.hasOwnProperty.call(message, "secondsUntilShutdown"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.secondsUntilShutdown);
            if (message.yourPublicPort != null && Object.hasOwnProperty.call(message, "yourPublicPort"))
                writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.yourPublicPort);
            if (message.connectionId != null && Object.hasOwnProperty.call(message, "connectionId"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.connectionId);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoSessionRelayToClient message, length delimited. Does not implicitly {@link CMsgSteamDatagramNoSessionRelayToClient.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToClient} message CMsgSteamDatagramNoSessionRelayToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoSessionRelayToClient.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoSessionRelayToClient message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramNoSessionRelayToClient} CMsgSteamDatagramNoSessionRelayToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoSessionRelayToClient.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramNoSessionRelayToClient();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 7: {
                        message.connectionId = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.yourPublicIp = reader.fixed32();
                        break;
                    }
                case 6: {
                        message.yourPublicPort = reader.fixed32();
                        break;
                    }
                case 3: {
                        message.serverTime = reader.fixed32();
                        break;
                    }
                case 4: {
                        message.challenge = reader.fixed64();
                        break;
                    }
                case 5: {
                        message.secondsUntilShutdown = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoSessionRelayToClient message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramNoSessionRelayToClient} CMsgSteamDatagramNoSessionRelayToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoSessionRelayToClient.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramNoSessionRelayToClient message.
         * @function verify
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramNoSessionRelayToClient.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                if (!$util.isInteger(message.connectionId))
                    return "connectionId: integer expected";
            if (message.yourPublicIp != null && message.hasOwnProperty("yourPublicIp"))
                if (!$util.isInteger(message.yourPublicIp))
                    return "yourPublicIp: integer expected";
            if (message.yourPublicPort != null && message.hasOwnProperty("yourPublicPort"))
                if (!$util.isInteger(message.yourPublicPort))
                    return "yourPublicPort: integer expected";
            if (message.serverTime != null && message.hasOwnProperty("serverTime"))
                if (!$util.isInteger(message.serverTime))
                    return "serverTime: integer expected";
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (!$util.isInteger(message.challenge) && !(message.challenge && $util.isInteger(message.challenge.low) && $util.isInteger(message.challenge.high)))
                    return "challenge: integer|Long expected";
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                if (!$util.isInteger(message.secondsUntilShutdown))
                    return "secondsUntilShutdown: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramNoSessionRelayToClient message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramNoSessionRelayToClient} CMsgSteamDatagramNoSessionRelayToClient
         */
        CMsgSteamDatagramNoSessionRelayToClient.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramNoSessionRelayToClient)
                return object;
            var message = new $root.CMsgSteamDatagramNoSessionRelayToClient();
            if (object.connectionId != null)
                message.connectionId = object.connectionId >>> 0;
            if (object.yourPublicIp != null)
                message.yourPublicIp = object.yourPublicIp >>> 0;
            if (object.yourPublicPort != null)
                message.yourPublicPort = object.yourPublicPort >>> 0;
            if (object.serverTime != null)
                message.serverTime = object.serverTime >>> 0;
            if (object.challenge != null)
                if ($util.Long)
                    (message.challenge = $util.Long.fromValue(object.challenge)).unsigned = false;
                else if (typeof object.challenge === "string")
                    message.challenge = parseInt(object.challenge, 10);
                else if (typeof object.challenge === "number")
                    message.challenge = object.challenge;
                else if (typeof object.challenge === "object")
                    message.challenge = new $util.LongBits(object.challenge.low >>> 0, object.challenge.high >>> 0).toNumber();
            if (object.secondsUntilShutdown != null)
                message.secondsUntilShutdown = object.secondsUntilShutdown >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramNoSessionRelayToClient message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {CMsgSteamDatagramNoSessionRelayToClient} message CMsgSteamDatagramNoSessionRelayToClient
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramNoSessionRelayToClient.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.yourPublicIp = 0;
                object.serverTime = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.challenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.challenge = options.longs === String ? "0" : 0;
                object.secondsUntilShutdown = 0;
                object.yourPublicPort = 0;
                object.connectionId = 0;
            }
            if (message.yourPublicIp != null && message.hasOwnProperty("yourPublicIp"))
                object.yourPublicIp = message.yourPublicIp;
            if (message.serverTime != null && message.hasOwnProperty("serverTime"))
                object.serverTime = message.serverTime;
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (typeof message.challenge === "number")
                    object.challenge = options.longs === String ? String(message.challenge) : message.challenge;
                else
                    object.challenge = options.longs === String ? $util.Long.prototype.toString.call(message.challenge) : options.longs === Number ? new $util.LongBits(message.challenge.low >>> 0, message.challenge.high >>> 0).toNumber() : message.challenge;
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                object.secondsUntilShutdown = message.secondsUntilShutdown;
            if (message.yourPublicPort != null && message.hasOwnProperty("yourPublicPort"))
                object.yourPublicPort = message.yourPublicPort;
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                object.connectionId = message.connectionId;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramNoSessionRelayToClient to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramNoSessionRelayToClient.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramNoSessionRelayToClient
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramNoSessionRelayToClient
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramNoSessionRelayToClient.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramNoSessionRelayToClient";
        };
    
        return CMsgSteamDatagramNoSessionRelayToClient;
    })();
    
    $root.CMsgSteamDatagramNoSessionRelayToPeer = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramNoSessionRelayToPeer.
         * @exports ICMsgSteamDatagramNoSessionRelayToPeer
         * @interface ICMsgSteamDatagramNoSessionRelayToPeer
         * @property {number|null} [legacyRelaySessionId] CMsgSteamDatagramNoSessionRelayToPeer legacyRelaySessionId
         * @property {number|null} [fromRelaySessionId] CMsgSteamDatagramNoSessionRelayToPeer fromRelaySessionId
         * @property {number|null} [fromConnectionId] CMsgSteamDatagramNoSessionRelayToPeer fromConnectionId
         * @property {number|Long|null} [kludgePad] CMsgSteamDatagramNoSessionRelayToPeer kludgePad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramNoSessionRelayToPeer.
         * @exports CMsgSteamDatagramNoSessionRelayToPeer
         * @classdesc Represents a CMsgSteamDatagramNoSessionRelayToPeer.
         * @implements ICMsgSteamDatagramNoSessionRelayToPeer
         * @constructor
         * @param {ICMsgSteamDatagramNoSessionRelayToPeer=} [properties] Properties to set
         */
        function CMsgSteamDatagramNoSessionRelayToPeer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramNoSessionRelayToPeer legacyRelaySessionId.
         * @member {number} legacyRelaySessionId
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToPeer.prototype.legacyRelaySessionId = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToPeer fromRelaySessionId.
         * @member {number} fromRelaySessionId
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToPeer.prototype.fromRelaySessionId = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToPeer fromConnectionId.
         * @member {number} fromConnectionId
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToPeer.prototype.fromConnectionId = 0;
    
        /**
         * CMsgSteamDatagramNoSessionRelayToPeer kludgePad.
         * @member {number|Long} kludgePad
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @instance
         */
        CMsgSteamDatagramNoSessionRelayToPeer.prototype.kludgePad = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramNoSessionRelayToPeer instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToPeer=} [properties] Properties to set
         * @returns {CMsgSteamDatagramNoSessionRelayToPeer} CMsgSteamDatagramNoSessionRelayToPeer instance
         */
        CMsgSteamDatagramNoSessionRelayToPeer.create = function create(properties) {
            return new CMsgSteamDatagramNoSessionRelayToPeer(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoSessionRelayToPeer message. Does not implicitly {@link CMsgSteamDatagramNoSessionRelayToPeer.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToPeer} message CMsgSteamDatagramNoSessionRelayToPeer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoSessionRelayToPeer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.legacyRelaySessionId != null && Object.hasOwnProperty.call(message, "legacyRelaySessionId"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.legacyRelaySessionId);
            if (message.fromRelaySessionId != null && Object.hasOwnProperty.call(message, "fromRelaySessionId"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.fromRelaySessionId);
            if (message.fromConnectionId != null && Object.hasOwnProperty.call(message, "fromConnectionId"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.fromConnectionId);
            if (message.kludgePad != null && Object.hasOwnProperty.call(message, "kludgePad"))
                writer.uint32(/* id 99, wireType 1 =*/793).fixed64(message.kludgePad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoSessionRelayToPeer message, length delimited. Does not implicitly {@link CMsgSteamDatagramNoSessionRelayToPeer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {ICMsgSteamDatagramNoSessionRelayToPeer} message CMsgSteamDatagramNoSessionRelayToPeer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoSessionRelayToPeer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoSessionRelayToPeer message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramNoSessionRelayToPeer} CMsgSteamDatagramNoSessionRelayToPeer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoSessionRelayToPeer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramNoSessionRelayToPeer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.legacyRelaySessionId = reader.uint32();
                        break;
                    }
                case 2: {
                        message.fromRelaySessionId = reader.fixed32();
                        break;
                    }
                case 7: {
                        message.fromConnectionId = reader.fixed32();
                        break;
                    }
                case 99: {
                        message.kludgePad = reader.fixed64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoSessionRelayToPeer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramNoSessionRelayToPeer} CMsgSteamDatagramNoSessionRelayToPeer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoSessionRelayToPeer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramNoSessionRelayToPeer message.
         * @function verify
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramNoSessionRelayToPeer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.legacyRelaySessionId != null && message.hasOwnProperty("legacyRelaySessionId"))
                if (!$util.isInteger(message.legacyRelaySessionId))
                    return "legacyRelaySessionId: integer expected";
            if (message.fromRelaySessionId != null && message.hasOwnProperty("fromRelaySessionId"))
                if (!$util.isInteger(message.fromRelaySessionId))
                    return "fromRelaySessionId: integer expected";
            if (message.fromConnectionId != null && message.hasOwnProperty("fromConnectionId"))
                if (!$util.isInteger(message.fromConnectionId))
                    return "fromConnectionId: integer expected";
            if (message.kludgePad != null && message.hasOwnProperty("kludgePad"))
                if (!$util.isInteger(message.kludgePad) && !(message.kludgePad && $util.isInteger(message.kludgePad.low) && $util.isInteger(message.kludgePad.high)))
                    return "kludgePad: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramNoSessionRelayToPeer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramNoSessionRelayToPeer} CMsgSteamDatagramNoSessionRelayToPeer
         */
        CMsgSteamDatagramNoSessionRelayToPeer.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramNoSessionRelayToPeer)
                return object;
            var message = new $root.CMsgSteamDatagramNoSessionRelayToPeer();
            if (object.legacyRelaySessionId != null)
                message.legacyRelaySessionId = object.legacyRelaySessionId >>> 0;
            if (object.fromRelaySessionId != null)
                message.fromRelaySessionId = object.fromRelaySessionId >>> 0;
            if (object.fromConnectionId != null)
                message.fromConnectionId = object.fromConnectionId >>> 0;
            if (object.kludgePad != null)
                if ($util.Long)
                    (message.kludgePad = $util.Long.fromValue(object.kludgePad)).unsigned = false;
                else if (typeof object.kludgePad === "string")
                    message.kludgePad = parseInt(object.kludgePad, 10);
                else if (typeof object.kludgePad === "number")
                    message.kludgePad = object.kludgePad;
                else if (typeof object.kludgePad === "object")
                    message.kludgePad = new $util.LongBits(object.kludgePad.low >>> 0, object.kludgePad.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramNoSessionRelayToPeer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {CMsgSteamDatagramNoSessionRelayToPeer} message CMsgSteamDatagramNoSessionRelayToPeer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramNoSessionRelayToPeer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.legacyRelaySessionId = 0;
                object.fromRelaySessionId = 0;
                object.fromConnectionId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.kludgePad = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kludgePad = options.longs === String ? "0" : 0;
            }
            if (message.legacyRelaySessionId != null && message.hasOwnProperty("legacyRelaySessionId"))
                object.legacyRelaySessionId = message.legacyRelaySessionId;
            if (message.fromRelaySessionId != null && message.hasOwnProperty("fromRelaySessionId"))
                object.fromRelaySessionId = message.fromRelaySessionId;
            if (message.fromConnectionId != null && message.hasOwnProperty("fromConnectionId"))
                object.fromConnectionId = message.fromConnectionId;
            if (message.kludgePad != null && message.hasOwnProperty("kludgePad"))
                if (typeof message.kludgePad === "number")
                    object.kludgePad = options.longs === String ? String(message.kludgePad) : message.kludgePad;
                else
                    object.kludgePad = options.longs === String ? $util.Long.prototype.toString.call(message.kludgePad) : options.longs === Number ? new $util.LongBits(message.kludgePad.low >>> 0, message.kludgePad.high >>> 0).toNumber() : message.kludgePad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramNoSessionRelayToPeer to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramNoSessionRelayToPeer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramNoSessionRelayToPeer
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramNoSessionRelayToPeer
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramNoSessionRelayToPeer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramNoSessionRelayToPeer";
        };
    
        return CMsgSteamDatagramNoSessionRelayToPeer;
    })();
    
    $root.CMsgSteamDatagramClientPingSampleRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramClientPingSampleRequest.
         * @exports ICMsgSteamDatagramClientPingSampleRequest
         * @interface ICMsgSteamDatagramClientPingSampleRequest
         * @property {number|null} [connectionId] CMsgSteamDatagramClientPingSampleRequest connectionId
         */
    
        /**
         * Constructs a new CMsgSteamDatagramClientPingSampleRequest.
         * @exports CMsgSteamDatagramClientPingSampleRequest
         * @classdesc Represents a CMsgSteamDatagramClientPingSampleRequest.
         * @implements ICMsgSteamDatagramClientPingSampleRequest
         * @constructor
         * @param {ICMsgSteamDatagramClientPingSampleRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramClientPingSampleRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramClientPingSampleRequest connectionId.
         * @member {number} connectionId
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @instance
         */
        CMsgSteamDatagramClientPingSampleRequest.prototype.connectionId = 0;
    
        /**
         * Creates a new CMsgSteamDatagramClientPingSampleRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramClientPingSampleRequest} CMsgSteamDatagramClientPingSampleRequest instance
         */
        CMsgSteamDatagramClientPingSampleRequest.create = function create(properties) {
            return new CMsgSteamDatagramClientPingSampleRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientPingSampleRequest message. Does not implicitly {@link CMsgSteamDatagramClientPingSampleRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleRequest} message CMsgSteamDatagramClientPingSampleRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientPingSampleRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectionId != null && Object.hasOwnProperty.call(message, "connectionId"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connectionId);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientPingSampleRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientPingSampleRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleRequest} message CMsgSteamDatagramClientPingSampleRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientPingSampleRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientPingSampleRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramClientPingSampleRequest} CMsgSteamDatagramClientPingSampleRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientPingSampleRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientPingSampleRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.connectionId = reader.fixed32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientPingSampleRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramClientPingSampleRequest} CMsgSteamDatagramClientPingSampleRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientPingSampleRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramClientPingSampleRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramClientPingSampleRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                if (!$util.isInteger(message.connectionId))
                    return "connectionId: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramClientPingSampleRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramClientPingSampleRequest} CMsgSteamDatagramClientPingSampleRequest
         */
        CMsgSteamDatagramClientPingSampleRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramClientPingSampleRequest)
                return object;
            var message = new $root.CMsgSteamDatagramClientPingSampleRequest();
            if (object.connectionId != null)
                message.connectionId = object.connectionId >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramClientPingSampleRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {CMsgSteamDatagramClientPingSampleRequest} message CMsgSteamDatagramClientPingSampleRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramClientPingSampleRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.connectionId = 0;
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                object.connectionId = message.connectionId;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramClientPingSampleRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramClientPingSampleRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramClientPingSampleRequest
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramClientPingSampleRequest
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramClientPingSampleRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramClientPingSampleRequest";
        };
    
        return CMsgSteamDatagramClientPingSampleRequest;
    })();
    
    $root.CMsgSteamDatagramClientPingSampleReply = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramClientPingSampleReply.
         * @exports ICMsgSteamDatagramClientPingSampleReply
         * @interface ICMsgSteamDatagramClientPingSampleReply
         * @property {number|null} [connectionId] CMsgSteamDatagramClientPingSampleReply connectionId
         * @property {boolean|null} [relayOverrideActive] CMsgSteamDatagramClientPingSampleReply relayOverrideActive
         * @property {Array.<CMsgSteamDatagramClientPingSampleReply.IPOP>|null} [pops] CMsgSteamDatagramClientPingSampleReply pops
         * @property {Array.<CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter>|null} [legacyDataCenters] CMsgSteamDatagramClientPingSampleReply legacyDataCenters
         */
    
        /**
         * Constructs a new CMsgSteamDatagramClientPingSampleReply.
         * @exports CMsgSteamDatagramClientPingSampleReply
         * @classdesc Represents a CMsgSteamDatagramClientPingSampleReply.
         * @implements ICMsgSteamDatagramClientPingSampleReply
         * @constructor
         * @param {ICMsgSteamDatagramClientPingSampleReply=} [properties] Properties to set
         */
        function CMsgSteamDatagramClientPingSampleReply(properties) {
            this.pops = [];
            this.legacyDataCenters = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramClientPingSampleReply connectionId.
         * @member {number} connectionId
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @instance
         */
        CMsgSteamDatagramClientPingSampleReply.prototype.connectionId = 0;
    
        /**
         * CMsgSteamDatagramClientPingSampleReply relayOverrideActive.
         * @member {boolean} relayOverrideActive
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @instance
         */
        CMsgSteamDatagramClientPingSampleReply.prototype.relayOverrideActive = false;
    
        /**
         * CMsgSteamDatagramClientPingSampleReply pops.
         * @member {Array.<CMsgSteamDatagramClientPingSampleReply.IPOP>} pops
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @instance
         */
        CMsgSteamDatagramClientPingSampleReply.prototype.pops = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramClientPingSampleReply legacyDataCenters.
         * @member {Array.<CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter>} legacyDataCenters
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @instance
         */
        CMsgSteamDatagramClientPingSampleReply.prototype.legacyDataCenters = $util.emptyArray;
    
        /**
         * Creates a new CMsgSteamDatagramClientPingSampleReply instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleReply=} [properties] Properties to set
         * @returns {CMsgSteamDatagramClientPingSampleReply} CMsgSteamDatagramClientPingSampleReply instance
         */
        CMsgSteamDatagramClientPingSampleReply.create = function create(properties) {
            return new CMsgSteamDatagramClientPingSampleReply(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientPingSampleReply message. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleReply} message CMsgSteamDatagramClientPingSampleReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientPingSampleReply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectionId != null && Object.hasOwnProperty.call(message, "connectionId"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connectionId);
            if (message.pops != null && message.pops.length)
                for (var i = 0; i < message.pops.length; ++i)
                    $root.CMsgSteamDatagramClientPingSampleReply.POP.encode(message.pops[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.legacyDataCenters != null && message.legacyDataCenters.length)
                for (var i = 0; i < message.legacyDataCenters.length; ++i)
                    $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.encode(message.legacyDataCenters[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.relayOverrideActive != null && Object.hasOwnProperty.call(message, "relayOverrideActive"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.relayOverrideActive);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientPingSampleReply message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {ICMsgSteamDatagramClientPingSampleReply} message CMsgSteamDatagramClientPingSampleReply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientPingSampleReply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientPingSampleReply message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramClientPingSampleReply} CMsgSteamDatagramClientPingSampleReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientPingSampleReply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientPingSampleReply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.connectionId = reader.fixed32();
                        break;
                    }
                case 5: {
                        message.relayOverrideActive = reader.bool();
                        break;
                    }
                case 2: {
                        if (!(message.pops && message.pops.length))
                            message.pops = [];
                        message.pops.push($root.CMsgSteamDatagramClientPingSampleReply.POP.decode(reader, reader.uint32()));
                        break;
                    }
                case 3: {
                        if (!(message.legacyDataCenters && message.legacyDataCenters.length))
                            message.legacyDataCenters = [];
                        message.legacyDataCenters.push($root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.decode(reader, reader.uint32()));
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientPingSampleReply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramClientPingSampleReply} CMsgSteamDatagramClientPingSampleReply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientPingSampleReply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramClientPingSampleReply message.
         * @function verify
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramClientPingSampleReply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                if (!$util.isInteger(message.connectionId))
                    return "connectionId: integer expected";
            if (message.relayOverrideActive != null && message.hasOwnProperty("relayOverrideActive"))
                if (typeof message.relayOverrideActive !== "boolean")
                    return "relayOverrideActive: boolean expected";
            if (message.pops != null && message.hasOwnProperty("pops")) {
                if (!Array.isArray(message.pops))
                    return "pops: array expected";
                for (var i = 0; i < message.pops.length; ++i) {
                    var error = $root.CMsgSteamDatagramClientPingSampleReply.POP.verify(message.pops[i]);
                    if (error)
                        return "pops." + error;
                }
            }
            if (message.legacyDataCenters != null && message.hasOwnProperty("legacyDataCenters")) {
                if (!Array.isArray(message.legacyDataCenters))
                    return "legacyDataCenters: array expected";
                for (var i = 0; i < message.legacyDataCenters.length; ++i) {
                    var error = $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.verify(message.legacyDataCenters[i]);
                    if (error)
                        return "legacyDataCenters." + error;
                }
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramClientPingSampleReply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramClientPingSampleReply} CMsgSteamDatagramClientPingSampleReply
         */
        CMsgSteamDatagramClientPingSampleReply.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramClientPingSampleReply)
                return object;
            var message = new $root.CMsgSteamDatagramClientPingSampleReply();
            if (object.connectionId != null)
                message.connectionId = object.connectionId >>> 0;
            if (object.relayOverrideActive != null)
                message.relayOverrideActive = Boolean(object.relayOverrideActive);
            if (object.pops) {
                if (!Array.isArray(object.pops))
                    throw TypeError(".CMsgSteamDatagramClientPingSampleReply.pops: array expected");
                message.pops = [];
                for (var i = 0; i < object.pops.length; ++i) {
                    if (typeof object.pops[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramClientPingSampleReply.pops: object expected");
                    message.pops[i] = $root.CMsgSteamDatagramClientPingSampleReply.POP.fromObject(object.pops[i]);
                }
            }
            if (object.legacyDataCenters) {
                if (!Array.isArray(object.legacyDataCenters))
                    throw TypeError(".CMsgSteamDatagramClientPingSampleReply.legacyDataCenters: array expected");
                message.legacyDataCenters = [];
                for (var i = 0; i < object.legacyDataCenters.length; ++i) {
                    if (typeof object.legacyDataCenters[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramClientPingSampleReply.legacyDataCenters: object expected");
                    message.legacyDataCenters[i] = $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.fromObject(object.legacyDataCenters[i]);
                }
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramClientPingSampleReply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {CMsgSteamDatagramClientPingSampleReply} message CMsgSteamDatagramClientPingSampleReply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramClientPingSampleReply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.pops = [];
                object.legacyDataCenters = [];
            }
            if (options.defaults) {
                object.connectionId = 0;
                object.relayOverrideActive = false;
            }
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                object.connectionId = message.connectionId;
            if (message.pops && message.pops.length) {
                object.pops = [];
                for (var j = 0; j < message.pops.length; ++j)
                    object.pops[j] = $root.CMsgSteamDatagramClientPingSampleReply.POP.toObject(message.pops[j], options);
            }
            if (message.legacyDataCenters && message.legacyDataCenters.length) {
                object.legacyDataCenters = [];
                for (var j = 0; j < message.legacyDataCenters.length; ++j)
                    object.legacyDataCenters[j] = $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.toObject(message.legacyDataCenters[j], options);
            }
            if (message.relayOverrideActive != null && message.hasOwnProperty("relayOverrideActive"))
                object.relayOverrideActive = message.relayOverrideActive;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramClientPingSampleReply to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramClientPingSampleReply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramClientPingSampleReply
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramClientPingSampleReply
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramClientPingSampleReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramClientPingSampleReply";
        };
    
        CMsgSteamDatagramClientPingSampleReply.POP = (function() {
    
            /**
             * Properties of a POP.
             * @memberof CMsgSteamDatagramClientPingSampleReply
             * @interface IPOP
             * @property {number|null} [popId] POP popId
             * @property {number|null} [defaultFrontPingMs] POP defaultFrontPingMs
             * @property {number|null} [clusterPenalty] POP clusterPenalty
             * @property {Array.<CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress>|null} [altAddresses] POP altAddresses
             * @property {number|null} [defaultE2ePingMs] POP defaultE2ePingMs
             * @property {number|null} [defaultE2eScore] POP defaultE2eScore
             * @property {number|null} [p2pViaPeerRelayPopId] POP p2pViaPeerRelayPopId
             * @property {number|null} [bestDcPingMs] POP bestDcPingMs
             * @property {number|null} [bestDcScore] POP bestDcScore
             * @property {number|null} [bestDcViaRelayPopId] POP bestDcViaRelayPopId
             * @property {number|null} [defaultDcPingMs] POP defaultDcPingMs
             * @property {number|null} [defaultDcScore] POP defaultDcScore
             * @property {number|null} [defaultDcViaRelayPopId] POP defaultDcViaRelayPopId
             * @property {number|null} [testDcPingMs] POP testDcPingMs
             * @property {number|null} [testDcScore] POP testDcScore
             * @property {number|null} [testDcViaRelayPopId] POP testDcViaRelayPopId
             */
    
            /**
             * Constructs a new POP.
             * @memberof CMsgSteamDatagramClientPingSampleReply
             * @classdesc Represents a POP.
             * @implements IPOP
             * @constructor
             * @param {CMsgSteamDatagramClientPingSampleReply.IPOP=} [properties] Properties to set
             */
            function POP(properties) {
                this.altAddresses = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * POP popId.
             * @member {number} popId
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.popId = 0;
    
            /**
             * POP defaultFrontPingMs.
             * @member {number} defaultFrontPingMs
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.defaultFrontPingMs = 0;
    
            /**
             * POP clusterPenalty.
             * @member {number} clusterPenalty
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.clusterPenalty = 0;
    
            /**
             * POP altAddresses.
             * @member {Array.<CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress>} altAddresses
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.altAddresses = $util.emptyArray;
    
            /**
             * POP defaultE2ePingMs.
             * @member {number} defaultE2ePingMs
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.defaultE2ePingMs = 0;
    
            /**
             * POP defaultE2eScore.
             * @member {number} defaultE2eScore
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.defaultE2eScore = 0;
    
            /**
             * POP p2pViaPeerRelayPopId.
             * @member {number} p2pViaPeerRelayPopId
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.p2pViaPeerRelayPopId = 0;
    
            /**
             * POP bestDcPingMs.
             * @member {number} bestDcPingMs
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.bestDcPingMs = 0;
    
            /**
             * POP bestDcScore.
             * @member {number} bestDcScore
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.bestDcScore = 0;
    
            /**
             * POP bestDcViaRelayPopId.
             * @member {number} bestDcViaRelayPopId
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.bestDcViaRelayPopId = 0;
    
            /**
             * POP defaultDcPingMs.
             * @member {number} defaultDcPingMs
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.defaultDcPingMs = 0;
    
            /**
             * POP defaultDcScore.
             * @member {number} defaultDcScore
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.defaultDcScore = 0;
    
            /**
             * POP defaultDcViaRelayPopId.
             * @member {number} defaultDcViaRelayPopId
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.defaultDcViaRelayPopId = 0;
    
            /**
             * POP testDcPingMs.
             * @member {number} testDcPingMs
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.testDcPingMs = 0;
    
            /**
             * POP testDcScore.
             * @member {number} testDcScore
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.testDcScore = 0;
    
            /**
             * POP testDcViaRelayPopId.
             * @member {number} testDcViaRelayPopId
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             */
            POP.prototype.testDcViaRelayPopId = 0;
    
            /**
             * Creates a new POP instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.IPOP=} [properties] Properties to set
             * @returns {CMsgSteamDatagramClientPingSampleReply.POP} POP instance
             */
            POP.create = function create(properties) {
                return new POP(properties);
            };
    
            /**
             * Encodes the specified POP message. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.POP.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.IPOP} message POP message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            POP.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.popId != null && Object.hasOwnProperty.call(message, "popId"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.popId);
                if (message.defaultFrontPingMs != null && Object.hasOwnProperty.call(message, "defaultFrontPingMs"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.defaultFrontPingMs);
                if (message.defaultE2ePingMs != null && Object.hasOwnProperty.call(message, "defaultE2ePingMs"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.defaultE2ePingMs);
                if (message.clusterPenalty != null && Object.hasOwnProperty.call(message, "clusterPenalty"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.clusterPenalty);
                if (message.defaultE2eScore != null && Object.hasOwnProperty.call(message, "defaultE2eScore"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.defaultE2eScore);
                if (message.p2pViaPeerRelayPopId != null && Object.hasOwnProperty.call(message, "p2pViaPeerRelayPopId"))
                    writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.p2pViaPeerRelayPopId);
                if (message.altAddresses != null && message.altAddresses.length)
                    for (var i = 0; i < message.altAddresses.length; ++i)
                        $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.encode(message.altAddresses[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.bestDcPingMs != null && Object.hasOwnProperty.call(message, "bestDcPingMs"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.bestDcPingMs);
                if (message.bestDcScore != null && Object.hasOwnProperty.call(message, "bestDcScore"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.bestDcScore);
                if (message.bestDcViaRelayPopId != null && Object.hasOwnProperty.call(message, "bestDcViaRelayPopId"))
                    writer.uint32(/* id 11, wireType 5 =*/93).fixed32(message.bestDcViaRelayPopId);
                if (message.defaultDcPingMs != null && Object.hasOwnProperty.call(message, "defaultDcPingMs"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.defaultDcPingMs);
                if (message.defaultDcScore != null && Object.hasOwnProperty.call(message, "defaultDcScore"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.defaultDcScore);
                if (message.defaultDcViaRelayPopId != null && Object.hasOwnProperty.call(message, "defaultDcViaRelayPopId"))
                    writer.uint32(/* id 14, wireType 5 =*/117).fixed32(message.defaultDcViaRelayPopId);
                if (message.testDcPingMs != null && Object.hasOwnProperty.call(message, "testDcPingMs"))
                    writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.testDcPingMs);
                if (message.testDcScore != null && Object.hasOwnProperty.call(message, "testDcScore"))
                    writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.testDcScore);
                if (message.testDcViaRelayPopId != null && Object.hasOwnProperty.call(message, "testDcViaRelayPopId"))
                    writer.uint32(/* id 17, wireType 5 =*/141).fixed32(message.testDcViaRelayPopId);
                return writer;
            };
    
            /**
             * Encodes the specified POP message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.POP.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.IPOP} message POP message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            POP.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a POP message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramClientPingSampleReply.POP} POP
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            POP.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientPingSampleReply.POP();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.popId = reader.fixed32();
                            break;
                        }
                    case 2: {
                            message.defaultFrontPingMs = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.clusterPenalty = reader.uint32();
                            break;
                        }
                    case 7: {
                            if (!(message.altAddresses && message.altAddresses.length))
                                message.altAddresses = [];
                            message.altAddresses.push($root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.defaultE2ePingMs = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.defaultE2eScore = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.p2pViaPeerRelayPopId = reader.fixed32();
                            break;
                        }
                    case 9: {
                            message.bestDcPingMs = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.bestDcScore = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.bestDcViaRelayPopId = reader.fixed32();
                            break;
                        }
                    case 12: {
                            message.defaultDcPingMs = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.defaultDcScore = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.defaultDcViaRelayPopId = reader.fixed32();
                            break;
                        }
                    case 15: {
                            message.testDcPingMs = reader.uint32();
                            break;
                        }
                    case 16: {
                            message.testDcScore = reader.uint32();
                            break;
                        }
                    case 17: {
                            message.testDcViaRelayPopId = reader.fixed32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a POP message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramClientPingSampleReply.POP} POP
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            POP.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a POP message.
             * @function verify
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            POP.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.popId != null && message.hasOwnProperty("popId"))
                    if (!$util.isInteger(message.popId))
                        return "popId: integer expected";
                if (message.defaultFrontPingMs != null && message.hasOwnProperty("defaultFrontPingMs"))
                    if (!$util.isInteger(message.defaultFrontPingMs))
                        return "defaultFrontPingMs: integer expected";
                if (message.clusterPenalty != null && message.hasOwnProperty("clusterPenalty"))
                    if (!$util.isInteger(message.clusterPenalty))
                        return "clusterPenalty: integer expected";
                if (message.altAddresses != null && message.hasOwnProperty("altAddresses")) {
                    if (!Array.isArray(message.altAddresses))
                        return "altAddresses: array expected";
                    for (var i = 0; i < message.altAddresses.length; ++i) {
                        var error = $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.verify(message.altAddresses[i]);
                        if (error)
                            return "altAddresses." + error;
                    }
                }
                if (message.defaultE2ePingMs != null && message.hasOwnProperty("defaultE2ePingMs"))
                    if (!$util.isInteger(message.defaultE2ePingMs))
                        return "defaultE2ePingMs: integer expected";
                if (message.defaultE2eScore != null && message.hasOwnProperty("defaultE2eScore"))
                    if (!$util.isInteger(message.defaultE2eScore))
                        return "defaultE2eScore: integer expected";
                if (message.p2pViaPeerRelayPopId != null && message.hasOwnProperty("p2pViaPeerRelayPopId"))
                    if (!$util.isInteger(message.p2pViaPeerRelayPopId))
                        return "p2pViaPeerRelayPopId: integer expected";
                if (message.bestDcPingMs != null && message.hasOwnProperty("bestDcPingMs"))
                    if (!$util.isInteger(message.bestDcPingMs))
                        return "bestDcPingMs: integer expected";
                if (message.bestDcScore != null && message.hasOwnProperty("bestDcScore"))
                    if (!$util.isInteger(message.bestDcScore))
                        return "bestDcScore: integer expected";
                if (message.bestDcViaRelayPopId != null && message.hasOwnProperty("bestDcViaRelayPopId"))
                    if (!$util.isInteger(message.bestDcViaRelayPopId))
                        return "bestDcViaRelayPopId: integer expected";
                if (message.defaultDcPingMs != null && message.hasOwnProperty("defaultDcPingMs"))
                    if (!$util.isInteger(message.defaultDcPingMs))
                        return "defaultDcPingMs: integer expected";
                if (message.defaultDcScore != null && message.hasOwnProperty("defaultDcScore"))
                    if (!$util.isInteger(message.defaultDcScore))
                        return "defaultDcScore: integer expected";
                if (message.defaultDcViaRelayPopId != null && message.hasOwnProperty("defaultDcViaRelayPopId"))
                    if (!$util.isInteger(message.defaultDcViaRelayPopId))
                        return "defaultDcViaRelayPopId: integer expected";
                if (message.testDcPingMs != null && message.hasOwnProperty("testDcPingMs"))
                    if (!$util.isInteger(message.testDcPingMs))
                        return "testDcPingMs: integer expected";
                if (message.testDcScore != null && message.hasOwnProperty("testDcScore"))
                    if (!$util.isInteger(message.testDcScore))
                        return "testDcScore: integer expected";
                if (message.testDcViaRelayPopId != null && message.hasOwnProperty("testDcViaRelayPopId"))
                    if (!$util.isInteger(message.testDcViaRelayPopId))
                        return "testDcViaRelayPopId: integer expected";
                return null;
            };
    
            /**
             * Creates a POP message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramClientPingSampleReply.POP} POP
             */
            POP.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramClientPingSampleReply.POP)
                    return object;
                var message = new $root.CMsgSteamDatagramClientPingSampleReply.POP();
                if (object.popId != null)
                    message.popId = object.popId >>> 0;
                if (object.defaultFrontPingMs != null)
                    message.defaultFrontPingMs = object.defaultFrontPingMs >>> 0;
                if (object.clusterPenalty != null)
                    message.clusterPenalty = object.clusterPenalty >>> 0;
                if (object.altAddresses) {
                    if (!Array.isArray(object.altAddresses))
                        throw TypeError(".CMsgSteamDatagramClientPingSampleReply.POP.altAddresses: array expected");
                    message.altAddresses = [];
                    for (var i = 0; i < object.altAddresses.length; ++i) {
                        if (typeof object.altAddresses[i] !== "object")
                            throw TypeError(".CMsgSteamDatagramClientPingSampleReply.POP.altAddresses: object expected");
                        message.altAddresses[i] = $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.fromObject(object.altAddresses[i]);
                    }
                }
                if (object.defaultE2ePingMs != null)
                    message.defaultE2ePingMs = object.defaultE2ePingMs >>> 0;
                if (object.defaultE2eScore != null)
                    message.defaultE2eScore = object.defaultE2eScore >>> 0;
                if (object.p2pViaPeerRelayPopId != null)
                    message.p2pViaPeerRelayPopId = object.p2pViaPeerRelayPopId >>> 0;
                if (object.bestDcPingMs != null)
                    message.bestDcPingMs = object.bestDcPingMs >>> 0;
                if (object.bestDcScore != null)
                    message.bestDcScore = object.bestDcScore >>> 0;
                if (object.bestDcViaRelayPopId != null)
                    message.bestDcViaRelayPopId = object.bestDcViaRelayPopId >>> 0;
                if (object.defaultDcPingMs != null)
                    message.defaultDcPingMs = object.defaultDcPingMs >>> 0;
                if (object.defaultDcScore != null)
                    message.defaultDcScore = object.defaultDcScore >>> 0;
                if (object.defaultDcViaRelayPopId != null)
                    message.defaultDcViaRelayPopId = object.defaultDcViaRelayPopId >>> 0;
                if (object.testDcPingMs != null)
                    message.testDcPingMs = object.testDcPingMs >>> 0;
                if (object.testDcScore != null)
                    message.testDcScore = object.testDcScore >>> 0;
                if (object.testDcViaRelayPopId != null)
                    message.testDcViaRelayPopId = object.testDcViaRelayPopId >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a POP message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.POP} message POP
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            POP.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.altAddresses = [];
                if (options.defaults) {
                    object.popId = 0;
                    object.defaultFrontPingMs = 0;
                    object.defaultE2ePingMs = 0;
                    object.clusterPenalty = 0;
                    object.defaultE2eScore = 0;
                    object.p2pViaPeerRelayPopId = 0;
                    object.bestDcPingMs = 0;
                    object.bestDcScore = 0;
                    object.bestDcViaRelayPopId = 0;
                    object.defaultDcPingMs = 0;
                    object.defaultDcScore = 0;
                    object.defaultDcViaRelayPopId = 0;
                    object.testDcPingMs = 0;
                    object.testDcScore = 0;
                    object.testDcViaRelayPopId = 0;
                }
                if (message.popId != null && message.hasOwnProperty("popId"))
                    object.popId = message.popId;
                if (message.defaultFrontPingMs != null && message.hasOwnProperty("defaultFrontPingMs"))
                    object.defaultFrontPingMs = message.defaultFrontPingMs;
                if (message.defaultE2ePingMs != null && message.hasOwnProperty("defaultE2ePingMs"))
                    object.defaultE2ePingMs = message.defaultE2ePingMs;
                if (message.clusterPenalty != null && message.hasOwnProperty("clusterPenalty"))
                    object.clusterPenalty = message.clusterPenalty;
                if (message.defaultE2eScore != null && message.hasOwnProperty("defaultE2eScore"))
                    object.defaultE2eScore = message.defaultE2eScore;
                if (message.p2pViaPeerRelayPopId != null && message.hasOwnProperty("p2pViaPeerRelayPopId"))
                    object.p2pViaPeerRelayPopId = message.p2pViaPeerRelayPopId;
                if (message.altAddresses && message.altAddresses.length) {
                    object.altAddresses = [];
                    for (var j = 0; j < message.altAddresses.length; ++j)
                        object.altAddresses[j] = $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.toObject(message.altAddresses[j], options);
                }
                if (message.bestDcPingMs != null && message.hasOwnProperty("bestDcPingMs"))
                    object.bestDcPingMs = message.bestDcPingMs;
                if (message.bestDcScore != null && message.hasOwnProperty("bestDcScore"))
                    object.bestDcScore = message.bestDcScore;
                if (message.bestDcViaRelayPopId != null && message.hasOwnProperty("bestDcViaRelayPopId"))
                    object.bestDcViaRelayPopId = message.bestDcViaRelayPopId;
                if (message.defaultDcPingMs != null && message.hasOwnProperty("defaultDcPingMs"))
                    object.defaultDcPingMs = message.defaultDcPingMs;
                if (message.defaultDcScore != null && message.hasOwnProperty("defaultDcScore"))
                    object.defaultDcScore = message.defaultDcScore;
                if (message.defaultDcViaRelayPopId != null && message.hasOwnProperty("defaultDcViaRelayPopId"))
                    object.defaultDcViaRelayPopId = message.defaultDcViaRelayPopId;
                if (message.testDcPingMs != null && message.hasOwnProperty("testDcPingMs"))
                    object.testDcPingMs = message.testDcPingMs;
                if (message.testDcScore != null && message.hasOwnProperty("testDcScore"))
                    object.testDcScore = message.testDcScore;
                if (message.testDcViaRelayPopId != null && message.hasOwnProperty("testDcViaRelayPopId"))
                    object.testDcViaRelayPopId = message.testDcViaRelayPopId;
                return object;
            };
    
            /**
             * Converts this POP to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            POP.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for POP
             * @function getTypeUrl
             * @memberof CMsgSteamDatagramClientPingSampleReply.POP
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            POP.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamDatagramClientPingSampleReply.POP";
            };
    
            POP.AltAddress = (function() {
    
                /**
                 * Properties of an AltAddress.
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP
                 * @interface IAltAddress
                 * @property {string|null} [id] AltAddress id
                 * @property {number|null} [frontPingMs] AltAddress frontPingMs
                 * @property {number|null} [penalty] AltAddress penalty
                 */
    
                /**
                 * Constructs a new AltAddress.
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP
                 * @classdesc Represents an AltAddress.
                 * @implements IAltAddress
                 * @constructor
                 * @param {CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress=} [properties] Properties to set
                 */
                function AltAddress(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * AltAddress id.
                 * @member {string} id
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @instance
                 */
                AltAddress.prototype.id = "";
    
                /**
                 * AltAddress frontPingMs.
                 * @member {number} frontPingMs
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @instance
                 */
                AltAddress.prototype.frontPingMs = 0;
    
                /**
                 * AltAddress penalty.
                 * @member {number} penalty
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @instance
                 */
                AltAddress.prototype.penalty = 0;
    
                /**
                 * Creates a new AltAddress instance using the specified properties.
                 * @function create
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress=} [properties] Properties to set
                 * @returns {CMsgSteamDatagramClientPingSampleReply.POP.AltAddress} AltAddress instance
                 */
                AltAddress.create = function create(properties) {
                    return new AltAddress(properties);
                };
    
                /**
                 * Encodes the specified AltAddress message. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.verify|verify} messages.
                 * @function encode
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress} message AltAddress message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AltAddress.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.frontPingMs != null && Object.hasOwnProperty.call(message, "frontPingMs"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.frontPingMs);
                    if (message.penalty != null && Object.hasOwnProperty.call(message, "penalty"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.penalty);
                    return writer;
                };
    
                /**
                 * Encodes the specified AltAddress message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {CMsgSteamDatagramClientPingSampleReply.POP.IAltAddress} message AltAddress message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AltAddress.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an AltAddress message from the specified reader or buffer.
                 * @function decode
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {CMsgSteamDatagramClientPingSampleReply.POP.AltAddress} AltAddress
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AltAddress.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.id = reader.string();
                                break;
                            }
                        case 2: {
                                message.frontPingMs = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.penalty = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an AltAddress message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {CMsgSteamDatagramClientPingSampleReply.POP.AltAddress} AltAddress
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AltAddress.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an AltAddress message.
                 * @function verify
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AltAddress.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.frontPingMs != null && message.hasOwnProperty("frontPingMs"))
                        if (!$util.isInteger(message.frontPingMs))
                            return "frontPingMs: integer expected";
                    if (message.penalty != null && message.hasOwnProperty("penalty"))
                        if (!$util.isInteger(message.penalty))
                            return "penalty: integer expected";
                    return null;
                };
    
                /**
                 * Creates an AltAddress message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {CMsgSteamDatagramClientPingSampleReply.POP.AltAddress} AltAddress
                 */
                AltAddress.fromObject = function fromObject(object) {
                    if (object instanceof $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
                        return object;
                    var message = new $root.CMsgSteamDatagramClientPingSampleReply.POP.AltAddress();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.frontPingMs != null)
                        message.frontPingMs = object.frontPingMs >>> 0;
                    if (object.penalty != null)
                        message.penalty = object.penalty >>> 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from an AltAddress message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {CMsgSteamDatagramClientPingSampleReply.POP.AltAddress} message AltAddress
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AltAddress.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.frontPingMs = 0;
                        object.penalty = 0;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.frontPingMs != null && message.hasOwnProperty("frontPingMs"))
                        object.frontPingMs = message.frontPingMs;
                    if (message.penalty != null && message.hasOwnProperty("penalty"))
                        object.penalty = message.penalty;
                    return object;
                };
    
                /**
                 * Converts this AltAddress to JSON.
                 * @function toJSON
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AltAddress.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for AltAddress
                 * @function getTypeUrl
                 * @memberof CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                AltAddress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/CMsgSteamDatagramClientPingSampleReply.POP.AltAddress";
                };
    
                return AltAddress;
            })();
    
            return POP;
        })();
    
        CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter = (function() {
    
            /**
             * Properties of a LegacyDataCenter.
             * @memberof CMsgSteamDatagramClientPingSampleReply
             * @interface ILegacyDataCenter
             * @property {number|null} [dataCenterId] LegacyDataCenter dataCenterId
             * @property {number|null} [bestDcViaRelayPopId] LegacyDataCenter bestDcViaRelayPopId
             * @property {number|null} [bestDcPingMs] LegacyDataCenter bestDcPingMs
             */
    
            /**
             * Constructs a new LegacyDataCenter.
             * @memberof CMsgSteamDatagramClientPingSampleReply
             * @classdesc Represents a LegacyDataCenter.
             * @implements ILegacyDataCenter
             * @constructor
             * @param {CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter=} [properties] Properties to set
             */
            function LegacyDataCenter(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * LegacyDataCenter dataCenterId.
             * @member {number} dataCenterId
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @instance
             */
            LegacyDataCenter.prototype.dataCenterId = 0;
    
            /**
             * LegacyDataCenter bestDcViaRelayPopId.
             * @member {number} bestDcViaRelayPopId
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @instance
             */
            LegacyDataCenter.prototype.bestDcViaRelayPopId = 0;
    
            /**
             * LegacyDataCenter bestDcPingMs.
             * @member {number} bestDcPingMs
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @instance
             */
            LegacyDataCenter.prototype.bestDcPingMs = 0;
    
            /**
             * Creates a new LegacyDataCenter instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter=} [properties] Properties to set
             * @returns {CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter} LegacyDataCenter instance
             */
            LegacyDataCenter.create = function create(properties) {
                return new LegacyDataCenter(properties);
            };
    
            /**
             * Encodes the specified LegacyDataCenter message. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter} message LegacyDataCenter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LegacyDataCenter.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.dataCenterId != null && Object.hasOwnProperty.call(message, "dataCenterId"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.dataCenterId);
                if (message.bestDcViaRelayPopId != null && Object.hasOwnProperty.call(message, "bestDcViaRelayPopId"))
                    writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.bestDcViaRelayPopId);
                if (message.bestDcPingMs != null && Object.hasOwnProperty.call(message, "bestDcPingMs"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.bestDcPingMs);
                return writer;
            };
    
            /**
             * Encodes the specified LegacyDataCenter message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.ILegacyDataCenter} message LegacyDataCenter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LegacyDataCenter.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a LegacyDataCenter message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter} LegacyDataCenter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LegacyDataCenter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.dataCenterId = reader.fixed32();
                            break;
                        }
                    case 2: {
                            message.bestDcViaRelayPopId = reader.fixed32();
                            break;
                        }
                    case 3: {
                            message.bestDcPingMs = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a LegacyDataCenter message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter} LegacyDataCenter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LegacyDataCenter.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a LegacyDataCenter message.
             * @function verify
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LegacyDataCenter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.dataCenterId != null && message.hasOwnProperty("dataCenterId"))
                    if (!$util.isInteger(message.dataCenterId))
                        return "dataCenterId: integer expected";
                if (message.bestDcViaRelayPopId != null && message.hasOwnProperty("bestDcViaRelayPopId"))
                    if (!$util.isInteger(message.bestDcViaRelayPopId))
                        return "bestDcViaRelayPopId: integer expected";
                if (message.bestDcPingMs != null && message.hasOwnProperty("bestDcPingMs"))
                    if (!$util.isInteger(message.bestDcPingMs))
                        return "bestDcPingMs: integer expected";
                return null;
            };
    
            /**
             * Creates a LegacyDataCenter message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter} LegacyDataCenter
             */
            LegacyDataCenter.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
                    return object;
                var message = new $root.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter();
                if (object.dataCenterId != null)
                    message.dataCenterId = object.dataCenterId >>> 0;
                if (object.bestDcViaRelayPopId != null)
                    message.bestDcViaRelayPopId = object.bestDcViaRelayPopId >>> 0;
                if (object.bestDcPingMs != null)
                    message.bestDcPingMs = object.bestDcPingMs >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a LegacyDataCenter message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter} message LegacyDataCenter
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LegacyDataCenter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.dataCenterId = 0;
                    object.bestDcViaRelayPopId = 0;
                    object.bestDcPingMs = 0;
                }
                if (message.dataCenterId != null && message.hasOwnProperty("dataCenterId"))
                    object.dataCenterId = message.dataCenterId;
                if (message.bestDcViaRelayPopId != null && message.hasOwnProperty("bestDcViaRelayPopId"))
                    object.bestDcViaRelayPopId = message.bestDcViaRelayPopId;
                if (message.bestDcPingMs != null && message.hasOwnProperty("bestDcPingMs"))
                    object.bestDcPingMs = message.bestDcPingMs;
                return object;
            };
    
            /**
             * Converts this LegacyDataCenter to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LegacyDataCenter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for LegacyDataCenter
             * @function getTypeUrl
             * @memberof CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LegacyDataCenter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter";
            };
    
            return LegacyDataCenter;
        })();
    
        return CMsgSteamDatagramClientPingSampleReply;
    })();
    
    $root.CMsgSteamDatagramClientSwitchedPrimary = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramClientSwitchedPrimary.
         * @exports ICMsgSteamDatagramClientSwitchedPrimary
         * @interface ICMsgSteamDatagramClientSwitchedPrimary
         * @property {number|null} [connectionId] CMsgSteamDatagramClientSwitchedPrimary connectionId
         * @property {number|null} [fromIp] CMsgSteamDatagramClientSwitchedPrimary fromIp
         * @property {number|null} [fromPort] CMsgSteamDatagramClientSwitchedPrimary fromPort
         * @property {number|null} [fromRouterCluster] CMsgSteamDatagramClientSwitchedPrimary fromRouterCluster
         * @property {number|null} [fromActiveTime] CMsgSteamDatagramClientSwitchedPrimary fromActiveTime
         * @property {number|null} [fromActivePacketsRecv] CMsgSteamDatagramClientSwitchedPrimary fromActivePacketsRecv
         * @property {string|null} [fromDroppedReason] CMsgSteamDatagramClientSwitchedPrimary fromDroppedReason
         * @property {number|null} [gapMs] CMsgSteamDatagramClientSwitchedPrimary gapMs
         * @property {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null} [fromQualityNow] CMsgSteamDatagramClientSwitchedPrimary fromQualityNow
         * @property {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null} [toQualityNow] CMsgSteamDatagramClientSwitchedPrimary toQualityNow
         * @property {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null} [fromQualityThen] CMsgSteamDatagramClientSwitchedPrimary fromQualityThen
         * @property {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null} [toQualityThen] CMsgSteamDatagramClientSwitchedPrimary toQualityThen
         */
    
        /**
         * Constructs a new CMsgSteamDatagramClientSwitchedPrimary.
         * @exports CMsgSteamDatagramClientSwitchedPrimary
         * @classdesc Represents a CMsgSteamDatagramClientSwitchedPrimary.
         * @implements ICMsgSteamDatagramClientSwitchedPrimary
         * @constructor
         * @param {ICMsgSteamDatagramClientSwitchedPrimary=} [properties] Properties to set
         */
        function CMsgSteamDatagramClientSwitchedPrimary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary connectionId.
         * @member {number} connectionId
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.connectionId = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary fromIp.
         * @member {number} fromIp
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.fromIp = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary fromPort.
         * @member {number} fromPort
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.fromPort = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary fromRouterCluster.
         * @member {number} fromRouterCluster
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.fromRouterCluster = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary fromActiveTime.
         * @member {number} fromActiveTime
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.fromActiveTime = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary fromActivePacketsRecv.
         * @member {number} fromActivePacketsRecv
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.fromActivePacketsRecv = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary fromDroppedReason.
         * @member {string} fromDroppedReason
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.fromDroppedReason = "";
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary gapMs.
         * @member {number} gapMs
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.gapMs = 0;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary fromQualityNow.
         * @member {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null|undefined} fromQualityNow
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.fromQualityNow = null;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary toQualityNow.
         * @member {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null|undefined} toQualityNow
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.toQualityNow = null;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary fromQualityThen.
         * @member {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null|undefined} fromQualityThen
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.fromQualityThen = null;
    
        /**
         * CMsgSteamDatagramClientSwitchedPrimary toQualityThen.
         * @member {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality|null|undefined} toQualityThen
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.toQualityThen = null;
    
        /**
         * Creates a new CMsgSteamDatagramClientSwitchedPrimary instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {ICMsgSteamDatagramClientSwitchedPrimary=} [properties] Properties to set
         * @returns {CMsgSteamDatagramClientSwitchedPrimary} CMsgSteamDatagramClientSwitchedPrimary instance
         */
        CMsgSteamDatagramClientSwitchedPrimary.create = function create(properties) {
            return new CMsgSteamDatagramClientSwitchedPrimary(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientSwitchedPrimary message. Does not implicitly {@link CMsgSteamDatagramClientSwitchedPrimary.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {ICMsgSteamDatagramClientSwitchedPrimary} message CMsgSteamDatagramClientSwitchedPrimary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientSwitchedPrimary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectionId != null && Object.hasOwnProperty.call(message, "connectionId"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connectionId);
            if (message.fromIp != null && Object.hasOwnProperty.call(message, "fromIp"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.fromIp);
            if (message.fromPort != null && Object.hasOwnProperty.call(message, "fromPort"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.fromPort);
            if (message.fromRouterCluster != null && Object.hasOwnProperty.call(message, "fromRouterCluster"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.fromRouterCluster);
            if (message.fromActiveTime != null && Object.hasOwnProperty.call(message, "fromActiveTime"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.fromActiveTime);
            if (message.fromActivePacketsRecv != null && Object.hasOwnProperty.call(message, "fromActivePacketsRecv"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.fromActivePacketsRecv);
            if (message.fromDroppedReason != null && Object.hasOwnProperty.call(message, "fromDroppedReason"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.fromDroppedReason);
            if (message.gapMs != null && Object.hasOwnProperty.call(message, "gapMs"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.gapMs);
            if (message.fromQualityNow != null && Object.hasOwnProperty.call(message, "fromQualityNow"))
                $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.encode(message.fromQualityNow, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.toQualityNow != null && Object.hasOwnProperty.call(message, "toQualityNow"))
                $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.encode(message.toQualityNow, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.fromQualityThen != null && Object.hasOwnProperty.call(message, "fromQualityThen"))
                $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.encode(message.fromQualityThen, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.toQualityThen != null && Object.hasOwnProperty.call(message, "toQualityThen"))
                $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.encode(message.toQualityThen, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramClientSwitchedPrimary message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientSwitchedPrimary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {ICMsgSteamDatagramClientSwitchedPrimary} message CMsgSteamDatagramClientSwitchedPrimary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramClientSwitchedPrimary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientSwitchedPrimary message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramClientSwitchedPrimary} CMsgSteamDatagramClientSwitchedPrimary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientSwitchedPrimary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientSwitchedPrimary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.connectionId = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.fromIp = reader.fixed32();
                        break;
                    }
                case 3: {
                        message.fromPort = reader.uint32();
                        break;
                    }
                case 4: {
                        message.fromRouterCluster = reader.fixed32();
                        break;
                    }
                case 5: {
                        message.fromActiveTime = reader.uint32();
                        break;
                    }
                case 6: {
                        message.fromActivePacketsRecv = reader.uint32();
                        break;
                    }
                case 7: {
                        message.fromDroppedReason = reader.string();
                        break;
                    }
                case 8: {
                        message.gapMs = reader.uint32();
                        break;
                    }
                case 9: {
                        message.fromQualityNow = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 10: {
                        message.toQualityNow = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 11: {
                        message.fromQualityThen = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 12: {
                        message.toQualityThen = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramClientSwitchedPrimary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramClientSwitchedPrimary} CMsgSteamDatagramClientSwitchedPrimary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramClientSwitchedPrimary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramClientSwitchedPrimary message.
         * @function verify
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramClientSwitchedPrimary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                if (!$util.isInteger(message.connectionId))
                    return "connectionId: integer expected";
            if (message.fromIp != null && message.hasOwnProperty("fromIp"))
                if (!$util.isInteger(message.fromIp))
                    return "fromIp: integer expected";
            if (message.fromPort != null && message.hasOwnProperty("fromPort"))
                if (!$util.isInteger(message.fromPort))
                    return "fromPort: integer expected";
            if (message.fromRouterCluster != null && message.hasOwnProperty("fromRouterCluster"))
                if (!$util.isInteger(message.fromRouterCluster))
                    return "fromRouterCluster: integer expected";
            if (message.fromActiveTime != null && message.hasOwnProperty("fromActiveTime"))
                if (!$util.isInteger(message.fromActiveTime))
                    return "fromActiveTime: integer expected";
            if (message.fromActivePacketsRecv != null && message.hasOwnProperty("fromActivePacketsRecv"))
                if (!$util.isInteger(message.fromActivePacketsRecv))
                    return "fromActivePacketsRecv: integer expected";
            if (message.fromDroppedReason != null && message.hasOwnProperty("fromDroppedReason"))
                if (!$util.isString(message.fromDroppedReason))
                    return "fromDroppedReason: string expected";
            if (message.gapMs != null && message.hasOwnProperty("gapMs"))
                if (!$util.isInteger(message.gapMs))
                    return "gapMs: integer expected";
            if (message.fromQualityNow != null && message.hasOwnProperty("fromQualityNow")) {
                var error = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify(message.fromQualityNow);
                if (error)
                    return "fromQualityNow." + error;
            }
            if (message.toQualityNow != null && message.hasOwnProperty("toQualityNow")) {
                var error = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify(message.toQualityNow);
                if (error)
                    return "toQualityNow." + error;
            }
            if (message.fromQualityThen != null && message.hasOwnProperty("fromQualityThen")) {
                var error = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify(message.fromQualityThen);
                if (error)
                    return "fromQualityThen." + error;
            }
            if (message.toQualityThen != null && message.hasOwnProperty("toQualityThen")) {
                var error = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify(message.toQualityThen);
                if (error)
                    return "toQualityThen." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramClientSwitchedPrimary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramClientSwitchedPrimary} CMsgSteamDatagramClientSwitchedPrimary
         */
        CMsgSteamDatagramClientSwitchedPrimary.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramClientSwitchedPrimary)
                return object;
            var message = new $root.CMsgSteamDatagramClientSwitchedPrimary();
            if (object.connectionId != null)
                message.connectionId = object.connectionId >>> 0;
            if (object.fromIp != null)
                message.fromIp = object.fromIp >>> 0;
            if (object.fromPort != null)
                message.fromPort = object.fromPort >>> 0;
            if (object.fromRouterCluster != null)
                message.fromRouterCluster = object.fromRouterCluster >>> 0;
            if (object.fromActiveTime != null)
                message.fromActiveTime = object.fromActiveTime >>> 0;
            if (object.fromActivePacketsRecv != null)
                message.fromActivePacketsRecv = object.fromActivePacketsRecv >>> 0;
            if (object.fromDroppedReason != null)
                message.fromDroppedReason = String(object.fromDroppedReason);
            if (object.gapMs != null)
                message.gapMs = object.gapMs >>> 0;
            if (object.fromQualityNow != null) {
                if (typeof object.fromQualityNow !== "object")
                    throw TypeError(".CMsgSteamDatagramClientSwitchedPrimary.fromQualityNow: object expected");
                message.fromQualityNow = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.fromObject(object.fromQualityNow);
            }
            if (object.toQualityNow != null) {
                if (typeof object.toQualityNow !== "object")
                    throw TypeError(".CMsgSteamDatagramClientSwitchedPrimary.toQualityNow: object expected");
                message.toQualityNow = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.fromObject(object.toQualityNow);
            }
            if (object.fromQualityThen != null) {
                if (typeof object.fromQualityThen !== "object")
                    throw TypeError(".CMsgSteamDatagramClientSwitchedPrimary.fromQualityThen: object expected");
                message.fromQualityThen = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.fromObject(object.fromQualityThen);
            }
            if (object.toQualityThen != null) {
                if (typeof object.toQualityThen !== "object")
                    throw TypeError(".CMsgSteamDatagramClientSwitchedPrimary.toQualityThen: object expected");
                message.toQualityThen = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.fromObject(object.toQualityThen);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramClientSwitchedPrimary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {CMsgSteamDatagramClientSwitchedPrimary} message CMsgSteamDatagramClientSwitchedPrimary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramClientSwitchedPrimary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connectionId = 0;
                object.fromIp = 0;
                object.fromPort = 0;
                object.fromRouterCluster = 0;
                object.fromActiveTime = 0;
                object.fromActivePacketsRecv = 0;
                object.fromDroppedReason = "";
                object.gapMs = 0;
                object.fromQualityNow = null;
                object.toQualityNow = null;
                object.fromQualityThen = null;
                object.toQualityThen = null;
            }
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                object.connectionId = message.connectionId;
            if (message.fromIp != null && message.hasOwnProperty("fromIp"))
                object.fromIp = message.fromIp;
            if (message.fromPort != null && message.hasOwnProperty("fromPort"))
                object.fromPort = message.fromPort;
            if (message.fromRouterCluster != null && message.hasOwnProperty("fromRouterCluster"))
                object.fromRouterCluster = message.fromRouterCluster;
            if (message.fromActiveTime != null && message.hasOwnProperty("fromActiveTime"))
                object.fromActiveTime = message.fromActiveTime;
            if (message.fromActivePacketsRecv != null && message.hasOwnProperty("fromActivePacketsRecv"))
                object.fromActivePacketsRecv = message.fromActivePacketsRecv;
            if (message.fromDroppedReason != null && message.hasOwnProperty("fromDroppedReason"))
                object.fromDroppedReason = message.fromDroppedReason;
            if (message.gapMs != null && message.hasOwnProperty("gapMs"))
                object.gapMs = message.gapMs;
            if (message.fromQualityNow != null && message.hasOwnProperty("fromQualityNow"))
                object.fromQualityNow = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.toObject(message.fromQualityNow, options);
            if (message.toQualityNow != null && message.hasOwnProperty("toQualityNow"))
                object.toQualityNow = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.toObject(message.toQualityNow, options);
            if (message.fromQualityThen != null && message.hasOwnProperty("fromQualityThen"))
                object.fromQualityThen = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.toObject(message.fromQualityThen, options);
            if (message.toQualityThen != null && message.hasOwnProperty("toQualityThen"))
                object.toQualityThen = $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.toObject(message.toQualityThen, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramClientSwitchedPrimary to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramClientSwitchedPrimary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramClientSwitchedPrimary
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramClientSwitchedPrimary
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramClientSwitchedPrimary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramClientSwitchedPrimary";
        };
    
        CMsgSteamDatagramClientSwitchedPrimary.RouterQuality = (function() {
    
            /**
             * Properties of a RouterQuality.
             * @memberof CMsgSteamDatagramClientSwitchedPrimary
             * @interface IRouterQuality
             * @property {number|null} [score] RouterQuality score
             * @property {number|null} [frontPing] RouterQuality frontPing
             * @property {number|null} [backPing] RouterQuality backPing
             * @property {number|null} [secondsUntilDown] RouterQuality secondsUntilDown
             */
    
            /**
             * Constructs a new RouterQuality.
             * @memberof CMsgSteamDatagramClientSwitchedPrimary
             * @classdesc Represents a RouterQuality.
             * @implements IRouterQuality
             * @constructor
             * @param {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality=} [properties] Properties to set
             */
            function RouterQuality(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RouterQuality score.
             * @member {number} score
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @instance
             */
            RouterQuality.prototype.score = 0;
    
            /**
             * RouterQuality frontPing.
             * @member {number} frontPing
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @instance
             */
            RouterQuality.prototype.frontPing = 0;
    
            /**
             * RouterQuality backPing.
             * @member {number} backPing
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @instance
             */
            RouterQuality.prototype.backPing = 0;
    
            /**
             * RouterQuality secondsUntilDown.
             * @member {number} secondsUntilDown
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @instance
             */
            RouterQuality.prototype.secondsUntilDown = 0;
    
            /**
             * Creates a new RouterQuality instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality=} [properties] Properties to set
             * @returns {CMsgSteamDatagramClientSwitchedPrimary.RouterQuality} RouterQuality instance
             */
            RouterQuality.create = function create(properties) {
                return new RouterQuality(properties);
            };
    
            /**
             * Encodes the specified RouterQuality message. Does not implicitly {@link CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality} message RouterQuality message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RouterQuality.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.score);
                if (message.frontPing != null && Object.hasOwnProperty.call(message, "frontPing"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.frontPing);
                if (message.backPing != null && Object.hasOwnProperty.call(message, "backPing"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.backPing);
                if (message.secondsUntilDown != null && Object.hasOwnProperty.call(message, "secondsUntilDown"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.secondsUntilDown);
                return writer;
            };
    
            /**
             * Encodes the specified RouterQuality message, length delimited. Does not implicitly {@link CMsgSteamDatagramClientSwitchedPrimary.RouterQuality.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {CMsgSteamDatagramClientSwitchedPrimary.IRouterQuality} message RouterQuality message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RouterQuality.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RouterQuality message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramClientSwitchedPrimary.RouterQuality} RouterQuality
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RouterQuality.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.score = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.frontPing = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.backPing = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.secondsUntilDown = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RouterQuality message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramClientSwitchedPrimary.RouterQuality} RouterQuality
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RouterQuality.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RouterQuality message.
             * @function verify
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RouterQuality.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.score != null && message.hasOwnProperty("score"))
                    if (!$util.isInteger(message.score))
                        return "score: integer expected";
                if (message.frontPing != null && message.hasOwnProperty("frontPing"))
                    if (!$util.isInteger(message.frontPing))
                        return "frontPing: integer expected";
                if (message.backPing != null && message.hasOwnProperty("backPing"))
                    if (!$util.isInteger(message.backPing))
                        return "backPing: integer expected";
                if (message.secondsUntilDown != null && message.hasOwnProperty("secondsUntilDown"))
                    if (!$util.isInteger(message.secondsUntilDown))
                        return "secondsUntilDown: integer expected";
                return null;
            };
    
            /**
             * Creates a RouterQuality message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramClientSwitchedPrimary.RouterQuality} RouterQuality
             */
            RouterQuality.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
                    return object;
                var message = new $root.CMsgSteamDatagramClientSwitchedPrimary.RouterQuality();
                if (object.score != null)
                    message.score = object.score >>> 0;
                if (object.frontPing != null)
                    message.frontPing = object.frontPing >>> 0;
                if (object.backPing != null)
                    message.backPing = object.backPing >>> 0;
                if (object.secondsUntilDown != null)
                    message.secondsUntilDown = object.secondsUntilDown >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a RouterQuality message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {CMsgSteamDatagramClientSwitchedPrimary.RouterQuality} message RouterQuality
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RouterQuality.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.score = 0;
                    object.frontPing = 0;
                    object.backPing = 0;
                    object.secondsUntilDown = 0;
                }
                if (message.score != null && message.hasOwnProperty("score"))
                    object.score = message.score;
                if (message.frontPing != null && message.hasOwnProperty("frontPing"))
                    object.frontPing = message.frontPing;
                if (message.backPing != null && message.hasOwnProperty("backPing"))
                    object.backPing = message.backPing;
                if (message.secondsUntilDown != null && message.hasOwnProperty("secondsUntilDown"))
                    object.secondsUntilDown = message.secondsUntilDown;
                return object;
            };
    
            /**
             * Converts this RouterQuality to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RouterQuality.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for RouterQuality
             * @function getTypeUrl
             * @memberof CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RouterQuality.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamDatagramClientSwitchedPrimary.RouterQuality";
            };
    
            return RouterQuality;
        })();
    
        return CMsgSteamDatagramClientSwitchedPrimary;
    })();
    
    $root.CMsgSteamDatagramConnectRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectRequest.
         * @exports ICMsgSteamDatagramConnectRequest
         * @interface ICMsgSteamDatagramConnectRequest
         * @property {number|null} [connectionId] CMsgSteamDatagramConnectRequest connectionId
         * @property {number|Long|null} [myTimestamp] CMsgSteamDatagramConnectRequest myTimestamp
         * @property {number|null} [pingEstMs] CMsgSteamDatagramConnectRequest pingEstMs
         * @property {number|null} [virtualPort] CMsgSteamDatagramConnectRequest virtualPort
         * @property {number|null} [gameserverRelaySessionId] CMsgSteamDatagramConnectRequest gameserverRelaySessionId
         * @property {ICMsgSteamDatagramSessionCryptInfoSigned|null} [crypt] CMsgSteamDatagramConnectRequest crypt
         * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] CMsgSteamDatagramConnectRequest cert
         * @property {number|Long|null} [routingSecret] CMsgSteamDatagramConnectRequest routingSecret
         * @property {number|Long|null} [legacyClientSteamId] CMsgSteamDatagramConnectRequest legacyClientSteamId
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectRequest.
         * @exports CMsgSteamDatagramConnectRequest
         * @classdesc Represents a CMsgSteamDatagramConnectRequest.
         * @implements ICMsgSteamDatagramConnectRequest
         * @constructor
         * @param {ICMsgSteamDatagramConnectRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectRequest connectionId.
         * @member {number} connectionId
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.connectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectRequest myTimestamp.
         * @member {number|Long} myTimestamp
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.myTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectRequest pingEstMs.
         * @member {number} pingEstMs
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.pingEstMs = 0;
    
        /**
         * CMsgSteamDatagramConnectRequest virtualPort.
         * @member {number} virtualPort
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.virtualPort = 0;
    
        /**
         * CMsgSteamDatagramConnectRequest gameserverRelaySessionId.
         * @member {number} gameserverRelaySessionId
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.gameserverRelaySessionId = 0;
    
        /**
         * CMsgSteamDatagramConnectRequest crypt.
         * @member {ICMsgSteamDatagramSessionCryptInfoSigned|null|undefined} crypt
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.crypt = null;
    
        /**
         * CMsgSteamDatagramConnectRequest cert.
         * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.cert = null;
    
        /**
         * CMsgSteamDatagramConnectRequest routingSecret.
         * @member {number|Long} routingSecret
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.routingSecret = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectRequest legacyClientSteamId.
         * @member {number|Long} legacyClientSteamId
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         */
        CMsgSteamDatagramConnectRequest.prototype.legacyClientSteamId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {ICMsgSteamDatagramConnectRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectRequest} CMsgSteamDatagramConnectRequest instance
         */
        CMsgSteamDatagramConnectRequest.create = function create(properties) {
            return new CMsgSteamDatagramConnectRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectRequest message. Does not implicitly {@link CMsgSteamDatagramConnectRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {ICMsgSteamDatagramConnectRequest} message CMsgSteamDatagramConnectRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectionId != null && Object.hasOwnProperty.call(message, "connectionId"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connectionId);
            if (message.gameserverRelaySessionId != null && Object.hasOwnProperty.call(message, "gameserverRelaySessionId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameserverRelaySessionId);
            if (message.legacyClientSteamId != null && Object.hasOwnProperty.call(message, "legacyClientSteamId"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.legacyClientSteamId);
            if (message.myTimestamp != null && Object.hasOwnProperty.call(message, "myTimestamp"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.myTimestamp);
            if (message.pingEstMs != null && Object.hasOwnProperty.call(message, "pingEstMs"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.pingEstMs);
            if (message.crypt != null && Object.hasOwnProperty.call(message, "crypt"))
                $root.CMsgSteamDatagramSessionCryptInfoSigned.encode(message.crypt, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.virtualPort != null && Object.hasOwnProperty.call(message, "virtualPort"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.virtualPort);
            if (message.routingSecret != null && Object.hasOwnProperty.call(message, "routingSecret"))
                writer.uint32(/* id 10, wireType 1 =*/81).fixed64(message.routingSecret);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {ICMsgSteamDatagramConnectRequest} message CMsgSteamDatagramConnectRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectRequest} CMsgSteamDatagramConnectRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.connectionId = reader.fixed32();
                        break;
                    }
                case 4: {
                        message.myTimestamp = reader.fixed64();
                        break;
                    }
                case 5: {
                        message.pingEstMs = reader.uint32();
                        break;
                    }
                case 9: {
                        message.virtualPort = reader.uint32();
                        break;
                    }
                case 2: {
                        message.gameserverRelaySessionId = reader.uint32();
                        break;
                    }
                case 6: {
                        message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.decode(reader, reader.uint32());
                        break;
                    }
                case 7: {
                        message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                        break;
                    }
                case 10: {
                        message.routingSecret = reader.fixed64();
                        break;
                    }
                case 3: {
                        message.legacyClientSteamId = reader.fixed64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectRequest} CMsgSteamDatagramConnectRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                if (!$util.isInteger(message.connectionId))
                    return "connectionId: integer expected";
            if (message.myTimestamp != null && message.hasOwnProperty("myTimestamp"))
                if (!$util.isInteger(message.myTimestamp) && !(message.myTimestamp && $util.isInteger(message.myTimestamp.low) && $util.isInteger(message.myTimestamp.high)))
                    return "myTimestamp: integer|Long expected";
            if (message.pingEstMs != null && message.hasOwnProperty("pingEstMs"))
                if (!$util.isInteger(message.pingEstMs))
                    return "pingEstMs: integer expected";
            if (message.virtualPort != null && message.hasOwnProperty("virtualPort"))
                if (!$util.isInteger(message.virtualPort))
                    return "virtualPort: integer expected";
            if (message.gameserverRelaySessionId != null && message.hasOwnProperty("gameserverRelaySessionId"))
                if (!$util.isInteger(message.gameserverRelaySessionId))
                    return "gameserverRelaySessionId: integer expected";
            if (message.crypt != null && message.hasOwnProperty("crypt")) {
                var error = $root.CMsgSteamDatagramSessionCryptInfoSigned.verify(message.crypt);
                if (error)
                    return "crypt." + error;
            }
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            if (message.routingSecret != null && message.hasOwnProperty("routingSecret"))
                if (!$util.isInteger(message.routingSecret) && !(message.routingSecret && $util.isInteger(message.routingSecret.low) && $util.isInteger(message.routingSecret.high)))
                    return "routingSecret: integer|Long expected";
            if (message.legacyClientSteamId != null && message.hasOwnProperty("legacyClientSteamId"))
                if (!$util.isInteger(message.legacyClientSteamId) && !(message.legacyClientSteamId && $util.isInteger(message.legacyClientSteamId.low) && $util.isInteger(message.legacyClientSteamId.high)))
                    return "legacyClientSteamId: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectRequest} CMsgSteamDatagramConnectRequest
         */
        CMsgSteamDatagramConnectRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectRequest)
                return object;
            var message = new $root.CMsgSteamDatagramConnectRequest();
            if (object.connectionId != null)
                message.connectionId = object.connectionId >>> 0;
            if (object.myTimestamp != null)
                if ($util.Long)
                    (message.myTimestamp = $util.Long.fromValue(object.myTimestamp)).unsigned = false;
                else if (typeof object.myTimestamp === "string")
                    message.myTimestamp = parseInt(object.myTimestamp, 10);
                else if (typeof object.myTimestamp === "number")
                    message.myTimestamp = object.myTimestamp;
                else if (typeof object.myTimestamp === "object")
                    message.myTimestamp = new $util.LongBits(object.myTimestamp.low >>> 0, object.myTimestamp.high >>> 0).toNumber();
            if (object.pingEstMs != null)
                message.pingEstMs = object.pingEstMs >>> 0;
            if (object.virtualPort != null)
                message.virtualPort = object.virtualPort >>> 0;
            if (object.gameserverRelaySessionId != null)
                message.gameserverRelaySessionId = object.gameserverRelaySessionId >>> 0;
            if (object.crypt != null) {
                if (typeof object.crypt !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectRequest.crypt: object expected");
                message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.fromObject(object.crypt);
            }
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectRequest.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
            }
            if (object.routingSecret != null)
                if ($util.Long)
                    (message.routingSecret = $util.Long.fromValue(object.routingSecret)).unsigned = false;
                else if (typeof object.routingSecret === "string")
                    message.routingSecret = parseInt(object.routingSecret, 10);
                else if (typeof object.routingSecret === "number")
                    message.routingSecret = object.routingSecret;
                else if (typeof object.routingSecret === "object")
                    message.routingSecret = new $util.LongBits(object.routingSecret.low >>> 0, object.routingSecret.high >>> 0).toNumber();
            if (object.legacyClientSteamId != null)
                if ($util.Long)
                    (message.legacyClientSteamId = $util.Long.fromValue(object.legacyClientSteamId)).unsigned = false;
                else if (typeof object.legacyClientSteamId === "string")
                    message.legacyClientSteamId = parseInt(object.legacyClientSteamId, 10);
                else if (typeof object.legacyClientSteamId === "number")
                    message.legacyClientSteamId = object.legacyClientSteamId;
                else if (typeof object.legacyClientSteamId === "object")
                    message.legacyClientSteamId = new $util.LongBits(object.legacyClientSteamId.low >>> 0, object.legacyClientSteamId.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {CMsgSteamDatagramConnectRequest} message CMsgSteamDatagramConnectRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connectionId = 0;
                object.gameserverRelaySessionId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacyClientSteamId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacyClientSteamId = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.myTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.myTimestamp = options.longs === String ? "0" : 0;
                object.pingEstMs = 0;
                object.crypt = null;
                object.cert = null;
                object.virtualPort = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.routingSecret = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.routingSecret = options.longs === String ? "0" : 0;
            }
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                object.connectionId = message.connectionId;
            if (message.gameserverRelaySessionId != null && message.hasOwnProperty("gameserverRelaySessionId"))
                object.gameserverRelaySessionId = message.gameserverRelaySessionId;
            if (message.legacyClientSteamId != null && message.hasOwnProperty("legacyClientSteamId"))
                if (typeof message.legacyClientSteamId === "number")
                    object.legacyClientSteamId = options.longs === String ? String(message.legacyClientSteamId) : message.legacyClientSteamId;
                else
                    object.legacyClientSteamId = options.longs === String ? $util.Long.prototype.toString.call(message.legacyClientSteamId) : options.longs === Number ? new $util.LongBits(message.legacyClientSteamId.low >>> 0, message.legacyClientSteamId.high >>> 0).toNumber() : message.legacyClientSteamId;
            if (message.myTimestamp != null && message.hasOwnProperty("myTimestamp"))
                if (typeof message.myTimestamp === "number")
                    object.myTimestamp = options.longs === String ? String(message.myTimestamp) : message.myTimestamp;
                else
                    object.myTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.myTimestamp) : options.longs === Number ? new $util.LongBits(message.myTimestamp.low >>> 0, message.myTimestamp.high >>> 0).toNumber() : message.myTimestamp;
            if (message.pingEstMs != null && message.hasOwnProperty("pingEstMs"))
                object.pingEstMs = message.pingEstMs;
            if (message.crypt != null && message.hasOwnProperty("crypt"))
                object.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.toObject(message.crypt, options);
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
            if (message.virtualPort != null && message.hasOwnProperty("virtualPort"))
                object.virtualPort = message.virtualPort;
            if (message.routingSecret != null && message.hasOwnProperty("routingSecret"))
                if (typeof message.routingSecret === "number")
                    object.routingSecret = options.longs === String ? String(message.routingSecret) : message.routingSecret;
                else
                    object.routingSecret = options.longs === String ? $util.Long.prototype.toString.call(message.routingSecret) : options.longs === Number ? new $util.LongBits(message.routingSecret.low >>> 0, message.routingSecret.high >>> 0).toNumber() : message.routingSecret;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramConnectRequest
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramConnectRequest
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramConnectRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramConnectRequest";
        };
    
        return CMsgSteamDatagramConnectRequest;
    })();
    
    $root.CMsgSteamDatagramConnectOK = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectOK.
         * @exports ICMsgSteamDatagramConnectOK
         * @interface ICMsgSteamDatagramConnectOK
         * @property {number|null} [clientConnectionId] CMsgSteamDatagramConnectOK clientConnectionId
         * @property {number|null} [serverConnectionId] CMsgSteamDatagramConnectOK serverConnectionId
         * @property {number|Long|null} [yourTimestamp] CMsgSteamDatagramConnectOK yourTimestamp
         * @property {number|null} [delayTimeUsec] CMsgSteamDatagramConnectOK delayTimeUsec
         * @property {number|null} [gameserverRelaySessionId] CMsgSteamDatagramConnectOK gameserverRelaySessionId
         * @property {ICMsgSteamDatagramSessionCryptInfoSigned|null} [crypt] CMsgSteamDatagramConnectOK crypt
         * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] CMsgSteamDatagramConnectOK cert
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectOK.
         * @exports CMsgSteamDatagramConnectOK
         * @classdesc Represents a CMsgSteamDatagramConnectOK.
         * @implements ICMsgSteamDatagramConnectOK
         * @constructor
         * @param {ICMsgSteamDatagramConnectOK=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectOK(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectOK clientConnectionId.
         * @member {number} clientConnectionId
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.clientConnectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectOK serverConnectionId.
         * @member {number} serverConnectionId
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.serverConnectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectOK yourTimestamp.
         * @member {number|Long} yourTimestamp
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.yourTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectOK delayTimeUsec.
         * @member {number} delayTimeUsec
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.delayTimeUsec = 0;
    
        /**
         * CMsgSteamDatagramConnectOK gameserverRelaySessionId.
         * @member {number} gameserverRelaySessionId
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.gameserverRelaySessionId = 0;
    
        /**
         * CMsgSteamDatagramConnectOK crypt.
         * @member {ICMsgSteamDatagramSessionCryptInfoSigned|null|undefined} crypt
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.crypt = null;
    
        /**
         * CMsgSteamDatagramConnectOK cert.
         * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         */
        CMsgSteamDatagramConnectOK.prototype.cert = null;
    
        /**
         * Creates a new CMsgSteamDatagramConnectOK instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {ICMsgSteamDatagramConnectOK=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectOK} CMsgSteamDatagramConnectOK instance
         */
        CMsgSteamDatagramConnectOK.create = function create(properties) {
            return new CMsgSteamDatagramConnectOK(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectOK message. Does not implicitly {@link CMsgSteamDatagramConnectOK.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {ICMsgSteamDatagramConnectOK} message CMsgSteamDatagramConnectOK message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectOK.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.clientConnectionId != null && Object.hasOwnProperty.call(message, "clientConnectionId"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.clientConnectionId);
            if (message.gameserverRelaySessionId != null && Object.hasOwnProperty.call(message, "gameserverRelaySessionId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameserverRelaySessionId);
            if (message.yourTimestamp != null && Object.hasOwnProperty.call(message, "yourTimestamp"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.yourTimestamp);
            if (message.delayTimeUsec != null && Object.hasOwnProperty.call(message, "delayTimeUsec"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.delayTimeUsec);
            if (message.crypt != null && Object.hasOwnProperty.call(message, "crypt"))
                $root.CMsgSteamDatagramSessionCryptInfoSigned.encode(message.crypt, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.serverConnectionId != null && Object.hasOwnProperty.call(message, "serverConnectionId"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.serverConnectionId);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectOK message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectOK.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {ICMsgSteamDatagramConnectOK} message CMsgSteamDatagramConnectOK message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectOK.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectOK message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectOK} CMsgSteamDatagramConnectOK
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectOK.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectOK();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.clientConnectionId = reader.fixed32();
                        break;
                    }
                case 7: {
                        message.serverConnectionId = reader.fixed32();
                        break;
                    }
                case 3: {
                        message.yourTimestamp = reader.fixed64();
                        break;
                    }
                case 4: {
                        message.delayTimeUsec = reader.uint32();
                        break;
                    }
                case 2: {
                        message.gameserverRelaySessionId = reader.uint32();
                        break;
                    }
                case 5: {
                        message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.decode(reader, reader.uint32());
                        break;
                    }
                case 6: {
                        message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectOK message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectOK} CMsgSteamDatagramConnectOK
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectOK.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectOK message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectOK.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                if (!$util.isInteger(message.clientConnectionId))
                    return "clientConnectionId: integer expected";
            if (message.serverConnectionId != null && message.hasOwnProperty("serverConnectionId"))
                if (!$util.isInteger(message.serverConnectionId))
                    return "serverConnectionId: integer expected";
            if (message.yourTimestamp != null && message.hasOwnProperty("yourTimestamp"))
                if (!$util.isInteger(message.yourTimestamp) && !(message.yourTimestamp && $util.isInteger(message.yourTimestamp.low) && $util.isInteger(message.yourTimestamp.high)))
                    return "yourTimestamp: integer|Long expected";
            if (message.delayTimeUsec != null && message.hasOwnProperty("delayTimeUsec"))
                if (!$util.isInteger(message.delayTimeUsec))
                    return "delayTimeUsec: integer expected";
            if (message.gameserverRelaySessionId != null && message.hasOwnProperty("gameserverRelaySessionId"))
                if (!$util.isInteger(message.gameserverRelaySessionId))
                    return "gameserverRelaySessionId: integer expected";
            if (message.crypt != null && message.hasOwnProperty("crypt")) {
                var error = $root.CMsgSteamDatagramSessionCryptInfoSigned.verify(message.crypt);
                if (error)
                    return "crypt." + error;
            }
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectOK message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectOK} CMsgSteamDatagramConnectOK
         */
        CMsgSteamDatagramConnectOK.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectOK)
                return object;
            var message = new $root.CMsgSteamDatagramConnectOK();
            if (object.clientConnectionId != null)
                message.clientConnectionId = object.clientConnectionId >>> 0;
            if (object.serverConnectionId != null)
                message.serverConnectionId = object.serverConnectionId >>> 0;
            if (object.yourTimestamp != null)
                if ($util.Long)
                    (message.yourTimestamp = $util.Long.fromValue(object.yourTimestamp)).unsigned = false;
                else if (typeof object.yourTimestamp === "string")
                    message.yourTimestamp = parseInt(object.yourTimestamp, 10);
                else if (typeof object.yourTimestamp === "number")
                    message.yourTimestamp = object.yourTimestamp;
                else if (typeof object.yourTimestamp === "object")
                    message.yourTimestamp = new $util.LongBits(object.yourTimestamp.low >>> 0, object.yourTimestamp.high >>> 0).toNumber();
            if (object.delayTimeUsec != null)
                message.delayTimeUsec = object.delayTimeUsec >>> 0;
            if (object.gameserverRelaySessionId != null)
                message.gameserverRelaySessionId = object.gameserverRelaySessionId >>> 0;
            if (object.crypt != null) {
                if (typeof object.crypt !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectOK.crypt: object expected");
                message.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.fromObject(object.crypt);
            }
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectOK.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectOK message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {CMsgSteamDatagramConnectOK} message CMsgSteamDatagramConnectOK
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectOK.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.clientConnectionId = 0;
                object.gameserverRelaySessionId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.yourTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.yourTimestamp = options.longs === String ? "0" : 0;
                object.delayTimeUsec = 0;
                object.crypt = null;
                object.cert = null;
                object.serverConnectionId = 0;
            }
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                object.clientConnectionId = message.clientConnectionId;
            if (message.gameserverRelaySessionId != null && message.hasOwnProperty("gameserverRelaySessionId"))
                object.gameserverRelaySessionId = message.gameserverRelaySessionId;
            if (message.yourTimestamp != null && message.hasOwnProperty("yourTimestamp"))
                if (typeof message.yourTimestamp === "number")
                    object.yourTimestamp = options.longs === String ? String(message.yourTimestamp) : message.yourTimestamp;
                else
                    object.yourTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.yourTimestamp) : options.longs === Number ? new $util.LongBits(message.yourTimestamp.low >>> 0, message.yourTimestamp.high >>> 0).toNumber() : message.yourTimestamp;
            if (message.delayTimeUsec != null && message.hasOwnProperty("delayTimeUsec"))
                object.delayTimeUsec = message.delayTimeUsec;
            if (message.crypt != null && message.hasOwnProperty("crypt"))
                object.crypt = $root.CMsgSteamDatagramSessionCryptInfoSigned.toObject(message.crypt, options);
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
            if (message.serverConnectionId != null && message.hasOwnProperty("serverConnectionId"))
                object.serverConnectionId = message.serverConnectionId;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectOK to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectOK
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectOK.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramConnectOK
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramConnectOK
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramConnectOK.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramConnectOK";
        };
    
        return CMsgSteamDatagramConnectOK;
    })();
    
    $root.CMsgSteamNetworkingP2PSDRRoutingSummary = (function() {
    
        /**
         * Properties of a CMsgSteamNetworkingP2PSDRRoutingSummary.
         * @exports ICMsgSteamNetworkingP2PSDRRoutingSummary
         * @interface ICMsgSteamNetworkingP2PSDRRoutingSummary
         * @property {number|null} [initialPing] CMsgSteamNetworkingP2PSDRRoutingSummary initialPing
         * @property {number|null} [initialPingFrontLocal] CMsgSteamNetworkingP2PSDRRoutingSummary initialPingFrontLocal
         * @property {number|null} [initialPingFrontRemote] CMsgSteamNetworkingP2PSDRRoutingSummary initialPingFrontRemote
         * @property {number|null} [initialScore] CMsgSteamNetworkingP2PSDRRoutingSummary initialScore
         * @property {number|null} [initialPopLocal] CMsgSteamNetworkingP2PSDRRoutingSummary initialPopLocal
         * @property {number|null} [initialPopRemote] CMsgSteamNetworkingP2PSDRRoutingSummary initialPopRemote
         * @property {number|null} [bestPing] CMsgSteamNetworkingP2PSDRRoutingSummary bestPing
         * @property {number|null} [bestPingFrontLocal] CMsgSteamNetworkingP2PSDRRoutingSummary bestPingFrontLocal
         * @property {number|null} [bestPingFrontRemote] CMsgSteamNetworkingP2PSDRRoutingSummary bestPingFrontRemote
         * @property {number|null} [bestScore] CMsgSteamNetworkingP2PSDRRoutingSummary bestScore
         * @property {number|null} [bestPopLocal] CMsgSteamNetworkingP2PSDRRoutingSummary bestPopLocal
         * @property {number|null} [bestPopRemote] CMsgSteamNetworkingP2PSDRRoutingSummary bestPopRemote
         * @property {number|null} [bestTime] CMsgSteamNetworkingP2PSDRRoutingSummary bestTime
         * @property {number|null} [negotiationMs] CMsgSteamNetworkingP2PSDRRoutingSummary negotiationMs
         * @property {number|null} [selectedSeconds] CMsgSteamNetworkingP2PSDRRoutingSummary selectedSeconds
         */
    
        /**
         * Constructs a new CMsgSteamNetworkingP2PSDRRoutingSummary.
         * @exports CMsgSteamNetworkingP2PSDRRoutingSummary
         * @classdesc Represents a CMsgSteamNetworkingP2PSDRRoutingSummary.
         * @implements ICMsgSteamNetworkingP2PSDRRoutingSummary
         * @constructor
         * @param {ICMsgSteamNetworkingP2PSDRRoutingSummary=} [properties] Properties to set
         */
        function CMsgSteamNetworkingP2PSDRRoutingSummary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initialPing.
         * @member {number} initialPing
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initialPing = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initialPingFrontLocal.
         * @member {number} initialPingFrontLocal
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initialPingFrontLocal = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initialPingFrontRemote.
         * @member {number} initialPingFrontRemote
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initialPingFrontRemote = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initialScore.
         * @member {number} initialScore
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initialScore = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initialPopLocal.
         * @member {number} initialPopLocal
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initialPopLocal = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary initialPopRemote.
         * @member {number} initialPopRemote
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.initialPopRemote = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary bestPing.
         * @member {number} bestPing
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.bestPing = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary bestPingFrontLocal.
         * @member {number} bestPingFrontLocal
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.bestPingFrontLocal = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary bestPingFrontRemote.
         * @member {number} bestPingFrontRemote
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.bestPingFrontRemote = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary bestScore.
         * @member {number} bestScore
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.bestScore = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary bestPopLocal.
         * @member {number} bestPopLocal
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.bestPopLocal = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary bestPopRemote.
         * @member {number} bestPopRemote
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.bestPopRemote = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary bestTime.
         * @member {number} bestTime
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.bestTime = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary negotiationMs.
         * @member {number} negotiationMs
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.negotiationMs = 0;
    
        /**
         * CMsgSteamNetworkingP2PSDRRoutingSummary selectedSeconds.
         * @member {number} selectedSeconds
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.selectedSeconds = 0;
    
        /**
         * Creates a new CMsgSteamNetworkingP2PSDRRoutingSummary instance using the specified properties.
         * @function create
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {ICMsgSteamNetworkingP2PSDRRoutingSummary=} [properties] Properties to set
         * @returns {CMsgSteamNetworkingP2PSDRRoutingSummary} CMsgSteamNetworkingP2PSDRRoutingSummary instance
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.create = function create(properties) {
            return new CMsgSteamNetworkingP2PSDRRoutingSummary(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingP2PSDRRoutingSummary message. Does not implicitly {@link CMsgSteamNetworkingP2PSDRRoutingSummary.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {ICMsgSteamNetworkingP2PSDRRoutingSummary} message CMsgSteamNetworkingP2PSDRRoutingSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.initialPing != null && Object.hasOwnProperty.call(message, "initialPing"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.initialPing);
            if (message.initialPingFrontLocal != null && Object.hasOwnProperty.call(message, "initialPingFrontLocal"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.initialPingFrontLocal);
            if (message.initialPingFrontRemote != null && Object.hasOwnProperty.call(message, "initialPingFrontRemote"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.initialPingFrontRemote);
            if (message.initialScore != null && Object.hasOwnProperty.call(message, "initialScore"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.initialScore);
            if (message.initialPopLocal != null && Object.hasOwnProperty.call(message, "initialPopLocal"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.initialPopLocal);
            if (message.initialPopRemote != null && Object.hasOwnProperty.call(message, "initialPopRemote"))
                writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.initialPopRemote);
            if (message.negotiationMs != null && Object.hasOwnProperty.call(message, "negotiationMs"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.negotiationMs);
            if (message.selectedSeconds != null && Object.hasOwnProperty.call(message, "selectedSeconds"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.selectedSeconds);
            if (message.bestPing != null && Object.hasOwnProperty.call(message, "bestPing"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.bestPing);
            if (message.bestPingFrontLocal != null && Object.hasOwnProperty.call(message, "bestPingFrontLocal"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.bestPingFrontLocal);
            if (message.bestPingFrontRemote != null && Object.hasOwnProperty.call(message, "bestPingFrontRemote"))
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.bestPingFrontRemote);
            if (message.bestScore != null && Object.hasOwnProperty.call(message, "bestScore"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.bestScore);
            if (message.bestPopLocal != null && Object.hasOwnProperty.call(message, "bestPopLocal"))
                writer.uint32(/* id 15, wireType 5 =*/125).fixed32(message.bestPopLocal);
            if (message.bestPopRemote != null && Object.hasOwnProperty.call(message, "bestPopRemote"))
                writer.uint32(/* id 16, wireType 5 =*/133).fixed32(message.bestPopRemote);
            if (message.bestTime != null && Object.hasOwnProperty.call(message, "bestTime"))
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.bestTime);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamNetworkingP2PSDRRoutingSummary message, length delimited. Does not implicitly {@link CMsgSteamNetworkingP2PSDRRoutingSummary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {ICMsgSteamNetworkingP2PSDRRoutingSummary} message CMsgSteamNetworkingP2PSDRRoutingSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamNetworkingP2PSDRRoutingSummary message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamNetworkingP2PSDRRoutingSummary} CMsgSteamNetworkingP2PSDRRoutingSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamNetworkingP2PSDRRoutingSummary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.initialPing = reader.uint32();
                        break;
                    }
                case 2: {
                        message.initialPingFrontLocal = reader.uint32();
                        break;
                    }
                case 3: {
                        message.initialPingFrontRemote = reader.uint32();
                        break;
                    }
                case 4: {
                        message.initialScore = reader.uint32();
                        break;
                    }
                case 5: {
                        message.initialPopLocal = reader.fixed32();
                        break;
                    }
                case 6: {
                        message.initialPopRemote = reader.fixed32();
                        break;
                    }
                case 11: {
                        message.bestPing = reader.uint32();
                        break;
                    }
                case 12: {
                        message.bestPingFrontLocal = reader.uint32();
                        break;
                    }
                case 13: {
                        message.bestPingFrontRemote = reader.uint32();
                        break;
                    }
                case 14: {
                        message.bestScore = reader.uint32();
                        break;
                    }
                case 15: {
                        message.bestPopLocal = reader.fixed32();
                        break;
                    }
                case 16: {
                        message.bestPopRemote = reader.fixed32();
                        break;
                    }
                case 17: {
                        message.bestTime = reader.uint32();
                        break;
                    }
                case 7: {
                        message.negotiationMs = reader.uint32();
                        break;
                    }
                case 8: {
                        message.selectedSeconds = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamNetworkingP2PSDRRoutingSummary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamNetworkingP2PSDRRoutingSummary} CMsgSteamNetworkingP2PSDRRoutingSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamNetworkingP2PSDRRoutingSummary message.
         * @function verify
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.initialPing != null && message.hasOwnProperty("initialPing"))
                if (!$util.isInteger(message.initialPing))
                    return "initialPing: integer expected";
            if (message.initialPingFrontLocal != null && message.hasOwnProperty("initialPingFrontLocal"))
                if (!$util.isInteger(message.initialPingFrontLocal))
                    return "initialPingFrontLocal: integer expected";
            if (message.initialPingFrontRemote != null && message.hasOwnProperty("initialPingFrontRemote"))
                if (!$util.isInteger(message.initialPingFrontRemote))
                    return "initialPingFrontRemote: integer expected";
            if (message.initialScore != null && message.hasOwnProperty("initialScore"))
                if (!$util.isInteger(message.initialScore))
                    return "initialScore: integer expected";
            if (message.initialPopLocal != null && message.hasOwnProperty("initialPopLocal"))
                if (!$util.isInteger(message.initialPopLocal))
                    return "initialPopLocal: integer expected";
            if (message.initialPopRemote != null && message.hasOwnProperty("initialPopRemote"))
                if (!$util.isInteger(message.initialPopRemote))
                    return "initialPopRemote: integer expected";
            if (message.bestPing != null && message.hasOwnProperty("bestPing"))
                if (!$util.isInteger(message.bestPing))
                    return "bestPing: integer expected";
            if (message.bestPingFrontLocal != null && message.hasOwnProperty("bestPingFrontLocal"))
                if (!$util.isInteger(message.bestPingFrontLocal))
                    return "bestPingFrontLocal: integer expected";
            if (message.bestPingFrontRemote != null && message.hasOwnProperty("bestPingFrontRemote"))
                if (!$util.isInteger(message.bestPingFrontRemote))
                    return "bestPingFrontRemote: integer expected";
            if (message.bestScore != null && message.hasOwnProperty("bestScore"))
                if (!$util.isInteger(message.bestScore))
                    return "bestScore: integer expected";
            if (message.bestPopLocal != null && message.hasOwnProperty("bestPopLocal"))
                if (!$util.isInteger(message.bestPopLocal))
                    return "bestPopLocal: integer expected";
            if (message.bestPopRemote != null && message.hasOwnProperty("bestPopRemote"))
                if (!$util.isInteger(message.bestPopRemote))
                    return "bestPopRemote: integer expected";
            if (message.bestTime != null && message.hasOwnProperty("bestTime"))
                if (!$util.isInteger(message.bestTime))
                    return "bestTime: integer expected";
            if (message.negotiationMs != null && message.hasOwnProperty("negotiationMs"))
                if (!$util.isInteger(message.negotiationMs))
                    return "negotiationMs: integer expected";
            if (message.selectedSeconds != null && message.hasOwnProperty("selectedSeconds"))
                if (!$util.isInteger(message.selectedSeconds))
                    return "selectedSeconds: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamNetworkingP2PSDRRoutingSummary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamNetworkingP2PSDRRoutingSummary} CMsgSteamNetworkingP2PSDRRoutingSummary
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamNetworkingP2PSDRRoutingSummary)
                return object;
            var message = new $root.CMsgSteamNetworkingP2PSDRRoutingSummary();
            if (object.initialPing != null)
                message.initialPing = object.initialPing >>> 0;
            if (object.initialPingFrontLocal != null)
                message.initialPingFrontLocal = object.initialPingFrontLocal >>> 0;
            if (object.initialPingFrontRemote != null)
                message.initialPingFrontRemote = object.initialPingFrontRemote >>> 0;
            if (object.initialScore != null)
                message.initialScore = object.initialScore >>> 0;
            if (object.initialPopLocal != null)
                message.initialPopLocal = object.initialPopLocal >>> 0;
            if (object.initialPopRemote != null)
                message.initialPopRemote = object.initialPopRemote >>> 0;
            if (object.bestPing != null)
                message.bestPing = object.bestPing >>> 0;
            if (object.bestPingFrontLocal != null)
                message.bestPingFrontLocal = object.bestPingFrontLocal >>> 0;
            if (object.bestPingFrontRemote != null)
                message.bestPingFrontRemote = object.bestPingFrontRemote >>> 0;
            if (object.bestScore != null)
                message.bestScore = object.bestScore >>> 0;
            if (object.bestPopLocal != null)
                message.bestPopLocal = object.bestPopLocal >>> 0;
            if (object.bestPopRemote != null)
                message.bestPopRemote = object.bestPopRemote >>> 0;
            if (object.bestTime != null)
                message.bestTime = object.bestTime >>> 0;
            if (object.negotiationMs != null)
                message.negotiationMs = object.negotiationMs >>> 0;
            if (object.selectedSeconds != null)
                message.selectedSeconds = object.selectedSeconds >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamNetworkingP2PSDRRoutingSummary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {CMsgSteamNetworkingP2PSDRRoutingSummary} message CMsgSteamNetworkingP2PSDRRoutingSummary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.initialPing = 0;
                object.initialPingFrontLocal = 0;
                object.initialPingFrontRemote = 0;
                object.initialScore = 0;
                object.initialPopLocal = 0;
                object.initialPopRemote = 0;
                object.negotiationMs = 0;
                object.selectedSeconds = 0;
                object.bestPing = 0;
                object.bestPingFrontLocal = 0;
                object.bestPingFrontRemote = 0;
                object.bestScore = 0;
                object.bestPopLocal = 0;
                object.bestPopRemote = 0;
                object.bestTime = 0;
            }
            if (message.initialPing != null && message.hasOwnProperty("initialPing"))
                object.initialPing = message.initialPing;
            if (message.initialPingFrontLocal != null && message.hasOwnProperty("initialPingFrontLocal"))
                object.initialPingFrontLocal = message.initialPingFrontLocal;
            if (message.initialPingFrontRemote != null && message.hasOwnProperty("initialPingFrontRemote"))
                object.initialPingFrontRemote = message.initialPingFrontRemote;
            if (message.initialScore != null && message.hasOwnProperty("initialScore"))
                object.initialScore = message.initialScore;
            if (message.initialPopLocal != null && message.hasOwnProperty("initialPopLocal"))
                object.initialPopLocal = message.initialPopLocal;
            if (message.initialPopRemote != null && message.hasOwnProperty("initialPopRemote"))
                object.initialPopRemote = message.initialPopRemote;
            if (message.negotiationMs != null && message.hasOwnProperty("negotiationMs"))
                object.negotiationMs = message.negotiationMs;
            if (message.selectedSeconds != null && message.hasOwnProperty("selectedSeconds"))
                object.selectedSeconds = message.selectedSeconds;
            if (message.bestPing != null && message.hasOwnProperty("bestPing"))
                object.bestPing = message.bestPing;
            if (message.bestPingFrontLocal != null && message.hasOwnProperty("bestPingFrontLocal"))
                object.bestPingFrontLocal = message.bestPingFrontLocal;
            if (message.bestPingFrontRemote != null && message.hasOwnProperty("bestPingFrontRemote"))
                object.bestPingFrontRemote = message.bestPingFrontRemote;
            if (message.bestScore != null && message.hasOwnProperty("bestScore"))
                object.bestScore = message.bestScore;
            if (message.bestPopLocal != null && message.hasOwnProperty("bestPopLocal"))
                object.bestPopLocal = message.bestPopLocal;
            if (message.bestPopRemote != null && message.hasOwnProperty("bestPopRemote"))
                object.bestPopRemote = message.bestPopRemote;
            if (message.bestTime != null && message.hasOwnProperty("bestTime"))
                object.bestTime = message.bestTime;
            return object;
        };
    
        /**
         * Converts this CMsgSteamNetworkingP2PSDRRoutingSummary to JSON.
         * @function toJSON
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamNetworkingP2PSDRRoutingSummary
         * @function getTypeUrl
         * @memberof CMsgSteamNetworkingP2PSDRRoutingSummary
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamNetworkingP2PSDRRoutingSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamNetworkingP2PSDRRoutingSummary";
        };
    
        return CMsgSteamNetworkingP2PSDRRoutingSummary;
    })();
    
    $root.CMsgSteamDatagramP2PRoutingSummary = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PRoutingSummary.
         * @exports ICMsgSteamDatagramP2PRoutingSummary
         * @interface ICMsgSteamDatagramP2PRoutingSummary
         * @property {ICMsgSteamNetworkingICESessionSummary|null} [ice] CMsgSteamDatagramP2PRoutingSummary ice
         * @property {ICMsgSteamNetworkingP2PSDRRoutingSummary|null} [sdr] CMsgSteamDatagramP2PRoutingSummary sdr
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PRoutingSummary.
         * @exports CMsgSteamDatagramP2PRoutingSummary
         * @classdesc Represents a CMsgSteamDatagramP2PRoutingSummary.
         * @implements ICMsgSteamDatagramP2PRoutingSummary
         * @constructor
         * @param {ICMsgSteamDatagramP2PRoutingSummary=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PRoutingSummary(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PRoutingSummary ice.
         * @member {ICMsgSteamNetworkingICESessionSummary|null|undefined} ice
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @instance
         */
        CMsgSteamDatagramP2PRoutingSummary.prototype.ice = null;
    
        /**
         * CMsgSteamDatagramP2PRoutingSummary sdr.
         * @member {ICMsgSteamNetworkingP2PSDRRoutingSummary|null|undefined} sdr
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @instance
         */
        CMsgSteamDatagramP2PRoutingSummary.prototype.sdr = null;
    
        /**
         * Creates a new CMsgSteamDatagramP2PRoutingSummary instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {ICMsgSteamDatagramP2PRoutingSummary=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PRoutingSummary} CMsgSteamDatagramP2PRoutingSummary instance
         */
        CMsgSteamDatagramP2PRoutingSummary.create = function create(properties) {
            return new CMsgSteamDatagramP2PRoutingSummary(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PRoutingSummary message. Does not implicitly {@link CMsgSteamDatagramP2PRoutingSummary.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {ICMsgSteamDatagramP2PRoutingSummary} message CMsgSteamDatagramP2PRoutingSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PRoutingSummary.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ice != null && Object.hasOwnProperty.call(message, "ice"))
                $root.CMsgSteamNetworkingICESessionSummary.encode(message.ice, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.sdr != null && Object.hasOwnProperty.call(message, "sdr"))
                $root.CMsgSteamNetworkingP2PSDRRoutingSummary.encode(message.sdr, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PRoutingSummary message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PRoutingSummary.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {ICMsgSteamDatagramP2PRoutingSummary} message CMsgSteamDatagramP2PRoutingSummary message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PRoutingSummary.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PRoutingSummary message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PRoutingSummary} CMsgSteamDatagramP2PRoutingSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PRoutingSummary.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PRoutingSummary();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2: {
                        message.ice = $root.CMsgSteamNetworkingICESessionSummary.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.sdr = $root.CMsgSteamNetworkingP2PSDRRoutingSummary.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PRoutingSummary message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PRoutingSummary} CMsgSteamDatagramP2PRoutingSummary
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PRoutingSummary.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PRoutingSummary message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PRoutingSummary.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ice != null && message.hasOwnProperty("ice")) {
                var error = $root.CMsgSteamNetworkingICESessionSummary.verify(message.ice);
                if (error)
                    return "ice." + error;
            }
            if (message.sdr != null && message.hasOwnProperty("sdr")) {
                var error = $root.CMsgSteamNetworkingP2PSDRRoutingSummary.verify(message.sdr);
                if (error)
                    return "sdr." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PRoutingSummary message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PRoutingSummary} CMsgSteamDatagramP2PRoutingSummary
         */
        CMsgSteamDatagramP2PRoutingSummary.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PRoutingSummary)
                return object;
            var message = new $root.CMsgSteamDatagramP2PRoutingSummary();
            if (object.ice != null) {
                if (typeof object.ice !== "object")
                    throw TypeError(".CMsgSteamDatagramP2PRoutingSummary.ice: object expected");
                message.ice = $root.CMsgSteamNetworkingICESessionSummary.fromObject(object.ice);
            }
            if (object.sdr != null) {
                if (typeof object.sdr !== "object")
                    throw TypeError(".CMsgSteamDatagramP2PRoutingSummary.sdr: object expected");
                message.sdr = $root.CMsgSteamNetworkingP2PSDRRoutingSummary.fromObject(object.sdr);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PRoutingSummary message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {CMsgSteamDatagramP2PRoutingSummary} message CMsgSteamDatagramP2PRoutingSummary
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PRoutingSummary.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ice = null;
                object.sdr = null;
            }
            if (message.ice != null && message.hasOwnProperty("ice"))
                object.ice = $root.CMsgSteamNetworkingICESessionSummary.toObject(message.ice, options);
            if (message.sdr != null && message.hasOwnProperty("sdr"))
                object.sdr = $root.CMsgSteamNetworkingP2PSDRRoutingSummary.toObject(message.sdr, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PRoutingSummary to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PRoutingSummary.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramP2PRoutingSummary
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramP2PRoutingSummary
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramP2PRoutingSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramP2PRoutingSummary";
        };
    
        return CMsgSteamDatagramP2PRoutingSummary;
    })();
    
    $root.CMsgSteamDatagramConnectionClosed = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionClosed.
         * @exports ICMsgSteamDatagramConnectionClosed
         * @interface ICMsgSteamDatagramConnectionClosed
         * @property {number|null} [toConnectionId] CMsgSteamDatagramConnectionClosed toConnectionId
         * @property {number|null} [fromConnectionId] CMsgSteamDatagramConnectionClosed fromConnectionId
         * @property {string|null} [fromIdentityString] CMsgSteamDatagramConnectionClosed fromIdentityString
         * @property {ICMsgSteamNetworkingIdentityLegacyBinary|null} [legacyFromIdentityBinary] CMsgSteamDatagramConnectionClosed legacyFromIdentityBinary
         * @property {number|Long|null} [legacyFromSteamId] CMsgSteamDatagramConnectionClosed legacyFromSteamId
         * @property {number|null} [legacyGameserverRelaySessionId] CMsgSteamDatagramConnectionClosed legacyGameserverRelaySessionId
         * @property {number|null} [toRelaySessionId] CMsgSteamDatagramConnectionClosed toRelaySessionId
         * @property {number|null} [fromRelaySessionId] CMsgSteamDatagramConnectionClosed fromRelaySessionId
         * @property {Uint8Array|null} [forwardTargetRelayRoutingToken] CMsgSteamDatagramConnectionClosed forwardTargetRelayRoutingToken
         * @property {number|null} [forwardTargetRevision] CMsgSteamDatagramConnectionClosed forwardTargetRevision
         * @property {CMsgSteamDatagramConnectionClosed.ERelayMode|null} [relayMode] CMsgSteamDatagramConnectionClosed relayMode
         * @property {string|null} [debug] CMsgSteamDatagramConnectionClosed debug
         * @property {number|null} [reasonCode] CMsgSteamDatagramConnectionClosed reasonCode
         * @property {number|Long|null} [routingSecret] CMsgSteamDatagramConnectionClosed routingSecret
         * @property {boolean|null} [notPrimarySession] CMsgSteamDatagramConnectionClosed notPrimarySession
         * @property {boolean|null} [notPrimaryTransport] CMsgSteamDatagramConnectionClosed notPrimaryTransport
         * @property {boolean|null} [relayOverrideActive] CMsgSteamDatagramConnectionClosed relayOverrideActive
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityRelay] CMsgSteamDatagramConnectionClosed qualityRelay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityE2e] CMsgSteamDatagramConnectionClosed qualityE2e
         * @property {ICMsgSteamDatagramP2PRoutingSummary|null} [p2pRoutingSummary] CMsgSteamDatagramConnectionClosed p2pRoutingSummary
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionClosed.
         * @exports CMsgSteamDatagramConnectionClosed
         * @classdesc Represents a CMsgSteamDatagramConnectionClosed.
         * @implements ICMsgSteamDatagramConnectionClosed
         * @constructor
         * @param {ICMsgSteamDatagramConnectionClosed=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionClosed(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionClosed toConnectionId.
         * @member {number} toConnectionId
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.toConnectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed fromConnectionId.
         * @member {number} fromConnectionId
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.fromConnectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed fromIdentityString.
         * @member {string} fromIdentityString
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.fromIdentityString = "";
    
        /**
         * CMsgSteamDatagramConnectionClosed legacyFromIdentityBinary.
         * @member {ICMsgSteamNetworkingIdentityLegacyBinary|null|undefined} legacyFromIdentityBinary
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.legacyFromIdentityBinary = null;
    
        /**
         * CMsgSteamDatagramConnectionClosed legacyFromSteamId.
         * @member {number|Long} legacyFromSteamId
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.legacyFromSteamId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed legacyGameserverRelaySessionId.
         * @member {number} legacyGameserverRelaySessionId
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.legacyGameserverRelaySessionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed toRelaySessionId.
         * @member {number} toRelaySessionId
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.toRelaySessionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed fromRelaySessionId.
         * @member {number} fromRelaySessionId
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.fromRelaySessionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed forwardTargetRelayRoutingToken.
         * @member {Uint8Array} forwardTargetRelayRoutingToken
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.forwardTargetRelayRoutingToken = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramConnectionClosed forwardTargetRevision.
         * @member {number} forwardTargetRevision
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.forwardTargetRevision = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed relayMode.
         * @member {CMsgSteamDatagramConnectionClosed.ERelayMode} relayMode
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.relayMode = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed debug.
         * @member {string} debug
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.debug = "";
    
        /**
         * CMsgSteamDatagramConnectionClosed reasonCode.
         * @member {number} reasonCode
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.reasonCode = 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed routingSecret.
         * @member {number|Long} routingSecret
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.routingSecret = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectionClosed notPrimarySession.
         * @member {boolean} notPrimarySession
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.notPrimarySession = false;
    
        /**
         * CMsgSteamDatagramConnectionClosed notPrimaryTransport.
         * @member {boolean} notPrimaryTransport
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.notPrimaryTransport = false;
    
        /**
         * CMsgSteamDatagramConnectionClosed relayOverrideActive.
         * @member {boolean} relayOverrideActive
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.relayOverrideActive = false;
    
        /**
         * CMsgSteamDatagramConnectionClosed qualityRelay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityRelay
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.qualityRelay = null;
    
        /**
         * CMsgSteamDatagramConnectionClosed qualityE2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityE2e
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.qualityE2e = null;
    
        /**
         * CMsgSteamDatagramConnectionClosed p2pRoutingSummary.
         * @member {ICMsgSteamDatagramP2PRoutingSummary|null|undefined} p2pRoutingSummary
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         */
        CMsgSteamDatagramConnectionClosed.prototype.p2pRoutingSummary = null;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionClosed instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {ICMsgSteamDatagramConnectionClosed=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionClosed} CMsgSteamDatagramConnectionClosed instance
         */
        CMsgSteamDatagramConnectionClosed.create = function create(properties) {
            return new CMsgSteamDatagramConnectionClosed(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionClosed message. Does not implicitly {@link CMsgSteamDatagramConnectionClosed.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {ICMsgSteamDatagramConnectionClosed} message CMsgSteamDatagramConnectionClosed message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionClosed.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.legacyGameserverRelaySessionId != null && Object.hasOwnProperty.call(message, "legacyGameserverRelaySessionId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.legacyGameserverRelaySessionId);
            if (message.legacyFromSteamId != null && Object.hasOwnProperty.call(message, "legacyFromSteamId"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.legacyFromSteamId);
            if (message.relayMode != null && Object.hasOwnProperty.call(message, "relayMode"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.relayMode);
            if (message.debug != null && Object.hasOwnProperty.call(message, "debug"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.debug);
            if (message.reasonCode != null && Object.hasOwnProperty.call(message, "reasonCode"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.reasonCode);
            if (message.toConnectionId != null && Object.hasOwnProperty.call(message, "toConnectionId"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.toConnectionId);
            if (message.fromConnectionId != null && Object.hasOwnProperty.call(message, "fromConnectionId"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.fromConnectionId);
            if (message.toRelaySessionId != null && Object.hasOwnProperty.call(message, "toRelaySessionId"))
                writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.toRelaySessionId);
            if (message.fromRelaySessionId != null && Object.hasOwnProperty.call(message, "fromRelaySessionId"))
                writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.fromRelaySessionId);
            if (message.forwardTargetRelayRoutingToken != null && Object.hasOwnProperty.call(message, "forwardTargetRelayRoutingToken"))
                writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.forwardTargetRelayRoutingToken);
            if (message.forwardTargetRevision != null && Object.hasOwnProperty.call(message, "forwardTargetRevision"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.forwardTargetRevision);
            if (message.legacyFromIdentityBinary != null && Object.hasOwnProperty.call(message, "legacyFromIdentityBinary"))
                $root.CMsgSteamNetworkingIdentityLegacyBinary.encode(message.legacyFromIdentityBinary, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.routingSecret != null && Object.hasOwnProperty.call(message, "routingSecret"))
                writer.uint32(/* id 14, wireType 1 =*/113).fixed64(message.routingSecret);
            if (message.fromIdentityString != null && Object.hasOwnProperty.call(message, "fromIdentityString"))
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.fromIdentityString);
            if (message.notPrimarySession != null && Object.hasOwnProperty.call(message, "notPrimarySession"))
                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.notPrimarySession);
            if (message.qualityRelay != null && Object.hasOwnProperty.call(message, "qualityRelay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityRelay, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
            if (message.qualityE2e != null && Object.hasOwnProperty.call(message, "qualityE2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityE2e, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
            if (message.notPrimaryTransport != null && Object.hasOwnProperty.call(message, "notPrimaryTransport"))
                writer.uint32(/* id 19, wireType 0 =*/152).bool(message.notPrimaryTransport);
            if (message.p2pRoutingSummary != null && Object.hasOwnProperty.call(message, "p2pRoutingSummary"))
                $root.CMsgSteamDatagramP2PRoutingSummary.encode(message.p2pRoutingSummary, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
            if (message.relayOverrideActive != null && Object.hasOwnProperty.call(message, "relayOverrideActive"))
                writer.uint32(/* id 22, wireType 0 =*/176).bool(message.relayOverrideActive);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionClosed message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionClosed.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {ICMsgSteamDatagramConnectionClosed} message CMsgSteamDatagramConnectionClosed message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionClosed.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionClosed message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionClosed} CMsgSteamDatagramConnectionClosed
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionClosed.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionClosed();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 7: {
                        message.toConnectionId = reader.fixed32();
                        break;
                    }
                case 8: {
                        message.fromConnectionId = reader.fixed32();
                        break;
                    }
                case 15: {
                        message.fromIdentityString = reader.string();
                        break;
                    }
                case 13: {
                        message.legacyFromIdentityBinary = $root.CMsgSteamNetworkingIdentityLegacyBinary.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.legacyFromSteamId = reader.fixed64();
                        break;
                    }
                case 2: {
                        message.legacyGameserverRelaySessionId = reader.uint32();
                        break;
                    }
                case 9: {
                        message.toRelaySessionId = reader.fixed32();
                        break;
                    }
                case 10: {
                        message.fromRelaySessionId = reader.fixed32();
                        break;
                    }
                case 11: {
                        message.forwardTargetRelayRoutingToken = reader.bytes();
                        break;
                    }
                case 12: {
                        message.forwardTargetRevision = reader.uint32();
                        break;
                    }
                case 4: {
                        message.relayMode = reader.int32();
                        break;
                    }
                case 5: {
                        message.debug = reader.string();
                        break;
                    }
                case 6: {
                        message.reasonCode = reader.uint32();
                        break;
                    }
                case 14: {
                        message.routingSecret = reader.fixed64();
                        break;
                    }
                case 16: {
                        message.notPrimarySession = reader.bool();
                        break;
                    }
                case 19: {
                        message.notPrimaryTransport = reader.bool();
                        break;
                    }
                case 22: {
                        message.relayOverrideActive = reader.bool();
                        break;
                    }
                case 17: {
                        message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 18: {
                        message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 21: {
                        message.p2pRoutingSummary = $root.CMsgSteamDatagramP2PRoutingSummary.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionClosed message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionClosed} CMsgSteamDatagramConnectionClosed
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionClosed.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionClosed message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionClosed.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.toConnectionId != null && message.hasOwnProperty("toConnectionId"))
                if (!$util.isInteger(message.toConnectionId))
                    return "toConnectionId: integer expected";
            if (message.fromConnectionId != null && message.hasOwnProperty("fromConnectionId"))
                if (!$util.isInteger(message.fromConnectionId))
                    return "fromConnectionId: integer expected";
            if (message.fromIdentityString != null && message.hasOwnProperty("fromIdentityString"))
                if (!$util.isString(message.fromIdentityString))
                    return "fromIdentityString: string expected";
            if (message.legacyFromIdentityBinary != null && message.hasOwnProperty("legacyFromIdentityBinary")) {
                var error = $root.CMsgSteamNetworkingIdentityLegacyBinary.verify(message.legacyFromIdentityBinary);
                if (error)
                    return "legacyFromIdentityBinary." + error;
            }
            if (message.legacyFromSteamId != null && message.hasOwnProperty("legacyFromSteamId"))
                if (!$util.isInteger(message.legacyFromSteamId) && !(message.legacyFromSteamId && $util.isInteger(message.legacyFromSteamId.low) && $util.isInteger(message.legacyFromSteamId.high)))
                    return "legacyFromSteamId: integer|Long expected";
            if (message.legacyGameserverRelaySessionId != null && message.hasOwnProperty("legacyGameserverRelaySessionId"))
                if (!$util.isInteger(message.legacyGameserverRelaySessionId))
                    return "legacyGameserverRelaySessionId: integer expected";
            if (message.toRelaySessionId != null && message.hasOwnProperty("toRelaySessionId"))
                if (!$util.isInteger(message.toRelaySessionId))
                    return "toRelaySessionId: integer expected";
            if (message.fromRelaySessionId != null && message.hasOwnProperty("fromRelaySessionId"))
                if (!$util.isInteger(message.fromRelaySessionId))
                    return "fromRelaySessionId: integer expected";
            if (message.forwardTargetRelayRoutingToken != null && message.hasOwnProperty("forwardTargetRelayRoutingToken"))
                if (!(message.forwardTargetRelayRoutingToken && typeof message.forwardTargetRelayRoutingToken.length === "number" || $util.isString(message.forwardTargetRelayRoutingToken)))
                    return "forwardTargetRelayRoutingToken: buffer expected";
            if (message.forwardTargetRevision != null && message.hasOwnProperty("forwardTargetRevision"))
                if (!$util.isInteger(message.forwardTargetRevision))
                    return "forwardTargetRevision: integer expected";
            if (message.relayMode != null && message.hasOwnProperty("relayMode"))
                switch (message.relayMode) {
                default:
                    return "relayMode: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            if (message.debug != null && message.hasOwnProperty("debug"))
                if (!$util.isString(message.debug))
                    return "debug: string expected";
            if (message.reasonCode != null && message.hasOwnProperty("reasonCode"))
                if (!$util.isInteger(message.reasonCode))
                    return "reasonCode: integer expected";
            if (message.routingSecret != null && message.hasOwnProperty("routingSecret"))
                if (!$util.isInteger(message.routingSecret) && !(message.routingSecret && $util.isInteger(message.routingSecret.low) && $util.isInteger(message.routingSecret.high)))
                    return "routingSecret: integer|Long expected";
            if (message.notPrimarySession != null && message.hasOwnProperty("notPrimarySession"))
                if (typeof message.notPrimarySession !== "boolean")
                    return "notPrimarySession: boolean expected";
            if (message.notPrimaryTransport != null && message.hasOwnProperty("notPrimaryTransport"))
                if (typeof message.notPrimaryTransport !== "boolean")
                    return "notPrimaryTransport: boolean expected";
            if (message.relayOverrideActive != null && message.hasOwnProperty("relayOverrideActive"))
                if (typeof message.relayOverrideActive !== "boolean")
                    return "relayOverrideActive: boolean expected";
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityRelay);
                if (error)
                    return "qualityRelay." + error;
            }
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityE2e);
                if (error)
                    return "qualityE2e." + error;
            }
            if (message.p2pRoutingSummary != null && message.hasOwnProperty("p2pRoutingSummary")) {
                var error = $root.CMsgSteamDatagramP2PRoutingSummary.verify(message.p2pRoutingSummary);
                if (error)
                    return "p2pRoutingSummary." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionClosed message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionClosed} CMsgSteamDatagramConnectionClosed
         */
        CMsgSteamDatagramConnectionClosed.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionClosed)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionClosed();
            if (object.toConnectionId != null)
                message.toConnectionId = object.toConnectionId >>> 0;
            if (object.fromConnectionId != null)
                message.fromConnectionId = object.fromConnectionId >>> 0;
            if (object.fromIdentityString != null)
                message.fromIdentityString = String(object.fromIdentityString);
            if (object.legacyFromIdentityBinary != null) {
                if (typeof object.legacyFromIdentityBinary !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionClosed.legacyFromIdentityBinary: object expected");
                message.legacyFromIdentityBinary = $root.CMsgSteamNetworkingIdentityLegacyBinary.fromObject(object.legacyFromIdentityBinary);
            }
            if (object.legacyFromSteamId != null)
                if ($util.Long)
                    (message.legacyFromSteamId = $util.Long.fromValue(object.legacyFromSteamId)).unsigned = false;
                else if (typeof object.legacyFromSteamId === "string")
                    message.legacyFromSteamId = parseInt(object.legacyFromSteamId, 10);
                else if (typeof object.legacyFromSteamId === "number")
                    message.legacyFromSteamId = object.legacyFromSteamId;
                else if (typeof object.legacyFromSteamId === "object")
                    message.legacyFromSteamId = new $util.LongBits(object.legacyFromSteamId.low >>> 0, object.legacyFromSteamId.high >>> 0).toNumber();
            if (object.legacyGameserverRelaySessionId != null)
                message.legacyGameserverRelaySessionId = object.legacyGameserverRelaySessionId >>> 0;
            if (object.toRelaySessionId != null)
                message.toRelaySessionId = object.toRelaySessionId >>> 0;
            if (object.fromRelaySessionId != null)
                message.fromRelaySessionId = object.fromRelaySessionId >>> 0;
            if (object.forwardTargetRelayRoutingToken != null)
                if (typeof object.forwardTargetRelayRoutingToken === "string")
                    $util.base64.decode(object.forwardTargetRelayRoutingToken, message.forwardTargetRelayRoutingToken = $util.newBuffer($util.base64.length(object.forwardTargetRelayRoutingToken)), 0);
                else if (object.forwardTargetRelayRoutingToken.length >= 0)
                    message.forwardTargetRelayRoutingToken = object.forwardTargetRelayRoutingToken;
            if (object.forwardTargetRevision != null)
                message.forwardTargetRevision = object.forwardTargetRevision >>> 0;
            switch (object.relayMode) {
            default:
                if (typeof object.relayMode === "number") {
                    message.relayMode = object.relayMode;
                    break;
                }
                break;
            case "None":
            case 0:
                message.relayMode = 0;
                break;
            case "EndToEnd":
            case 1:
                message.relayMode = 1;
                break;
            case "ClosedByPeer":
            case 2:
                message.relayMode = 2;
                break;
            }
            if (object.debug != null)
                message.debug = String(object.debug);
            if (object.reasonCode != null)
                message.reasonCode = object.reasonCode >>> 0;
            if (object.routingSecret != null)
                if ($util.Long)
                    (message.routingSecret = $util.Long.fromValue(object.routingSecret)).unsigned = false;
                else if (typeof object.routingSecret === "string")
                    message.routingSecret = parseInt(object.routingSecret, 10);
                else if (typeof object.routingSecret === "number")
                    message.routingSecret = object.routingSecret;
                else if (typeof object.routingSecret === "object")
                    message.routingSecret = new $util.LongBits(object.routingSecret.low >>> 0, object.routingSecret.high >>> 0).toNumber();
            if (object.notPrimarySession != null)
                message.notPrimarySession = Boolean(object.notPrimarySession);
            if (object.notPrimaryTransport != null)
                message.notPrimaryTransport = Boolean(object.notPrimaryTransport);
            if (object.relayOverrideActive != null)
                message.relayOverrideActive = Boolean(object.relayOverrideActive);
            if (object.qualityRelay != null) {
                if (typeof object.qualityRelay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionClosed.qualityRelay: object expected");
                message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityRelay);
            }
            if (object.qualityE2e != null) {
                if (typeof object.qualityE2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionClosed.qualityE2e: object expected");
                message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityE2e);
            }
            if (object.p2pRoutingSummary != null) {
                if (typeof object.p2pRoutingSummary !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionClosed.p2pRoutingSummary: object expected");
                message.p2pRoutingSummary = $root.CMsgSteamDatagramP2PRoutingSummary.fromObject(object.p2pRoutingSummary);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionClosed message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {CMsgSteamDatagramConnectionClosed} message CMsgSteamDatagramConnectionClosed
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionClosed.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.legacyGameserverRelaySessionId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacyFromSteamId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacyFromSteamId = options.longs === String ? "0" : 0;
                object.relayMode = options.enums === String ? "None" : 0;
                object.debug = "";
                object.reasonCode = 0;
                object.toConnectionId = 0;
                object.fromConnectionId = 0;
                object.toRelaySessionId = 0;
                object.fromRelaySessionId = 0;
                if (options.bytes === String)
                    object.forwardTargetRelayRoutingToken = "";
                else {
                    object.forwardTargetRelayRoutingToken = [];
                    if (options.bytes !== Array)
                        object.forwardTargetRelayRoutingToken = $util.newBuffer(object.forwardTargetRelayRoutingToken);
                }
                object.forwardTargetRevision = 0;
                object.legacyFromIdentityBinary = null;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.routingSecret = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.routingSecret = options.longs === String ? "0" : 0;
                object.fromIdentityString = "";
                object.notPrimarySession = false;
                object.qualityRelay = null;
                object.qualityE2e = null;
                object.notPrimaryTransport = false;
                object.p2pRoutingSummary = null;
                object.relayOverrideActive = false;
            }
            if (message.legacyGameserverRelaySessionId != null && message.hasOwnProperty("legacyGameserverRelaySessionId"))
                object.legacyGameserverRelaySessionId = message.legacyGameserverRelaySessionId;
            if (message.legacyFromSteamId != null && message.hasOwnProperty("legacyFromSteamId"))
                if (typeof message.legacyFromSteamId === "number")
                    object.legacyFromSteamId = options.longs === String ? String(message.legacyFromSteamId) : message.legacyFromSteamId;
                else
                    object.legacyFromSteamId = options.longs === String ? $util.Long.prototype.toString.call(message.legacyFromSteamId) : options.longs === Number ? new $util.LongBits(message.legacyFromSteamId.low >>> 0, message.legacyFromSteamId.high >>> 0).toNumber() : message.legacyFromSteamId;
            if (message.relayMode != null && message.hasOwnProperty("relayMode"))
                object.relayMode = options.enums === String ? $root.CMsgSteamDatagramConnectionClosed.ERelayMode[message.relayMode] === undefined ? message.relayMode : $root.CMsgSteamDatagramConnectionClosed.ERelayMode[message.relayMode] : message.relayMode;
            if (message.debug != null && message.hasOwnProperty("debug"))
                object.debug = message.debug;
            if (message.reasonCode != null && message.hasOwnProperty("reasonCode"))
                object.reasonCode = message.reasonCode;
            if (message.toConnectionId != null && message.hasOwnProperty("toConnectionId"))
                object.toConnectionId = message.toConnectionId;
            if (message.fromConnectionId != null && message.hasOwnProperty("fromConnectionId"))
                object.fromConnectionId = message.fromConnectionId;
            if (message.toRelaySessionId != null && message.hasOwnProperty("toRelaySessionId"))
                object.toRelaySessionId = message.toRelaySessionId;
            if (message.fromRelaySessionId != null && message.hasOwnProperty("fromRelaySessionId"))
                object.fromRelaySessionId = message.fromRelaySessionId;
            if (message.forwardTargetRelayRoutingToken != null && message.hasOwnProperty("forwardTargetRelayRoutingToken"))
                object.forwardTargetRelayRoutingToken = options.bytes === String ? $util.base64.encode(message.forwardTargetRelayRoutingToken, 0, message.forwardTargetRelayRoutingToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.forwardTargetRelayRoutingToken) : message.forwardTargetRelayRoutingToken;
            if (message.forwardTargetRevision != null && message.hasOwnProperty("forwardTargetRevision"))
                object.forwardTargetRevision = message.forwardTargetRevision;
            if (message.legacyFromIdentityBinary != null && message.hasOwnProperty("legacyFromIdentityBinary"))
                object.legacyFromIdentityBinary = $root.CMsgSteamNetworkingIdentityLegacyBinary.toObject(message.legacyFromIdentityBinary, options);
            if (message.routingSecret != null && message.hasOwnProperty("routingSecret"))
                if (typeof message.routingSecret === "number")
                    object.routingSecret = options.longs === String ? String(message.routingSecret) : message.routingSecret;
                else
                    object.routingSecret = options.longs === String ? $util.Long.prototype.toString.call(message.routingSecret) : options.longs === Number ? new $util.LongBits(message.routingSecret.low >>> 0, message.routingSecret.high >>> 0).toNumber() : message.routingSecret;
            if (message.fromIdentityString != null && message.hasOwnProperty("fromIdentityString"))
                object.fromIdentityString = message.fromIdentityString;
            if (message.notPrimarySession != null && message.hasOwnProperty("notPrimarySession"))
                object.notPrimarySession = message.notPrimarySession;
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay"))
                object.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityRelay, options);
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e"))
                object.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityE2e, options);
            if (message.notPrimaryTransport != null && message.hasOwnProperty("notPrimaryTransport"))
                object.notPrimaryTransport = message.notPrimaryTransport;
            if (message.p2pRoutingSummary != null && message.hasOwnProperty("p2pRoutingSummary"))
                object.p2pRoutingSummary = $root.CMsgSteamDatagramP2PRoutingSummary.toObject(message.p2pRoutingSummary, options);
            if (message.relayOverrideActive != null && message.hasOwnProperty("relayOverrideActive"))
                object.relayOverrideActive = message.relayOverrideActive;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionClosed to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionClosed
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionClosed.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramConnectionClosed
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramConnectionClosed
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramConnectionClosed.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramConnectionClosed";
        };
    
        /**
         * ERelayMode enum.
         * @name CMsgSteamDatagramConnectionClosed.ERelayMode
         * @enum {number}
         * @property {number} None=0 None value
         * @property {number} EndToEnd=1 EndToEnd value
         * @property {number} ClosedByPeer=2 ClosedByPeer value
         */
        CMsgSteamDatagramConnectionClosed.ERelayMode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "None"] = 0;
            values[valuesById[1] = "EndToEnd"] = 1;
            values[valuesById[2] = "ClosedByPeer"] = 2;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionClosed;
    })();
    
    $root.CMsgSteamDatagramNoConnection = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramNoConnection.
         * @exports ICMsgSteamDatagramNoConnection
         * @interface ICMsgSteamDatagramNoConnection
         * @property {number|null} [toConnectionId] CMsgSteamDatagramNoConnection toConnectionId
         * @property {number|null} [fromConnectionId] CMsgSteamDatagramNoConnection fromConnectionId
         * @property {number|null} [legacyGameserverRelaySessionId] CMsgSteamDatagramNoConnection legacyGameserverRelaySessionId
         * @property {number|null} [toRelaySessionId] CMsgSteamDatagramNoConnection toRelaySessionId
         * @property {number|null} [fromRelaySessionId] CMsgSteamDatagramNoConnection fromRelaySessionId
         * @property {string|null} [fromIdentityString] CMsgSteamDatagramNoConnection fromIdentityString
         * @property {number|Long|null} [legacyFromSteamId] CMsgSteamDatagramNoConnection legacyFromSteamId
         * @property {boolean|null} [endToEnd] CMsgSteamDatagramNoConnection endToEnd
         * @property {boolean|null} [notPrimarySession] CMsgSteamDatagramNoConnection notPrimarySession
         * @property {boolean|null} [notPrimaryTransport] CMsgSteamDatagramNoConnection notPrimaryTransport
         * @property {boolean|null} [relayOverrideActive] CMsgSteamDatagramNoConnection relayOverrideActive
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityRelay] CMsgSteamDatagramNoConnection qualityRelay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityE2e] CMsgSteamDatagramNoConnection qualityE2e
         * @property {ICMsgSteamDatagramP2PRoutingSummary|null} [p2pRoutingSummary] CMsgSteamDatagramNoConnection p2pRoutingSummary
         * @property {number|Long|null} [routingSecret] CMsgSteamDatagramNoConnection routingSecret
         * @property {number|null} [dummyPad] CMsgSteamDatagramNoConnection dummyPad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramNoConnection.
         * @exports CMsgSteamDatagramNoConnection
         * @classdesc Represents a CMsgSteamDatagramNoConnection.
         * @implements ICMsgSteamDatagramNoConnection
         * @constructor
         * @param {ICMsgSteamDatagramNoConnection=} [properties] Properties to set
         */
        function CMsgSteamDatagramNoConnection(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramNoConnection toConnectionId.
         * @member {number} toConnectionId
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.toConnectionId = 0;
    
        /**
         * CMsgSteamDatagramNoConnection fromConnectionId.
         * @member {number} fromConnectionId
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.fromConnectionId = 0;
    
        /**
         * CMsgSteamDatagramNoConnection legacyGameserverRelaySessionId.
         * @member {number} legacyGameserverRelaySessionId
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.legacyGameserverRelaySessionId = 0;
    
        /**
         * CMsgSteamDatagramNoConnection toRelaySessionId.
         * @member {number} toRelaySessionId
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.toRelaySessionId = 0;
    
        /**
         * CMsgSteamDatagramNoConnection fromRelaySessionId.
         * @member {number} fromRelaySessionId
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.fromRelaySessionId = 0;
    
        /**
         * CMsgSteamDatagramNoConnection fromIdentityString.
         * @member {string} fromIdentityString
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.fromIdentityString = "";
    
        /**
         * CMsgSteamDatagramNoConnection legacyFromSteamId.
         * @member {number|Long} legacyFromSteamId
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.legacyFromSteamId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramNoConnection endToEnd.
         * @member {boolean} endToEnd
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.endToEnd = false;
    
        /**
         * CMsgSteamDatagramNoConnection notPrimarySession.
         * @member {boolean} notPrimarySession
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.notPrimarySession = false;
    
        /**
         * CMsgSteamDatagramNoConnection notPrimaryTransport.
         * @member {boolean} notPrimaryTransport
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.notPrimaryTransport = false;
    
        /**
         * CMsgSteamDatagramNoConnection relayOverrideActive.
         * @member {boolean} relayOverrideActive
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.relayOverrideActive = false;
    
        /**
         * CMsgSteamDatagramNoConnection qualityRelay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityRelay
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.qualityRelay = null;
    
        /**
         * CMsgSteamDatagramNoConnection qualityE2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityE2e
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.qualityE2e = null;
    
        /**
         * CMsgSteamDatagramNoConnection p2pRoutingSummary.
         * @member {ICMsgSteamDatagramP2PRoutingSummary|null|undefined} p2pRoutingSummary
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.p2pRoutingSummary = null;
    
        /**
         * CMsgSteamDatagramNoConnection routingSecret.
         * @member {number|Long} routingSecret
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.routingSecret = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramNoConnection dummyPad.
         * @member {number} dummyPad
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         */
        CMsgSteamDatagramNoConnection.prototype.dummyPad = 0;
    
        /**
         * Creates a new CMsgSteamDatagramNoConnection instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {ICMsgSteamDatagramNoConnection=} [properties] Properties to set
         * @returns {CMsgSteamDatagramNoConnection} CMsgSteamDatagramNoConnection instance
         */
        CMsgSteamDatagramNoConnection.create = function create(properties) {
            return new CMsgSteamDatagramNoConnection(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoConnection message. Does not implicitly {@link CMsgSteamDatagramNoConnection.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {ICMsgSteamDatagramNoConnection} message CMsgSteamDatagramNoConnection message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoConnection.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.legacyGameserverRelaySessionId != null && Object.hasOwnProperty.call(message, "legacyGameserverRelaySessionId"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.legacyGameserverRelaySessionId);
            if (message.legacyFromSteamId != null && Object.hasOwnProperty.call(message, "legacyFromSteamId"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.legacyFromSteamId);
            if (message.endToEnd != null && Object.hasOwnProperty.call(message, "endToEnd"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.endToEnd);
            if (message.toConnectionId != null && Object.hasOwnProperty.call(message, "toConnectionId"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.toConnectionId);
            if (message.fromConnectionId != null && Object.hasOwnProperty.call(message, "fromConnectionId"))
                writer.uint32(/* id 6, wireType 5 =*/53).fixed32(message.fromConnectionId);
            if (message.fromIdentityString != null && Object.hasOwnProperty.call(message, "fromIdentityString"))
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.fromIdentityString);
            if (message.toRelaySessionId != null && Object.hasOwnProperty.call(message, "toRelaySessionId"))
                writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.toRelaySessionId);
            if (message.fromRelaySessionId != null && Object.hasOwnProperty.call(message, "fromRelaySessionId"))
                writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.fromRelaySessionId);
            if (message.routingSecret != null && Object.hasOwnProperty.call(message, "routingSecret"))
                writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.routingSecret);
            if (message.notPrimarySession != null && Object.hasOwnProperty.call(message, "notPrimarySession"))
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.notPrimarySession);
            if (message.qualityRelay != null && Object.hasOwnProperty.call(message, "qualityRelay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityRelay, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.qualityE2e != null && Object.hasOwnProperty.call(message, "qualityE2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityE2e, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.notPrimaryTransport != null && Object.hasOwnProperty.call(message, "notPrimaryTransport"))
                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.notPrimaryTransport);
            if (message.p2pRoutingSummary != null && Object.hasOwnProperty.call(message, "p2pRoutingSummary"))
                $root.CMsgSteamDatagramP2PRoutingSummary.encode(message.p2pRoutingSummary, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            if (message.relayOverrideActive != null && Object.hasOwnProperty.call(message, "relayOverrideActive"))
                writer.uint32(/* id 17, wireType 0 =*/136).bool(message.relayOverrideActive);
            if (message.dummyPad != null && Object.hasOwnProperty.call(message, "dummyPad"))
                writer.uint32(/* id 1023, wireType 5 =*/8189).fixed32(message.dummyPad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramNoConnection message, length delimited. Does not implicitly {@link CMsgSteamDatagramNoConnection.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {ICMsgSteamDatagramNoConnection} message CMsgSteamDatagramNoConnection message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramNoConnection.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoConnection message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramNoConnection} CMsgSteamDatagramNoConnection
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoConnection.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramNoConnection();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 5: {
                        message.toConnectionId = reader.fixed32();
                        break;
                    }
                case 6: {
                        message.fromConnectionId = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.legacyGameserverRelaySessionId = reader.uint32();
                        break;
                    }
                case 9: {
                        message.toRelaySessionId = reader.fixed32();
                        break;
                    }
                case 10: {
                        message.fromRelaySessionId = reader.fixed32();
                        break;
                    }
                case 7: {
                        message.fromIdentityString = reader.string();
                        break;
                    }
                case 3: {
                        message.legacyFromSteamId = reader.fixed64();
                        break;
                    }
                case 4: {
                        message.endToEnd = reader.bool();
                        break;
                    }
                case 12: {
                        message.notPrimarySession = reader.bool();
                        break;
                    }
                case 15: {
                        message.notPrimaryTransport = reader.bool();
                        break;
                    }
                case 17: {
                        message.relayOverrideActive = reader.bool();
                        break;
                    }
                case 13: {
                        message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 14: {
                        message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 16: {
                        message.p2pRoutingSummary = $root.CMsgSteamDatagramP2PRoutingSummary.decode(reader, reader.uint32());
                        break;
                    }
                case 11: {
                        message.routingSecret = reader.fixed64();
                        break;
                    }
                case 1023: {
                        message.dummyPad = reader.fixed32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramNoConnection message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramNoConnection} CMsgSteamDatagramNoConnection
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramNoConnection.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramNoConnection message.
         * @function verify
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramNoConnection.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.toConnectionId != null && message.hasOwnProperty("toConnectionId"))
                if (!$util.isInteger(message.toConnectionId))
                    return "toConnectionId: integer expected";
            if (message.fromConnectionId != null && message.hasOwnProperty("fromConnectionId"))
                if (!$util.isInteger(message.fromConnectionId))
                    return "fromConnectionId: integer expected";
            if (message.legacyGameserverRelaySessionId != null && message.hasOwnProperty("legacyGameserverRelaySessionId"))
                if (!$util.isInteger(message.legacyGameserverRelaySessionId))
                    return "legacyGameserverRelaySessionId: integer expected";
            if (message.toRelaySessionId != null && message.hasOwnProperty("toRelaySessionId"))
                if (!$util.isInteger(message.toRelaySessionId))
                    return "toRelaySessionId: integer expected";
            if (message.fromRelaySessionId != null && message.hasOwnProperty("fromRelaySessionId"))
                if (!$util.isInteger(message.fromRelaySessionId))
                    return "fromRelaySessionId: integer expected";
            if (message.fromIdentityString != null && message.hasOwnProperty("fromIdentityString"))
                if (!$util.isString(message.fromIdentityString))
                    return "fromIdentityString: string expected";
            if (message.legacyFromSteamId != null && message.hasOwnProperty("legacyFromSteamId"))
                if (!$util.isInteger(message.legacyFromSteamId) && !(message.legacyFromSteamId && $util.isInteger(message.legacyFromSteamId.low) && $util.isInteger(message.legacyFromSteamId.high)))
                    return "legacyFromSteamId: integer|Long expected";
            if (message.endToEnd != null && message.hasOwnProperty("endToEnd"))
                if (typeof message.endToEnd !== "boolean")
                    return "endToEnd: boolean expected";
            if (message.notPrimarySession != null && message.hasOwnProperty("notPrimarySession"))
                if (typeof message.notPrimarySession !== "boolean")
                    return "notPrimarySession: boolean expected";
            if (message.notPrimaryTransport != null && message.hasOwnProperty("notPrimaryTransport"))
                if (typeof message.notPrimaryTransport !== "boolean")
                    return "notPrimaryTransport: boolean expected";
            if (message.relayOverrideActive != null && message.hasOwnProperty("relayOverrideActive"))
                if (typeof message.relayOverrideActive !== "boolean")
                    return "relayOverrideActive: boolean expected";
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityRelay);
                if (error)
                    return "qualityRelay." + error;
            }
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityE2e);
                if (error)
                    return "qualityE2e." + error;
            }
            if (message.p2pRoutingSummary != null && message.hasOwnProperty("p2pRoutingSummary")) {
                var error = $root.CMsgSteamDatagramP2PRoutingSummary.verify(message.p2pRoutingSummary);
                if (error)
                    return "p2pRoutingSummary." + error;
            }
            if (message.routingSecret != null && message.hasOwnProperty("routingSecret"))
                if (!$util.isInteger(message.routingSecret) && !(message.routingSecret && $util.isInteger(message.routingSecret.low) && $util.isInteger(message.routingSecret.high)))
                    return "routingSecret: integer|Long expected";
            if (message.dummyPad != null && message.hasOwnProperty("dummyPad"))
                if (!$util.isInteger(message.dummyPad))
                    return "dummyPad: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramNoConnection message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramNoConnection} CMsgSteamDatagramNoConnection
         */
        CMsgSteamDatagramNoConnection.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramNoConnection)
                return object;
            var message = new $root.CMsgSteamDatagramNoConnection();
            if (object.toConnectionId != null)
                message.toConnectionId = object.toConnectionId >>> 0;
            if (object.fromConnectionId != null)
                message.fromConnectionId = object.fromConnectionId >>> 0;
            if (object.legacyGameserverRelaySessionId != null)
                message.legacyGameserverRelaySessionId = object.legacyGameserverRelaySessionId >>> 0;
            if (object.toRelaySessionId != null)
                message.toRelaySessionId = object.toRelaySessionId >>> 0;
            if (object.fromRelaySessionId != null)
                message.fromRelaySessionId = object.fromRelaySessionId >>> 0;
            if (object.fromIdentityString != null)
                message.fromIdentityString = String(object.fromIdentityString);
            if (object.legacyFromSteamId != null)
                if ($util.Long)
                    (message.legacyFromSteamId = $util.Long.fromValue(object.legacyFromSteamId)).unsigned = false;
                else if (typeof object.legacyFromSteamId === "string")
                    message.legacyFromSteamId = parseInt(object.legacyFromSteamId, 10);
                else if (typeof object.legacyFromSteamId === "number")
                    message.legacyFromSteamId = object.legacyFromSteamId;
                else if (typeof object.legacyFromSteamId === "object")
                    message.legacyFromSteamId = new $util.LongBits(object.legacyFromSteamId.low >>> 0, object.legacyFromSteamId.high >>> 0).toNumber();
            if (object.endToEnd != null)
                message.endToEnd = Boolean(object.endToEnd);
            if (object.notPrimarySession != null)
                message.notPrimarySession = Boolean(object.notPrimarySession);
            if (object.notPrimaryTransport != null)
                message.notPrimaryTransport = Boolean(object.notPrimaryTransport);
            if (object.relayOverrideActive != null)
                message.relayOverrideActive = Boolean(object.relayOverrideActive);
            if (object.qualityRelay != null) {
                if (typeof object.qualityRelay !== "object")
                    throw TypeError(".CMsgSteamDatagramNoConnection.qualityRelay: object expected");
                message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityRelay);
            }
            if (object.qualityE2e != null) {
                if (typeof object.qualityE2e !== "object")
                    throw TypeError(".CMsgSteamDatagramNoConnection.qualityE2e: object expected");
                message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityE2e);
            }
            if (object.p2pRoutingSummary != null) {
                if (typeof object.p2pRoutingSummary !== "object")
                    throw TypeError(".CMsgSteamDatagramNoConnection.p2pRoutingSummary: object expected");
                message.p2pRoutingSummary = $root.CMsgSteamDatagramP2PRoutingSummary.fromObject(object.p2pRoutingSummary);
            }
            if (object.routingSecret != null)
                if ($util.Long)
                    (message.routingSecret = $util.Long.fromValue(object.routingSecret)).unsigned = false;
                else if (typeof object.routingSecret === "string")
                    message.routingSecret = parseInt(object.routingSecret, 10);
                else if (typeof object.routingSecret === "number")
                    message.routingSecret = object.routingSecret;
                else if (typeof object.routingSecret === "object")
                    message.routingSecret = new $util.LongBits(object.routingSecret.low >>> 0, object.routingSecret.high >>> 0).toNumber();
            if (object.dummyPad != null)
                message.dummyPad = object.dummyPad >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramNoConnection message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {CMsgSteamDatagramNoConnection} message CMsgSteamDatagramNoConnection
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramNoConnection.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.legacyGameserverRelaySessionId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacyFromSteamId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacyFromSteamId = options.longs === String ? "0" : 0;
                object.endToEnd = false;
                object.toConnectionId = 0;
                object.fromConnectionId = 0;
                object.fromIdentityString = "";
                object.toRelaySessionId = 0;
                object.fromRelaySessionId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.routingSecret = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.routingSecret = options.longs === String ? "0" : 0;
                object.notPrimarySession = false;
                object.qualityRelay = null;
                object.qualityE2e = null;
                object.notPrimaryTransport = false;
                object.p2pRoutingSummary = null;
                object.relayOverrideActive = false;
                object.dummyPad = 0;
            }
            if (message.legacyGameserverRelaySessionId != null && message.hasOwnProperty("legacyGameserverRelaySessionId"))
                object.legacyGameserverRelaySessionId = message.legacyGameserverRelaySessionId;
            if (message.legacyFromSteamId != null && message.hasOwnProperty("legacyFromSteamId"))
                if (typeof message.legacyFromSteamId === "number")
                    object.legacyFromSteamId = options.longs === String ? String(message.legacyFromSteamId) : message.legacyFromSteamId;
                else
                    object.legacyFromSteamId = options.longs === String ? $util.Long.prototype.toString.call(message.legacyFromSteamId) : options.longs === Number ? new $util.LongBits(message.legacyFromSteamId.low >>> 0, message.legacyFromSteamId.high >>> 0).toNumber() : message.legacyFromSteamId;
            if (message.endToEnd != null && message.hasOwnProperty("endToEnd"))
                object.endToEnd = message.endToEnd;
            if (message.toConnectionId != null && message.hasOwnProperty("toConnectionId"))
                object.toConnectionId = message.toConnectionId;
            if (message.fromConnectionId != null && message.hasOwnProperty("fromConnectionId"))
                object.fromConnectionId = message.fromConnectionId;
            if (message.fromIdentityString != null && message.hasOwnProperty("fromIdentityString"))
                object.fromIdentityString = message.fromIdentityString;
            if (message.toRelaySessionId != null && message.hasOwnProperty("toRelaySessionId"))
                object.toRelaySessionId = message.toRelaySessionId;
            if (message.fromRelaySessionId != null && message.hasOwnProperty("fromRelaySessionId"))
                object.fromRelaySessionId = message.fromRelaySessionId;
            if (message.routingSecret != null && message.hasOwnProperty("routingSecret"))
                if (typeof message.routingSecret === "number")
                    object.routingSecret = options.longs === String ? String(message.routingSecret) : message.routingSecret;
                else
                    object.routingSecret = options.longs === String ? $util.Long.prototype.toString.call(message.routingSecret) : options.longs === Number ? new $util.LongBits(message.routingSecret.low >>> 0, message.routingSecret.high >>> 0).toNumber() : message.routingSecret;
            if (message.notPrimarySession != null && message.hasOwnProperty("notPrimarySession"))
                object.notPrimarySession = message.notPrimarySession;
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay"))
                object.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityRelay, options);
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e"))
                object.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityE2e, options);
            if (message.notPrimaryTransport != null && message.hasOwnProperty("notPrimaryTransport"))
                object.notPrimaryTransport = message.notPrimaryTransport;
            if (message.p2pRoutingSummary != null && message.hasOwnProperty("p2pRoutingSummary"))
                object.p2pRoutingSummary = $root.CMsgSteamDatagramP2PRoutingSummary.toObject(message.p2pRoutingSummary, options);
            if (message.relayOverrideActive != null && message.hasOwnProperty("relayOverrideActive"))
                object.relayOverrideActive = message.relayOverrideActive;
            if (message.dummyPad != null && message.hasOwnProperty("dummyPad"))
                object.dummyPad = message.dummyPad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramNoConnection to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramNoConnection
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramNoConnection.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramNoConnection
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramNoConnection
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramNoConnection.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramNoConnection";
        };
    
        return CMsgSteamDatagramNoConnection;
    })();
    
    $root.CMsgSteamDatagramGameserverSessionRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameserverSessionRequest.
         * @exports ICMsgSteamDatagramGameserverSessionRequest
         * @interface ICMsgSteamDatagramGameserverSessionRequest
         * @property {Uint8Array|null} [ticket] CMsgSteamDatagramGameserverSessionRequest ticket
         * @property {number|null} [challengeTime] CMsgSteamDatagramGameserverSessionRequest challengeTime
         * @property {number|Long|null} [challenge] CMsgSteamDatagramGameserverSessionRequest challenge
         * @property {number|null} [clientConnectionId] CMsgSteamDatagramGameserverSessionRequest clientConnectionId
         * @property {number|null} [serverConnectionId] CMsgSteamDatagramGameserverSessionRequest serverConnectionId
         * @property {number|Long|null} [networkConfigVersion] CMsgSteamDatagramGameserverSessionRequest networkConfigVersion
         * @property {number|null} [protocolVersion] CMsgSteamDatagramGameserverSessionRequest protocolVersion
         * @property {string|null} [platform] CMsgSteamDatagramGameserverSessionRequest platform
         * @property {string|null} [build] CMsgSteamDatagramGameserverSessionRequest build
         * @property {string|null} [devGameserverIdentity] CMsgSteamDatagramGameserverSessionRequest devGameserverIdentity
         * @property {ICMsgSteamDatagramCertificateSigned|null} [devClientCert] CMsgSteamDatagramGameserverSessionRequest devClientCert
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameserverSessionRequest.
         * @exports CMsgSteamDatagramGameserverSessionRequest
         * @classdesc Represents a CMsgSteamDatagramGameserverSessionRequest.
         * @implements ICMsgSteamDatagramGameserverSessionRequest
         * @constructor
         * @param {ICMsgSteamDatagramGameserverSessionRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameserverSessionRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest ticket.
         * @member {Uint8Array} ticket
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.ticket = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest challengeTime.
         * @member {number} challengeTime
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.challengeTime = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest challenge.
         * @member {number|Long} challenge
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.challenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest clientConnectionId.
         * @member {number} clientConnectionId
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.clientConnectionId = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest serverConnectionId.
         * @member {number} serverConnectionId
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.serverConnectionId = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest networkConfigVersion.
         * @member {number|Long} networkConfigVersion
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.networkConfigVersion = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest protocolVersion.
         * @member {number} protocolVersion
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.protocolVersion = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest platform.
         * @member {string} platform
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.platform = "";
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest build.
         * @member {string} build
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.build = "";
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest devGameserverIdentity.
         * @member {string} devGameserverIdentity
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.devGameserverIdentity = "";
    
        /**
         * CMsgSteamDatagramGameserverSessionRequest devClientCert.
         * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} devClientCert
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.devClientCert = null;
    
        /**
         * Creates a new CMsgSteamDatagramGameserverSessionRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameserverSessionRequest} CMsgSteamDatagramGameserverSessionRequest instance
         */
        CMsgSteamDatagramGameserverSessionRequest.create = function create(properties) {
            return new CMsgSteamDatagramGameserverSessionRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverSessionRequest message. Does not implicitly {@link CMsgSteamDatagramGameserverSessionRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionRequest} message CMsgSteamDatagramGameserverSessionRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverSessionRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ticket != null && Object.hasOwnProperty.call(message, "ticket"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ticket);
            if (message.challengeTime != null && Object.hasOwnProperty.call(message, "challengeTime"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.challengeTime);
            if (message.challenge != null && Object.hasOwnProperty.call(message, "challenge"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.challenge);
            if (message.clientConnectionId != null && Object.hasOwnProperty.call(message, "clientConnectionId"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.clientConnectionId);
            if (message.networkConfigVersion != null && Object.hasOwnProperty.call(message, "networkConfigVersion"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.networkConfigVersion);
            if (message.protocolVersion != null && Object.hasOwnProperty.call(message, "protocolVersion"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.protocolVersion);
            if (message.serverConnectionId != null && Object.hasOwnProperty.call(message, "serverConnectionId"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.serverConnectionId);
            if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.platform);
            if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.build);
            if (message.devGameserverIdentity != null && Object.hasOwnProperty.call(message, "devGameserverIdentity"))
                writer.uint32(/* id 100, wireType 2 =*/802).string(message.devGameserverIdentity);
            if (message.devClientCert != null && Object.hasOwnProperty.call(message, "devClientCert"))
                $root.CMsgSteamDatagramCertificateSigned.encode(message.devClientCert, writer.uint32(/* id 101, wireType 2 =*/810).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverSessionRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameserverSessionRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionRequest} message CMsgSteamDatagramGameserverSessionRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverSessionRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameserverSessionRequest} CMsgSteamDatagramGameserverSessionRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverSessionRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameserverSessionRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.ticket = reader.bytes();
                        break;
                    }
                case 3: {
                        message.challengeTime = reader.fixed32();
                        break;
                    }
                case 4: {
                        message.challenge = reader.fixed64();
                        break;
                    }
                case 5: {
                        message.clientConnectionId = reader.fixed32();
                        break;
                    }
                case 8: {
                        message.serverConnectionId = reader.fixed32();
                        break;
                    }
                case 6: {
                        message.networkConfigVersion = reader.uint64();
                        break;
                    }
                case 7: {
                        message.protocolVersion = reader.uint32();
                        break;
                    }
                case 9: {
                        message.platform = reader.string();
                        break;
                    }
                case 10: {
                        message.build = reader.string();
                        break;
                    }
                case 100: {
                        message.devGameserverIdentity = reader.string();
                        break;
                    }
                case 101: {
                        message.devClientCert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverSessionRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameserverSessionRequest} CMsgSteamDatagramGameserverSessionRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverSessionRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameserverSessionRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameserverSessionRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                if (!(message.ticket && typeof message.ticket.length === "number" || $util.isString(message.ticket)))
                    return "ticket: buffer expected";
            if (message.challengeTime != null && message.hasOwnProperty("challengeTime"))
                if (!$util.isInteger(message.challengeTime))
                    return "challengeTime: integer expected";
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (!$util.isInteger(message.challenge) && !(message.challenge && $util.isInteger(message.challenge.low) && $util.isInteger(message.challenge.high)))
                    return "challenge: integer|Long expected";
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                if (!$util.isInteger(message.clientConnectionId))
                    return "clientConnectionId: integer expected";
            if (message.serverConnectionId != null && message.hasOwnProperty("serverConnectionId"))
                if (!$util.isInteger(message.serverConnectionId))
                    return "serverConnectionId: integer expected";
            if (message.networkConfigVersion != null && message.hasOwnProperty("networkConfigVersion"))
                if (!$util.isInteger(message.networkConfigVersion) && !(message.networkConfigVersion && $util.isInteger(message.networkConfigVersion.low) && $util.isInteger(message.networkConfigVersion.high)))
                    return "networkConfigVersion: integer|Long expected";
            if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
                if (!$util.isInteger(message.protocolVersion))
                    return "protocolVersion: integer expected";
            if (message.platform != null && message.hasOwnProperty("platform"))
                if (!$util.isString(message.platform))
                    return "platform: string expected";
            if (message.build != null && message.hasOwnProperty("build"))
                if (!$util.isString(message.build))
                    return "build: string expected";
            if (message.devGameserverIdentity != null && message.hasOwnProperty("devGameserverIdentity"))
                if (!$util.isString(message.devGameserverIdentity))
                    return "devGameserverIdentity: string expected";
            if (message.devClientCert != null && message.hasOwnProperty("devClientCert")) {
                var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.devClientCert);
                if (error)
                    return "devClientCert." + error;
            }
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameserverSessionRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameserverSessionRequest} CMsgSteamDatagramGameserverSessionRequest
         */
        CMsgSteamDatagramGameserverSessionRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameserverSessionRequest)
                return object;
            var message = new $root.CMsgSteamDatagramGameserverSessionRequest();
            if (object.ticket != null)
                if (typeof object.ticket === "string")
                    $util.base64.decode(object.ticket, message.ticket = $util.newBuffer($util.base64.length(object.ticket)), 0);
                else if (object.ticket.length >= 0)
                    message.ticket = object.ticket;
            if (object.challengeTime != null)
                message.challengeTime = object.challengeTime >>> 0;
            if (object.challenge != null)
                if ($util.Long)
                    (message.challenge = $util.Long.fromValue(object.challenge)).unsigned = false;
                else if (typeof object.challenge === "string")
                    message.challenge = parseInt(object.challenge, 10);
                else if (typeof object.challenge === "number")
                    message.challenge = object.challenge;
                else if (typeof object.challenge === "object")
                    message.challenge = new $util.LongBits(object.challenge.low >>> 0, object.challenge.high >>> 0).toNumber();
            if (object.clientConnectionId != null)
                message.clientConnectionId = object.clientConnectionId >>> 0;
            if (object.serverConnectionId != null)
                message.serverConnectionId = object.serverConnectionId >>> 0;
            if (object.networkConfigVersion != null)
                if ($util.Long)
                    (message.networkConfigVersion = $util.Long.fromValue(object.networkConfigVersion)).unsigned = true;
                else if (typeof object.networkConfigVersion === "string")
                    message.networkConfigVersion = parseInt(object.networkConfigVersion, 10);
                else if (typeof object.networkConfigVersion === "number")
                    message.networkConfigVersion = object.networkConfigVersion;
                else if (typeof object.networkConfigVersion === "object")
                    message.networkConfigVersion = new $util.LongBits(object.networkConfigVersion.low >>> 0, object.networkConfigVersion.high >>> 0).toNumber(true);
            if (object.protocolVersion != null)
                message.protocolVersion = object.protocolVersion >>> 0;
            if (object.platform != null)
                message.platform = String(object.platform);
            if (object.build != null)
                message.build = String(object.build);
            if (object.devGameserverIdentity != null)
                message.devGameserverIdentity = String(object.devGameserverIdentity);
            if (object.devClientCert != null) {
                if (typeof object.devClientCert !== "object")
                    throw TypeError(".CMsgSteamDatagramGameserverSessionRequest.devClientCert: object expected");
                message.devClientCert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.devClientCert);
            }
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameserverSessionRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {CMsgSteamDatagramGameserverSessionRequest} message CMsgSteamDatagramGameserverSessionRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameserverSessionRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.ticket = "";
                else {
                    object.ticket = [];
                    if (options.bytes !== Array)
                        object.ticket = $util.newBuffer(object.ticket);
                }
                object.challengeTime = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.challenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.challenge = options.longs === String ? "0" : 0;
                object.clientConnectionId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.networkConfigVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.networkConfigVersion = options.longs === String ? "0" : 0;
                object.protocolVersion = 0;
                object.serverConnectionId = 0;
                object.platform = "";
                object.build = "";
                object.devGameserverIdentity = "";
                object.devClientCert = null;
            }
            if (message.ticket != null && message.hasOwnProperty("ticket"))
                object.ticket = options.bytes === String ? $util.base64.encode(message.ticket, 0, message.ticket.length) : options.bytes === Array ? Array.prototype.slice.call(message.ticket) : message.ticket;
            if (message.challengeTime != null && message.hasOwnProperty("challengeTime"))
                object.challengeTime = message.challengeTime;
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (typeof message.challenge === "number")
                    object.challenge = options.longs === String ? String(message.challenge) : message.challenge;
                else
                    object.challenge = options.longs === String ? $util.Long.prototype.toString.call(message.challenge) : options.longs === Number ? new $util.LongBits(message.challenge.low >>> 0, message.challenge.high >>> 0).toNumber() : message.challenge;
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                object.clientConnectionId = message.clientConnectionId;
            if (message.networkConfigVersion != null && message.hasOwnProperty("networkConfigVersion"))
                if (typeof message.networkConfigVersion === "number")
                    object.networkConfigVersion = options.longs === String ? String(message.networkConfigVersion) : message.networkConfigVersion;
                else
                    object.networkConfigVersion = options.longs === String ? $util.Long.prototype.toString.call(message.networkConfigVersion) : options.longs === Number ? new $util.LongBits(message.networkConfigVersion.low >>> 0, message.networkConfigVersion.high >>> 0).toNumber(true) : message.networkConfigVersion;
            if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
                object.protocolVersion = message.protocolVersion;
            if (message.serverConnectionId != null && message.hasOwnProperty("serverConnectionId"))
                object.serverConnectionId = message.serverConnectionId;
            if (message.platform != null && message.hasOwnProperty("platform"))
                object.platform = message.platform;
            if (message.build != null && message.hasOwnProperty("build"))
                object.build = message.build;
            if (message.devGameserverIdentity != null && message.hasOwnProperty("devGameserverIdentity"))
                object.devGameserverIdentity = message.devGameserverIdentity;
            if (message.devClientCert != null && message.hasOwnProperty("devClientCert"))
                object.devClientCert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.devClientCert, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameserverSessionRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameserverSessionRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramGameserverSessionRequest
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramGameserverSessionRequest
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramGameserverSessionRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramGameserverSessionRequest";
        };
    
        return CMsgSteamDatagramGameserverSessionRequest;
    })();
    
    $root.CMsgSteamDatagramGameserverSessionEstablished = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramGameserverSessionEstablished.
         * @exports ICMsgSteamDatagramGameserverSessionEstablished
         * @interface ICMsgSteamDatagramGameserverSessionEstablished
         * @property {number|null} [connectionId] CMsgSteamDatagramGameserverSessionEstablished connectionId
         * @property {string|null} [gameserverIdentityString] CMsgSteamDatagramGameserverSessionEstablished gameserverIdentityString
         * @property {number|null} [secondsUntilShutdown] CMsgSteamDatagramGameserverSessionEstablished secondsUntilShutdown
         * @property {number|null} [seqNumR2c] CMsgSteamDatagramGameserverSessionEstablished seqNumR2c
         * @property {Uint8Array|null} [dummyLegacyIdentityBinary] CMsgSteamDatagramGameserverSessionEstablished dummyLegacyIdentityBinary
         * @property {number|Long|null} [legacyGameserverSteamid] CMsgSteamDatagramGameserverSessionEstablished legacyGameserverSteamid
         */
    
        /**
         * Constructs a new CMsgSteamDatagramGameserverSessionEstablished.
         * @exports CMsgSteamDatagramGameserverSessionEstablished
         * @classdesc Represents a CMsgSteamDatagramGameserverSessionEstablished.
         * @implements ICMsgSteamDatagramGameserverSessionEstablished
         * @constructor
         * @param {ICMsgSteamDatagramGameserverSessionEstablished=} [properties] Properties to set
         */
        function CMsgSteamDatagramGameserverSessionEstablished(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished connectionId.
         * @member {number} connectionId
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.connectionId = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished gameserverIdentityString.
         * @member {string} gameserverIdentityString
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.gameserverIdentityString = "";
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished secondsUntilShutdown.
         * @member {number} secondsUntilShutdown
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.secondsUntilShutdown = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished seqNumR2c.
         * @member {number} seqNumR2c
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.seqNumR2c = 0;
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished dummyLegacyIdentityBinary.
         * @member {Uint8Array} dummyLegacyIdentityBinary
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.dummyLegacyIdentityBinary = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramGameserverSessionEstablished legacyGameserverSteamid.
         * @member {number|Long} legacyGameserverSteamid
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.legacyGameserverSteamid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramGameserverSessionEstablished instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionEstablished=} [properties] Properties to set
         * @returns {CMsgSteamDatagramGameserverSessionEstablished} CMsgSteamDatagramGameserverSessionEstablished instance
         */
        CMsgSteamDatagramGameserverSessionEstablished.create = function create(properties) {
            return new CMsgSteamDatagramGameserverSessionEstablished(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverSessionEstablished message. Does not implicitly {@link CMsgSteamDatagramGameserverSessionEstablished.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionEstablished} message CMsgSteamDatagramGameserverSessionEstablished message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverSessionEstablished.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectionId != null && Object.hasOwnProperty.call(message, "connectionId"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connectionId);
            if (message.gameserverIdentityString != null && Object.hasOwnProperty.call(message, "gameserverIdentityString"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gameserverIdentityString);
            if (message.legacyGameserverSteamid != null && Object.hasOwnProperty.call(message, "legacyGameserverSteamid"))
                writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.legacyGameserverSteamid);
            if (message.secondsUntilShutdown != null && Object.hasOwnProperty.call(message, "secondsUntilShutdown"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.secondsUntilShutdown);
            if (message.seqNumR2c != null && Object.hasOwnProperty.call(message, "seqNumR2c"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.seqNumR2c);
            if (message.dummyLegacyIdentityBinary != null && Object.hasOwnProperty.call(message, "dummyLegacyIdentityBinary"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.dummyLegacyIdentityBinary);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramGameserverSessionEstablished message, length delimited. Does not implicitly {@link CMsgSteamDatagramGameserverSessionEstablished.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramGameserverSessionEstablished} message CMsgSteamDatagramGameserverSessionEstablished message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramGameserverSessionEstablished.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverSessionEstablished message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramGameserverSessionEstablished} CMsgSteamDatagramGameserverSessionEstablished
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverSessionEstablished.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramGameserverSessionEstablished();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.connectionId = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.gameserverIdentityString = reader.string();
                        break;
                    }
                case 4: {
                        message.secondsUntilShutdown = reader.uint32();
                        break;
                    }
                case 6: {
                        message.seqNumR2c = reader.uint32();
                        break;
                    }
                case 7: {
                        message.dummyLegacyIdentityBinary = reader.bytes();
                        break;
                    }
                case 3: {
                        message.legacyGameserverSteamid = reader.fixed64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramGameserverSessionEstablished message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramGameserverSessionEstablished} CMsgSteamDatagramGameserverSessionEstablished
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramGameserverSessionEstablished.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramGameserverSessionEstablished message.
         * @function verify
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramGameserverSessionEstablished.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                if (!$util.isInteger(message.connectionId))
                    return "connectionId: integer expected";
            if (message.gameserverIdentityString != null && message.hasOwnProperty("gameserverIdentityString"))
                if (!$util.isString(message.gameserverIdentityString))
                    return "gameserverIdentityString: string expected";
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                if (!$util.isInteger(message.secondsUntilShutdown))
                    return "secondsUntilShutdown: integer expected";
            if (message.seqNumR2c != null && message.hasOwnProperty("seqNumR2c"))
                if (!$util.isInteger(message.seqNumR2c))
                    return "seqNumR2c: integer expected";
            if (message.dummyLegacyIdentityBinary != null && message.hasOwnProperty("dummyLegacyIdentityBinary"))
                if (!(message.dummyLegacyIdentityBinary && typeof message.dummyLegacyIdentityBinary.length === "number" || $util.isString(message.dummyLegacyIdentityBinary)))
                    return "dummyLegacyIdentityBinary: buffer expected";
            if (message.legacyGameserverSteamid != null && message.hasOwnProperty("legacyGameserverSteamid"))
                if (!$util.isInteger(message.legacyGameserverSteamid) && !(message.legacyGameserverSteamid && $util.isInteger(message.legacyGameserverSteamid.low) && $util.isInteger(message.legacyGameserverSteamid.high)))
                    return "legacyGameserverSteamid: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramGameserverSessionEstablished message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramGameserverSessionEstablished} CMsgSteamDatagramGameserverSessionEstablished
         */
        CMsgSteamDatagramGameserverSessionEstablished.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramGameserverSessionEstablished)
                return object;
            var message = new $root.CMsgSteamDatagramGameserverSessionEstablished();
            if (object.connectionId != null)
                message.connectionId = object.connectionId >>> 0;
            if (object.gameserverIdentityString != null)
                message.gameserverIdentityString = String(object.gameserverIdentityString);
            if (object.secondsUntilShutdown != null)
                message.secondsUntilShutdown = object.secondsUntilShutdown >>> 0;
            if (object.seqNumR2c != null)
                message.seqNumR2c = object.seqNumR2c >>> 0;
            if (object.dummyLegacyIdentityBinary != null)
                if (typeof object.dummyLegacyIdentityBinary === "string")
                    $util.base64.decode(object.dummyLegacyIdentityBinary, message.dummyLegacyIdentityBinary = $util.newBuffer($util.base64.length(object.dummyLegacyIdentityBinary)), 0);
                else if (object.dummyLegacyIdentityBinary.length >= 0)
                    message.dummyLegacyIdentityBinary = object.dummyLegacyIdentityBinary;
            if (object.legacyGameserverSteamid != null)
                if ($util.Long)
                    (message.legacyGameserverSteamid = $util.Long.fromValue(object.legacyGameserverSteamid)).unsigned = false;
                else if (typeof object.legacyGameserverSteamid === "string")
                    message.legacyGameserverSteamid = parseInt(object.legacyGameserverSteamid, 10);
                else if (typeof object.legacyGameserverSteamid === "number")
                    message.legacyGameserverSteamid = object.legacyGameserverSteamid;
                else if (typeof object.legacyGameserverSteamid === "object")
                    message.legacyGameserverSteamid = new $util.LongBits(object.legacyGameserverSteamid.low >>> 0, object.legacyGameserverSteamid.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramGameserverSessionEstablished message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {CMsgSteamDatagramGameserverSessionEstablished} message CMsgSteamDatagramGameserverSessionEstablished
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramGameserverSessionEstablished.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connectionId = 0;
                object.gameserverIdentityString = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacyGameserverSteamid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacyGameserverSteamid = options.longs === String ? "0" : 0;
                object.secondsUntilShutdown = 0;
                object.seqNumR2c = 0;
                if (options.bytes === String)
                    object.dummyLegacyIdentityBinary = "";
                else {
                    object.dummyLegacyIdentityBinary = [];
                    if (options.bytes !== Array)
                        object.dummyLegacyIdentityBinary = $util.newBuffer(object.dummyLegacyIdentityBinary);
                }
            }
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                object.connectionId = message.connectionId;
            if (message.gameserverIdentityString != null && message.hasOwnProperty("gameserverIdentityString"))
                object.gameserverIdentityString = message.gameserverIdentityString;
            if (message.legacyGameserverSteamid != null && message.hasOwnProperty("legacyGameserverSteamid"))
                if (typeof message.legacyGameserverSteamid === "number")
                    object.legacyGameserverSteamid = options.longs === String ? String(message.legacyGameserverSteamid) : message.legacyGameserverSteamid;
                else
                    object.legacyGameserverSteamid = options.longs === String ? $util.Long.prototype.toString.call(message.legacyGameserverSteamid) : options.longs === Number ? new $util.LongBits(message.legacyGameserverSteamid.low >>> 0, message.legacyGameserverSteamid.high >>> 0).toNumber() : message.legacyGameserverSteamid;
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                object.secondsUntilShutdown = message.secondsUntilShutdown;
            if (message.seqNumR2c != null && message.hasOwnProperty("seqNumR2c"))
                object.seqNumR2c = message.seqNumR2c;
            if (message.dummyLegacyIdentityBinary != null && message.hasOwnProperty("dummyLegacyIdentityBinary"))
                object.dummyLegacyIdentityBinary = options.bytes === String ? $util.base64.encode(message.dummyLegacyIdentityBinary, 0, message.dummyLegacyIdentityBinary.length) : options.bytes === Array ? Array.prototype.slice.call(message.dummyLegacyIdentityBinary) : message.dummyLegacyIdentityBinary;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramGameserverSessionEstablished to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramGameserverSessionEstablished.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramGameserverSessionEstablished
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramGameserverSessionEstablished
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramGameserverSessionEstablished.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramGameserverSessionEstablished";
        };
    
        return CMsgSteamDatagramGameserverSessionEstablished;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsClientToRouter = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsClientToRouter.
         * @exports ICMsgSteamDatagramConnectionStatsClientToRouter
         * @interface ICMsgSteamDatagramConnectionStatsClientToRouter
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityRelay] CMsgSteamDatagramConnectionStatsClientToRouter qualityRelay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityE2e] CMsgSteamDatagramConnectionStatsClientToRouter qualityE2e
         * @property {Array.<number>|null} [ackRelay] CMsgSteamDatagramConnectionStatsClientToRouter ackRelay
         * @property {Array.<number>|null} [legacyAckE2e] CMsgSteamDatagramConnectionStatsClientToRouter legacyAckE2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsClientToRouter flags
         * @property {number|null} [clientConnectionId] CMsgSteamDatagramConnectionStatsClientToRouter clientConnectionId
         * @property {number|null} [seqNumC2r] CMsgSteamDatagramConnectionStatsClientToRouter seqNumC2r
         * @property {number|null} [seqNumE2e] CMsgSteamDatagramConnectionStatsClientToRouter seqNumE2e
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsClientToRouter.
         * @exports CMsgSteamDatagramConnectionStatsClientToRouter
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsClientToRouter.
         * @implements ICMsgSteamDatagramConnectionStatsClientToRouter
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsClientToRouter=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsClientToRouter(properties) {
            this.ackRelay = [];
            this.legacyAckE2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter qualityRelay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityRelay
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.qualityRelay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter qualityE2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityE2e
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.qualityE2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter ackRelay.
         * @member {Array.<number>} ackRelay
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.ackRelay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter legacyAckE2e.
         * @member {Array.<number>} legacyAckE2e
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.legacyAckE2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter clientConnectionId.
         * @member {number} clientConnectionId
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.clientConnectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter seqNumC2r.
         * @member {number} seqNumC2r
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.seqNumC2r = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsClientToRouter seqNumE2e.
         * @member {number} seqNumE2e
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.seqNumE2e = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsClientToRouter instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsClientToRouter=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsClientToRouter} CMsgSteamDatagramConnectionStatsClientToRouter instance
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsClientToRouter(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsClientToRouter message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsClientToRouter.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsClientToRouter} message CMsgSteamDatagramConnectionStatsClientToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.qualityRelay != null && Object.hasOwnProperty.call(message, "qualityRelay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityRelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.qualityE2e != null && Object.hasOwnProperty.call(message, "qualityE2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityE2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ackRelay != null && message.ackRelay.length)
                for (var i = 0; i < message.ackRelay.length; ++i)
                    writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.ackRelay[i]);
            if (message.legacyAckE2e != null && message.legacyAckE2e.length)
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.legacyAckE2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.flags);
            if (message.clientConnectionId != null && Object.hasOwnProperty.call(message, "clientConnectionId"))
                writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.clientConnectionId);
            if (message.seqNumC2r != null && Object.hasOwnProperty.call(message, "seqNumC2r"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.seqNumC2r);
            if (message.seqNumE2e != null && Object.hasOwnProperty.call(message, "seqNumE2e"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.seqNumE2e);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsClientToRouter message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsClientToRouter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsClientToRouter} message CMsgSteamDatagramConnectionStatsClientToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsClientToRouter message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsClientToRouter} CMsgSteamDatagramConnectionStatsClientToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsClientToRouter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 4: {
                        if (!(message.ackRelay && message.ackRelay.length))
                            message.ackRelay = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ackRelay.push(reader.fixed32());
                        } else
                            message.ackRelay.push(reader.fixed32());
                        break;
                    }
                case 5: {
                        if (!(message.legacyAckE2e && message.legacyAckE2e.length))
                            message.legacyAckE2e = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.legacyAckE2e.push(reader.fixed32());
                        } else
                            message.legacyAckE2e.push(reader.fixed32());
                        break;
                    }
                case 6: {
                        message.flags = reader.uint32();
                        break;
                    }
                case 8: {
                        message.clientConnectionId = reader.fixed32();
                        break;
                    }
                case 9: {
                        message.seqNumC2r = reader.uint32();
                        break;
                    }
                case 10: {
                        message.seqNumE2e = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsClientToRouter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsClientToRouter} CMsgSteamDatagramConnectionStatsClientToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsClientToRouter message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityRelay);
                if (error)
                    return "qualityRelay." + error;
            }
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityE2e);
                if (error)
                    return "qualityE2e." + error;
            }
            if (message.ackRelay != null && message.hasOwnProperty("ackRelay")) {
                if (!Array.isArray(message.ackRelay))
                    return "ackRelay: array expected";
                for (var i = 0; i < message.ackRelay.length; ++i)
                    if (!$util.isInteger(message.ackRelay[i]))
                        return "ackRelay: integer[] expected";
            }
            if (message.legacyAckE2e != null && message.hasOwnProperty("legacyAckE2e")) {
                if (!Array.isArray(message.legacyAckE2e))
                    return "legacyAckE2e: array expected";
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    if (!$util.isInteger(message.legacyAckE2e[i]))
                        return "legacyAckE2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                if (!$util.isInteger(message.clientConnectionId))
                    return "clientConnectionId: integer expected";
            if (message.seqNumC2r != null && message.hasOwnProperty("seqNumC2r"))
                if (!$util.isInteger(message.seqNumC2r))
                    return "seqNumC2r: integer expected";
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                if (!$util.isInteger(message.seqNumE2e))
                    return "seqNumE2e: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsClientToRouter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsClientToRouter} CMsgSteamDatagramConnectionStatsClientToRouter
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsClientToRouter)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsClientToRouter();
            if (object.qualityRelay != null) {
                if (typeof object.qualityRelay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsClientToRouter.qualityRelay: object expected");
                message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityRelay);
            }
            if (object.qualityE2e != null) {
                if (typeof object.qualityE2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsClientToRouter.qualityE2e: object expected");
                message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityE2e);
            }
            if (object.ackRelay) {
                if (!Array.isArray(object.ackRelay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsClientToRouter.ackRelay: array expected");
                message.ackRelay = [];
                for (var i = 0; i < object.ackRelay.length; ++i)
                    message.ackRelay[i] = object.ackRelay[i] >>> 0;
            }
            if (object.legacyAckE2e) {
                if (!Array.isArray(object.legacyAckE2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsClientToRouter.legacyAckE2e: array expected");
                message.legacyAckE2e = [];
                for (var i = 0; i < object.legacyAckE2e.length; ++i)
                    message.legacyAckE2e[i] = object.legacyAckE2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.clientConnectionId != null)
                message.clientConnectionId = object.clientConnectionId >>> 0;
            if (object.seqNumC2r != null)
                message.seqNumC2r = object.seqNumC2r >>> 0;
            if (object.seqNumE2e != null)
                message.seqNumE2e = object.seqNumE2e >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsClientToRouter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {CMsgSteamDatagramConnectionStatsClientToRouter} message CMsgSteamDatagramConnectionStatsClientToRouter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ackRelay = [];
                object.legacyAckE2e = [];
            }
            if (options.defaults) {
                object.qualityRelay = null;
                object.qualityE2e = null;
                object.flags = 0;
                object.clientConnectionId = 0;
                object.seqNumC2r = 0;
                object.seqNumE2e = 0;
            }
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay"))
                object.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityRelay, options);
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e"))
                object.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityE2e, options);
            if (message.ackRelay && message.ackRelay.length) {
                object.ackRelay = [];
                for (var j = 0; j < message.ackRelay.length; ++j)
                    object.ackRelay[j] = message.ackRelay[j];
            }
            if (message.legacyAckE2e && message.legacyAckE2e.length) {
                object.legacyAckE2e = [];
                for (var j = 0; j < message.legacyAckE2e.length; ++j)
                    object.legacyAckE2e[j] = message.legacyAckE2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                object.clientConnectionId = message.clientConnectionId;
            if (message.seqNumC2r != null && message.hasOwnProperty("seqNumC2r"))
                object.seqNumC2r = message.seqNumC2r;
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                object.seqNumE2e = message.seqNumE2e;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsClientToRouter to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramConnectionStatsClientToRouter
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramConnectionStatsClientToRouter
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramConnectionStatsClientToRouter";
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsClientToRouter.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         * @property {number} NOT_PRIMARY_SESSION=8 NOT_PRIMARY_SESSION value
         * @property {number} CLIENT_RELAY_OVERRIDE=32 CLIENT_RELAY_OVERRIDE value
         */
        CMsgSteamDatagramConnectionStatsClientToRouter.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            values[valuesById[8] = "NOT_PRIMARY_SESSION"] = 8;
            values[valuesById[32] = "CLIENT_RELAY_OVERRIDE"] = 32;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsClientToRouter;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsRouterToClient = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsRouterToClient.
         * @exports ICMsgSteamDatagramConnectionStatsRouterToClient
         * @interface ICMsgSteamDatagramConnectionStatsRouterToClient
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityRelay] CMsgSteamDatagramConnectionStatsRouterToClient qualityRelay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityE2e] CMsgSteamDatagramConnectionStatsRouterToClient qualityE2e
         * @property {number|null} [secondsUntilShutdown] CMsgSteamDatagramConnectionStatsRouterToClient secondsUntilShutdown
         * @property {number|null} [migrateRequestIp] CMsgSteamDatagramConnectionStatsRouterToClient migrateRequestIp
         * @property {number|null} [migrateRequestPort] CMsgSteamDatagramConnectionStatsRouterToClient migrateRequestPort
         * @property {number|null} [scoringPenaltyRelayCluster] CMsgSteamDatagramConnectionStatsRouterToClient scoringPenaltyRelayCluster
         * @property {Array.<number>|null} [ackRelay] CMsgSteamDatagramConnectionStatsRouterToClient ackRelay
         * @property {Array.<number>|null} [legacyAckE2e] CMsgSteamDatagramConnectionStatsRouterToClient legacyAckE2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsRouterToClient flags
         * @property {number|null} [clientConnectionId] CMsgSteamDatagramConnectionStatsRouterToClient clientConnectionId
         * @property {number|null} [seqNumR2c] CMsgSteamDatagramConnectionStatsRouterToClient seqNumR2c
         * @property {number|null} [seqNumE2e] CMsgSteamDatagramConnectionStatsRouterToClient seqNumE2e
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsRouterToClient.
         * @exports CMsgSteamDatagramConnectionStatsRouterToClient
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsRouterToClient.
         * @implements ICMsgSteamDatagramConnectionStatsRouterToClient
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsRouterToClient=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsRouterToClient(properties) {
            this.ackRelay = [];
            this.legacyAckE2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient qualityRelay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityRelay
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.qualityRelay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient qualityE2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityE2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.qualityE2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient secondsUntilShutdown.
         * @member {number} secondsUntilShutdown
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.secondsUntilShutdown = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient migrateRequestIp.
         * @member {number} migrateRequestIp
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.migrateRequestIp = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient migrateRequestPort.
         * @member {number} migrateRequestPort
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.migrateRequestPort = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient scoringPenaltyRelayCluster.
         * @member {number} scoringPenaltyRelayCluster
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.scoringPenaltyRelayCluster = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient ackRelay.
         * @member {Array.<number>} ackRelay
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.ackRelay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient legacyAckE2e.
         * @member {Array.<number>} legacyAckE2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.legacyAckE2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient clientConnectionId.
         * @member {number} clientConnectionId
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.clientConnectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient seqNumR2c.
         * @member {number} seqNumR2c
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.seqNumR2c = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToClient seqNumE2e.
         * @member {number} seqNumE2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.seqNumE2e = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsRouterToClient instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToClient=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsRouterToClient} CMsgSteamDatagramConnectionStatsRouterToClient instance
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsRouterToClient(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsRouterToClient message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsRouterToClient.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToClient} message CMsgSteamDatagramConnectionStatsRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.qualityRelay != null && Object.hasOwnProperty.call(message, "qualityRelay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityRelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.qualityE2e != null && Object.hasOwnProperty.call(message, "qualityE2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityE2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.secondsUntilShutdown != null && Object.hasOwnProperty.call(message, "secondsUntilShutdown"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.secondsUntilShutdown);
            if (message.clientConnectionId != null && Object.hasOwnProperty.call(message, "clientConnectionId"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.clientConnectionId);
            if (message.seqNumR2c != null && Object.hasOwnProperty.call(message, "seqNumR2c"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.seqNumR2c);
            if (message.seqNumE2e != null && Object.hasOwnProperty.call(message, "seqNumE2e"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.seqNumE2e);
            if (message.migrateRequestIp != null && Object.hasOwnProperty.call(message, "migrateRequestIp"))
                writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.migrateRequestIp);
            if (message.migrateRequestPort != null && Object.hasOwnProperty.call(message, "migrateRequestPort"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.migrateRequestPort);
            if (message.scoringPenaltyRelayCluster != null && Object.hasOwnProperty.call(message, "scoringPenaltyRelayCluster"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.scoringPenaltyRelayCluster);
            if (message.ackRelay != null && message.ackRelay.length)
                for (var i = 0; i < message.ackRelay.length; ++i)
                    writer.uint32(/* id 13, wireType 5 =*/109).fixed32(message.ackRelay[i]);
            if (message.legacyAckE2e != null && message.legacyAckE2e.length)
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    writer.uint32(/* id 14, wireType 5 =*/117).fixed32(message.legacyAckE2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.flags);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsRouterToClient message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsRouterToClient.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToClient} message CMsgSteamDatagramConnectionStatsRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsRouterToClient message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsRouterToClient} CMsgSteamDatagramConnectionStatsRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsRouterToClient();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 6: {
                        message.secondsUntilShutdown = reader.uint32();
                        break;
                    }
                case 10: {
                        message.migrateRequestIp = reader.fixed32();
                        break;
                    }
                case 11: {
                        message.migrateRequestPort = reader.uint32();
                        break;
                    }
                case 12: {
                        message.scoringPenaltyRelayCluster = reader.uint32();
                        break;
                    }
                case 13: {
                        if (!(message.ackRelay && message.ackRelay.length))
                            message.ackRelay = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ackRelay.push(reader.fixed32());
                        } else
                            message.ackRelay.push(reader.fixed32());
                        break;
                    }
                case 14: {
                        if (!(message.legacyAckE2e && message.legacyAckE2e.length))
                            message.legacyAckE2e = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.legacyAckE2e.push(reader.fixed32());
                        } else
                            message.legacyAckE2e.push(reader.fixed32());
                        break;
                    }
                case 15: {
                        message.flags = reader.uint32();
                        break;
                    }
                case 7: {
                        message.clientConnectionId = reader.fixed32();
                        break;
                    }
                case 8: {
                        message.seqNumR2c = reader.uint32();
                        break;
                    }
                case 9: {
                        message.seqNumE2e = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsRouterToClient message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsRouterToClient} CMsgSteamDatagramConnectionStatsRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsRouterToClient message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityRelay);
                if (error)
                    return "qualityRelay." + error;
            }
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityE2e);
                if (error)
                    return "qualityE2e." + error;
            }
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                if (!$util.isInteger(message.secondsUntilShutdown))
                    return "secondsUntilShutdown: integer expected";
            if (message.migrateRequestIp != null && message.hasOwnProperty("migrateRequestIp"))
                if (!$util.isInteger(message.migrateRequestIp))
                    return "migrateRequestIp: integer expected";
            if (message.migrateRequestPort != null && message.hasOwnProperty("migrateRequestPort"))
                if (!$util.isInteger(message.migrateRequestPort))
                    return "migrateRequestPort: integer expected";
            if (message.scoringPenaltyRelayCluster != null && message.hasOwnProperty("scoringPenaltyRelayCluster"))
                if (!$util.isInteger(message.scoringPenaltyRelayCluster))
                    return "scoringPenaltyRelayCluster: integer expected";
            if (message.ackRelay != null && message.hasOwnProperty("ackRelay")) {
                if (!Array.isArray(message.ackRelay))
                    return "ackRelay: array expected";
                for (var i = 0; i < message.ackRelay.length; ++i)
                    if (!$util.isInteger(message.ackRelay[i]))
                        return "ackRelay: integer[] expected";
            }
            if (message.legacyAckE2e != null && message.hasOwnProperty("legacyAckE2e")) {
                if (!Array.isArray(message.legacyAckE2e))
                    return "legacyAckE2e: array expected";
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    if (!$util.isInteger(message.legacyAckE2e[i]))
                        return "legacyAckE2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                if (!$util.isInteger(message.clientConnectionId))
                    return "clientConnectionId: integer expected";
            if (message.seqNumR2c != null && message.hasOwnProperty("seqNumR2c"))
                if (!$util.isInteger(message.seqNumR2c))
                    return "seqNumR2c: integer expected";
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                if (!$util.isInteger(message.seqNumE2e))
                    return "seqNumE2e: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsRouterToClient message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsRouterToClient} CMsgSteamDatagramConnectionStatsRouterToClient
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsRouterToClient)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsRouterToClient();
            if (object.qualityRelay != null) {
                if (typeof object.qualityRelay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToClient.qualityRelay: object expected");
                message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityRelay);
            }
            if (object.qualityE2e != null) {
                if (typeof object.qualityE2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToClient.qualityE2e: object expected");
                message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityE2e);
            }
            if (object.secondsUntilShutdown != null)
                message.secondsUntilShutdown = object.secondsUntilShutdown >>> 0;
            if (object.migrateRequestIp != null)
                message.migrateRequestIp = object.migrateRequestIp >>> 0;
            if (object.migrateRequestPort != null)
                message.migrateRequestPort = object.migrateRequestPort >>> 0;
            if (object.scoringPenaltyRelayCluster != null)
                message.scoringPenaltyRelayCluster = object.scoringPenaltyRelayCluster >>> 0;
            if (object.ackRelay) {
                if (!Array.isArray(object.ackRelay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToClient.ackRelay: array expected");
                message.ackRelay = [];
                for (var i = 0; i < object.ackRelay.length; ++i)
                    message.ackRelay[i] = object.ackRelay[i] >>> 0;
            }
            if (object.legacyAckE2e) {
                if (!Array.isArray(object.legacyAckE2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToClient.legacyAckE2e: array expected");
                message.legacyAckE2e = [];
                for (var i = 0; i < object.legacyAckE2e.length; ++i)
                    message.legacyAckE2e[i] = object.legacyAckE2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.clientConnectionId != null)
                message.clientConnectionId = object.clientConnectionId >>> 0;
            if (object.seqNumR2c != null)
                message.seqNumR2c = object.seqNumR2c >>> 0;
            if (object.seqNumE2e != null)
                message.seqNumE2e = object.seqNumE2e >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsRouterToClient message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {CMsgSteamDatagramConnectionStatsRouterToClient} message CMsgSteamDatagramConnectionStatsRouterToClient
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ackRelay = [];
                object.legacyAckE2e = [];
            }
            if (options.defaults) {
                object.qualityRelay = null;
                object.qualityE2e = null;
                object.secondsUntilShutdown = 0;
                object.clientConnectionId = 0;
                object.seqNumR2c = 0;
                object.seqNumE2e = 0;
                object.migrateRequestIp = 0;
                object.migrateRequestPort = 0;
                object.scoringPenaltyRelayCluster = 0;
                object.flags = 0;
            }
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay"))
                object.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityRelay, options);
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e"))
                object.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityE2e, options);
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                object.secondsUntilShutdown = message.secondsUntilShutdown;
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                object.clientConnectionId = message.clientConnectionId;
            if (message.seqNumR2c != null && message.hasOwnProperty("seqNumR2c"))
                object.seqNumR2c = message.seqNumR2c;
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                object.seqNumE2e = message.seqNumE2e;
            if (message.migrateRequestIp != null && message.hasOwnProperty("migrateRequestIp"))
                object.migrateRequestIp = message.migrateRequestIp;
            if (message.migrateRequestPort != null && message.hasOwnProperty("migrateRequestPort"))
                object.migrateRequestPort = message.migrateRequestPort;
            if (message.scoringPenaltyRelayCluster != null && message.hasOwnProperty("scoringPenaltyRelayCluster"))
                object.scoringPenaltyRelayCluster = message.scoringPenaltyRelayCluster;
            if (message.ackRelay && message.ackRelay.length) {
                object.ackRelay = [];
                for (var j = 0; j < message.ackRelay.length; ++j)
                    object.ackRelay[j] = message.ackRelay[j];
            }
            if (message.legacyAckE2e && message.legacyAckE2e.length) {
                object.legacyAckE2e = [];
                for (var j = 0; j < message.legacyAckE2e.length; ++j)
                    object.legacyAckE2e[j] = message.legacyAckE2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsRouterToClient to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramConnectionStatsRouterToClient
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramConnectionStatsRouterToClient
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramConnectionStatsRouterToClient";
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsRouterToClient.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         */
        CMsgSteamDatagramConnectionStatsRouterToClient.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsRouterToClient;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsRouterToServer = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsRouterToServer.
         * @exports ICMsgSteamDatagramConnectionStatsRouterToServer
         * @interface ICMsgSteamDatagramConnectionStatsRouterToServer
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityRelay] CMsgSteamDatagramConnectionStatsRouterToServer qualityRelay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityE2e] CMsgSteamDatagramConnectionStatsRouterToServer qualityE2e
         * @property {Array.<number>|null} [ackRelay] CMsgSteamDatagramConnectionStatsRouterToServer ackRelay
         * @property {Array.<number>|null} [legacyAckE2e] CMsgSteamDatagramConnectionStatsRouterToServer legacyAckE2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsRouterToServer flags
         * @property {number|null} [seqNumR2s] CMsgSteamDatagramConnectionStatsRouterToServer seqNumR2s
         * @property {number|null} [seqNumE2e] CMsgSteamDatagramConnectionStatsRouterToServer seqNumE2e
         * @property {string|null} [clientIdentityString] CMsgSteamDatagramConnectionStatsRouterToServer clientIdentityString
         * @property {number|Long|null} [legacyClientSteamId] CMsgSteamDatagramConnectionStatsRouterToServer legacyClientSteamId
         * @property {number|null} [relaySessionId] CMsgSteamDatagramConnectionStatsRouterToServer relaySessionId
         * @property {number|null} [clientConnectionId] CMsgSteamDatagramConnectionStatsRouterToServer clientConnectionId
         * @property {number|null} [serverConnectionId] CMsgSteamDatagramConnectionStatsRouterToServer serverConnectionId
         * @property {number|Long|null} [routingSecret] CMsgSteamDatagramConnectionStatsRouterToServer routingSecret
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsRouterToServer.
         * @exports CMsgSteamDatagramConnectionStatsRouterToServer
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsRouterToServer.
         * @implements ICMsgSteamDatagramConnectionStatsRouterToServer
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsRouterToServer=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsRouterToServer(properties) {
            this.ackRelay = [];
            this.legacyAckE2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer qualityRelay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityRelay
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.qualityRelay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer qualityE2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityE2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.qualityE2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer ackRelay.
         * @member {Array.<number>} ackRelay
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.ackRelay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer legacyAckE2e.
         * @member {Array.<number>} legacyAckE2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.legacyAckE2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer seqNumR2s.
         * @member {number} seqNumR2s
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.seqNumR2s = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer seqNumE2e.
         * @member {number} seqNumE2e
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.seqNumE2e = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer clientIdentityString.
         * @member {string} clientIdentityString
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.clientIdentityString = "";
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer legacyClientSteamId.
         * @member {number|Long} legacyClientSteamId
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.legacyClientSteamId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer relaySessionId.
         * @member {number} relaySessionId
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.relaySessionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer clientConnectionId.
         * @member {number} clientConnectionId
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.clientConnectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer serverConnectionId.
         * @member {number} serverConnectionId
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.serverConnectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsRouterToServer routingSecret.
         * @member {number|Long} routingSecret
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.routingSecret = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsRouterToServer instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToServer=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsRouterToServer} CMsgSteamDatagramConnectionStatsRouterToServer instance
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsRouterToServer(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsRouterToServer message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsRouterToServer.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToServer} message CMsgSteamDatagramConnectionStatsRouterToServer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.qualityRelay != null && Object.hasOwnProperty.call(message, "qualityRelay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityRelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.qualityE2e != null && Object.hasOwnProperty.call(message, "qualityE2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityE2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.seqNumR2s != null && Object.hasOwnProperty.call(message, "seqNumR2s"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.seqNumR2s);
            if (message.seqNumE2e != null && Object.hasOwnProperty.call(message, "seqNumE2e"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.seqNumE2e);
            if (message.legacyClientSteamId != null && Object.hasOwnProperty.call(message, "legacyClientSteamId"))
                writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.legacyClientSteamId);
            if (message.relaySessionId != null && Object.hasOwnProperty.call(message, "relaySessionId"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.relaySessionId);
            if (message.clientConnectionId != null && Object.hasOwnProperty.call(message, "clientConnectionId"))
                writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.clientConnectionId);
            if (message.ackRelay != null && message.ackRelay.length)
                for (var i = 0; i < message.ackRelay.length; ++i)
                    writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.ackRelay[i]);
            if (message.legacyAckE2e != null && message.legacyAckE2e.length)
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    writer.uint32(/* id 11, wireType 5 =*/93).fixed32(message.legacyAckE2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.flags);
            if (message.serverConnectionId != null && Object.hasOwnProperty.call(message, "serverConnectionId"))
                writer.uint32(/* id 13, wireType 5 =*/109).fixed32(message.serverConnectionId);
            if (message.routingSecret != null && Object.hasOwnProperty.call(message, "routingSecret"))
                writer.uint32(/* id 14, wireType 1 =*/113).fixed64(message.routingSecret);
            if (message.clientIdentityString != null && Object.hasOwnProperty.call(message, "clientIdentityString"))
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.clientIdentityString);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsRouterToServer message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsRouterToServer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsRouterToServer} message CMsgSteamDatagramConnectionStatsRouterToServer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsRouterToServer message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsRouterToServer} CMsgSteamDatagramConnectionStatsRouterToServer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsRouterToServer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 10: {
                        if (!(message.ackRelay && message.ackRelay.length))
                            message.ackRelay = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ackRelay.push(reader.fixed32());
                        } else
                            message.ackRelay.push(reader.fixed32());
                        break;
                    }
                case 11: {
                        if (!(message.legacyAckE2e && message.legacyAckE2e.length))
                            message.legacyAckE2e = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.legacyAckE2e.push(reader.fixed32());
                        } else
                            message.legacyAckE2e.push(reader.fixed32());
                        break;
                    }
                case 12: {
                        message.flags = reader.uint32();
                        break;
                    }
                case 5: {
                        message.seqNumR2s = reader.uint32();
                        break;
                    }
                case 6: {
                        message.seqNumE2e = reader.uint32();
                        break;
                    }
                case 15: {
                        message.clientIdentityString = reader.string();
                        break;
                    }
                case 7: {
                        message.legacyClientSteamId = reader.fixed64();
                        break;
                    }
                case 8: {
                        message.relaySessionId = reader.uint32();
                        break;
                    }
                case 9: {
                        message.clientConnectionId = reader.fixed32();
                        break;
                    }
                case 13: {
                        message.serverConnectionId = reader.fixed32();
                        break;
                    }
                case 14: {
                        message.routingSecret = reader.fixed64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsRouterToServer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsRouterToServer} CMsgSteamDatagramConnectionStatsRouterToServer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsRouterToServer message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityRelay);
                if (error)
                    return "qualityRelay." + error;
            }
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityE2e);
                if (error)
                    return "qualityE2e." + error;
            }
            if (message.ackRelay != null && message.hasOwnProperty("ackRelay")) {
                if (!Array.isArray(message.ackRelay))
                    return "ackRelay: array expected";
                for (var i = 0; i < message.ackRelay.length; ++i)
                    if (!$util.isInteger(message.ackRelay[i]))
                        return "ackRelay: integer[] expected";
            }
            if (message.legacyAckE2e != null && message.hasOwnProperty("legacyAckE2e")) {
                if (!Array.isArray(message.legacyAckE2e))
                    return "legacyAckE2e: array expected";
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    if (!$util.isInteger(message.legacyAckE2e[i]))
                        return "legacyAckE2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.seqNumR2s != null && message.hasOwnProperty("seqNumR2s"))
                if (!$util.isInteger(message.seqNumR2s))
                    return "seqNumR2s: integer expected";
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                if (!$util.isInteger(message.seqNumE2e))
                    return "seqNumE2e: integer expected";
            if (message.clientIdentityString != null && message.hasOwnProperty("clientIdentityString"))
                if (!$util.isString(message.clientIdentityString))
                    return "clientIdentityString: string expected";
            if (message.legacyClientSteamId != null && message.hasOwnProperty("legacyClientSteamId"))
                if (!$util.isInteger(message.legacyClientSteamId) && !(message.legacyClientSteamId && $util.isInteger(message.legacyClientSteamId.low) && $util.isInteger(message.legacyClientSteamId.high)))
                    return "legacyClientSteamId: integer|Long expected";
            if (message.relaySessionId != null && message.hasOwnProperty("relaySessionId"))
                if (!$util.isInteger(message.relaySessionId))
                    return "relaySessionId: integer expected";
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                if (!$util.isInteger(message.clientConnectionId))
                    return "clientConnectionId: integer expected";
            if (message.serverConnectionId != null && message.hasOwnProperty("serverConnectionId"))
                if (!$util.isInteger(message.serverConnectionId))
                    return "serverConnectionId: integer expected";
            if (message.routingSecret != null && message.hasOwnProperty("routingSecret"))
                if (!$util.isInteger(message.routingSecret) && !(message.routingSecret && $util.isInteger(message.routingSecret.low) && $util.isInteger(message.routingSecret.high)))
                    return "routingSecret: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsRouterToServer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsRouterToServer} CMsgSteamDatagramConnectionStatsRouterToServer
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsRouterToServer)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsRouterToServer();
            if (object.qualityRelay != null) {
                if (typeof object.qualityRelay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToServer.qualityRelay: object expected");
                message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityRelay);
            }
            if (object.qualityE2e != null) {
                if (typeof object.qualityE2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToServer.qualityE2e: object expected");
                message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityE2e);
            }
            if (object.ackRelay) {
                if (!Array.isArray(object.ackRelay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToServer.ackRelay: array expected");
                message.ackRelay = [];
                for (var i = 0; i < object.ackRelay.length; ++i)
                    message.ackRelay[i] = object.ackRelay[i] >>> 0;
            }
            if (object.legacyAckE2e) {
                if (!Array.isArray(object.legacyAckE2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsRouterToServer.legacyAckE2e: array expected");
                message.legacyAckE2e = [];
                for (var i = 0; i < object.legacyAckE2e.length; ++i)
                    message.legacyAckE2e[i] = object.legacyAckE2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.seqNumR2s != null)
                message.seqNumR2s = object.seqNumR2s >>> 0;
            if (object.seqNumE2e != null)
                message.seqNumE2e = object.seqNumE2e >>> 0;
            if (object.clientIdentityString != null)
                message.clientIdentityString = String(object.clientIdentityString);
            if (object.legacyClientSteamId != null)
                if ($util.Long)
                    (message.legacyClientSteamId = $util.Long.fromValue(object.legacyClientSteamId)).unsigned = false;
                else if (typeof object.legacyClientSteamId === "string")
                    message.legacyClientSteamId = parseInt(object.legacyClientSteamId, 10);
                else if (typeof object.legacyClientSteamId === "number")
                    message.legacyClientSteamId = object.legacyClientSteamId;
                else if (typeof object.legacyClientSteamId === "object")
                    message.legacyClientSteamId = new $util.LongBits(object.legacyClientSteamId.low >>> 0, object.legacyClientSteamId.high >>> 0).toNumber();
            if (object.relaySessionId != null)
                message.relaySessionId = object.relaySessionId >>> 0;
            if (object.clientConnectionId != null)
                message.clientConnectionId = object.clientConnectionId >>> 0;
            if (object.serverConnectionId != null)
                message.serverConnectionId = object.serverConnectionId >>> 0;
            if (object.routingSecret != null)
                if ($util.Long)
                    (message.routingSecret = $util.Long.fromValue(object.routingSecret)).unsigned = false;
                else if (typeof object.routingSecret === "string")
                    message.routingSecret = parseInt(object.routingSecret, 10);
                else if (typeof object.routingSecret === "number")
                    message.routingSecret = object.routingSecret;
                else if (typeof object.routingSecret === "object")
                    message.routingSecret = new $util.LongBits(object.routingSecret.low >>> 0, object.routingSecret.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsRouterToServer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {CMsgSteamDatagramConnectionStatsRouterToServer} message CMsgSteamDatagramConnectionStatsRouterToServer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ackRelay = [];
                object.legacyAckE2e = [];
            }
            if (options.defaults) {
                object.qualityRelay = null;
                object.qualityE2e = null;
                object.seqNumR2s = 0;
                object.seqNumE2e = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacyClientSteamId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacyClientSteamId = options.longs === String ? "0" : 0;
                object.relaySessionId = 0;
                object.clientConnectionId = 0;
                object.flags = 0;
                object.serverConnectionId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.routingSecret = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.routingSecret = options.longs === String ? "0" : 0;
                object.clientIdentityString = "";
            }
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay"))
                object.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityRelay, options);
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e"))
                object.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityE2e, options);
            if (message.seqNumR2s != null && message.hasOwnProperty("seqNumR2s"))
                object.seqNumR2s = message.seqNumR2s;
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                object.seqNumE2e = message.seqNumE2e;
            if (message.legacyClientSteamId != null && message.hasOwnProperty("legacyClientSteamId"))
                if (typeof message.legacyClientSteamId === "number")
                    object.legacyClientSteamId = options.longs === String ? String(message.legacyClientSteamId) : message.legacyClientSteamId;
                else
                    object.legacyClientSteamId = options.longs === String ? $util.Long.prototype.toString.call(message.legacyClientSteamId) : options.longs === Number ? new $util.LongBits(message.legacyClientSteamId.low >>> 0, message.legacyClientSteamId.high >>> 0).toNumber() : message.legacyClientSteamId;
            if (message.relaySessionId != null && message.hasOwnProperty("relaySessionId"))
                object.relaySessionId = message.relaySessionId;
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                object.clientConnectionId = message.clientConnectionId;
            if (message.ackRelay && message.ackRelay.length) {
                object.ackRelay = [];
                for (var j = 0; j < message.ackRelay.length; ++j)
                    object.ackRelay[j] = message.ackRelay[j];
            }
            if (message.legacyAckE2e && message.legacyAckE2e.length) {
                object.legacyAckE2e = [];
                for (var j = 0; j < message.legacyAckE2e.length; ++j)
                    object.legacyAckE2e[j] = message.legacyAckE2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.serverConnectionId != null && message.hasOwnProperty("serverConnectionId"))
                object.serverConnectionId = message.serverConnectionId;
            if (message.routingSecret != null && message.hasOwnProperty("routingSecret"))
                if (typeof message.routingSecret === "number")
                    object.routingSecret = options.longs === String ? String(message.routingSecret) : message.routingSecret;
                else
                    object.routingSecret = options.longs === String ? $util.Long.prototype.toString.call(message.routingSecret) : options.longs === Number ? new $util.LongBits(message.routingSecret.low >>> 0, message.routingSecret.high >>> 0).toNumber() : message.routingSecret;
            if (message.clientIdentityString != null && message.hasOwnProperty("clientIdentityString"))
                object.clientIdentityString = message.clientIdentityString;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsRouterToServer to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramConnectionStatsRouterToServer
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramConnectionStatsRouterToServer
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramConnectionStatsRouterToServer";
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsRouterToServer.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         */
        CMsgSteamDatagramConnectionStatsRouterToServer.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsRouterToServer;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsServerToRouter = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsServerToRouter.
         * @exports ICMsgSteamDatagramConnectionStatsServerToRouter
         * @interface ICMsgSteamDatagramConnectionStatsServerToRouter
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityRelay] CMsgSteamDatagramConnectionStatsServerToRouter qualityRelay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityE2e] CMsgSteamDatagramConnectionStatsServerToRouter qualityE2e
         * @property {Array.<number>|null} [ackRelay] CMsgSteamDatagramConnectionStatsServerToRouter ackRelay
         * @property {Array.<number>|null} [legacyAckE2e] CMsgSteamDatagramConnectionStatsServerToRouter legacyAckE2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsServerToRouter flags
         * @property {number|null} [seqNumS2r] CMsgSteamDatagramConnectionStatsServerToRouter seqNumS2r
         * @property {number|null} [seqNumE2e] CMsgSteamDatagramConnectionStatsServerToRouter seqNumE2e
         * @property {number|null} [relaySessionId] CMsgSteamDatagramConnectionStatsServerToRouter relaySessionId
         * @property {number|null} [clientConnectionId] CMsgSteamDatagramConnectionStatsServerToRouter clientConnectionId
         * @property {number|null} [serverConnectionId] CMsgSteamDatagramConnectionStatsServerToRouter serverConnectionId
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsServerToRouter.
         * @exports CMsgSteamDatagramConnectionStatsServerToRouter
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsServerToRouter.
         * @implements ICMsgSteamDatagramConnectionStatsServerToRouter
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsServerToRouter=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsServerToRouter(properties) {
            this.ackRelay = [];
            this.legacyAckE2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter qualityRelay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityRelay
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.qualityRelay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter qualityE2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityE2e
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.qualityE2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter ackRelay.
         * @member {Array.<number>} ackRelay
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.ackRelay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter legacyAckE2e.
         * @member {Array.<number>} legacyAckE2e
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.legacyAckE2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter seqNumS2r.
         * @member {number} seqNumS2r
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.seqNumS2r = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter seqNumE2e.
         * @member {number} seqNumE2e
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.seqNumE2e = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter relaySessionId.
         * @member {number} relaySessionId
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.relaySessionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter clientConnectionId.
         * @member {number} clientConnectionId
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.clientConnectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsServerToRouter serverConnectionId.
         * @member {number} serverConnectionId
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.serverConnectionId = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsServerToRouter instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsServerToRouter=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsServerToRouter} CMsgSteamDatagramConnectionStatsServerToRouter instance
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsServerToRouter(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsServerToRouter message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsServerToRouter.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsServerToRouter} message CMsgSteamDatagramConnectionStatsServerToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.qualityRelay != null && Object.hasOwnProperty.call(message, "qualityRelay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityRelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.qualityE2e != null && Object.hasOwnProperty.call(message, "qualityE2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityE2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.seqNumS2r != null && Object.hasOwnProperty.call(message, "seqNumS2r"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.seqNumS2r);
            if (message.seqNumE2e != null && Object.hasOwnProperty.call(message, "seqNumE2e"))
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.seqNumE2e);
            if (message.relaySessionId != null && Object.hasOwnProperty.call(message, "relaySessionId"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.relaySessionId);
            if (message.clientConnectionId != null && Object.hasOwnProperty.call(message, "clientConnectionId"))
                writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.clientConnectionId);
            if (message.ackRelay != null && message.ackRelay.length)
                for (var i = 0; i < message.ackRelay.length; ++i)
                    writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.ackRelay[i]);
            if (message.legacyAckE2e != null && message.legacyAckE2e.length)
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    writer.uint32(/* id 9, wireType 5 =*/77).fixed32(message.legacyAckE2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.flags);
            if (message.serverConnectionId != null && Object.hasOwnProperty.call(message, "serverConnectionId"))
                writer.uint32(/* id 11, wireType 5 =*/93).fixed32(message.serverConnectionId);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsServerToRouter message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsServerToRouter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsServerToRouter} message CMsgSteamDatagramConnectionStatsServerToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsServerToRouter message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsServerToRouter} CMsgSteamDatagramConnectionStatsServerToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsServerToRouter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 8: {
                        if (!(message.ackRelay && message.ackRelay.length))
                            message.ackRelay = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ackRelay.push(reader.fixed32());
                        } else
                            message.ackRelay.push(reader.fixed32());
                        break;
                    }
                case 9: {
                        if (!(message.legacyAckE2e && message.legacyAckE2e.length))
                            message.legacyAckE2e = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.legacyAckE2e.push(reader.fixed32());
                        } else
                            message.legacyAckE2e.push(reader.fixed32());
                        break;
                    }
                case 10: {
                        message.flags = reader.uint32();
                        break;
                    }
                case 3: {
                        message.seqNumS2r = reader.uint32();
                        break;
                    }
                case 4: {
                        message.seqNumE2e = reader.uint32();
                        break;
                    }
                case 6: {
                        message.relaySessionId = reader.uint32();
                        break;
                    }
                case 7: {
                        message.clientConnectionId = reader.fixed32();
                        break;
                    }
                case 11: {
                        message.serverConnectionId = reader.fixed32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsServerToRouter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsServerToRouter} CMsgSteamDatagramConnectionStatsServerToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsServerToRouter message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityRelay);
                if (error)
                    return "qualityRelay." + error;
            }
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityE2e);
                if (error)
                    return "qualityE2e." + error;
            }
            if (message.ackRelay != null && message.hasOwnProperty("ackRelay")) {
                if (!Array.isArray(message.ackRelay))
                    return "ackRelay: array expected";
                for (var i = 0; i < message.ackRelay.length; ++i)
                    if (!$util.isInteger(message.ackRelay[i]))
                        return "ackRelay: integer[] expected";
            }
            if (message.legacyAckE2e != null && message.hasOwnProperty("legacyAckE2e")) {
                if (!Array.isArray(message.legacyAckE2e))
                    return "legacyAckE2e: array expected";
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    if (!$util.isInteger(message.legacyAckE2e[i]))
                        return "legacyAckE2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.seqNumS2r != null && message.hasOwnProperty("seqNumS2r"))
                if (!$util.isInteger(message.seqNumS2r))
                    return "seqNumS2r: integer expected";
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                if (!$util.isInteger(message.seqNumE2e))
                    return "seqNumE2e: integer expected";
            if (message.relaySessionId != null && message.hasOwnProperty("relaySessionId"))
                if (!$util.isInteger(message.relaySessionId))
                    return "relaySessionId: integer expected";
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                if (!$util.isInteger(message.clientConnectionId))
                    return "clientConnectionId: integer expected";
            if (message.serverConnectionId != null && message.hasOwnProperty("serverConnectionId"))
                if (!$util.isInteger(message.serverConnectionId))
                    return "serverConnectionId: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsServerToRouter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsServerToRouter} CMsgSteamDatagramConnectionStatsServerToRouter
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsServerToRouter)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsServerToRouter();
            if (object.qualityRelay != null) {
                if (typeof object.qualityRelay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsServerToRouter.qualityRelay: object expected");
                message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityRelay);
            }
            if (object.qualityE2e != null) {
                if (typeof object.qualityE2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsServerToRouter.qualityE2e: object expected");
                message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityE2e);
            }
            if (object.ackRelay) {
                if (!Array.isArray(object.ackRelay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsServerToRouter.ackRelay: array expected");
                message.ackRelay = [];
                for (var i = 0; i < object.ackRelay.length; ++i)
                    message.ackRelay[i] = object.ackRelay[i] >>> 0;
            }
            if (object.legacyAckE2e) {
                if (!Array.isArray(object.legacyAckE2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsServerToRouter.legacyAckE2e: array expected");
                message.legacyAckE2e = [];
                for (var i = 0; i < object.legacyAckE2e.length; ++i)
                    message.legacyAckE2e[i] = object.legacyAckE2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.seqNumS2r != null)
                message.seqNumS2r = object.seqNumS2r >>> 0;
            if (object.seqNumE2e != null)
                message.seqNumE2e = object.seqNumE2e >>> 0;
            if (object.relaySessionId != null)
                message.relaySessionId = object.relaySessionId >>> 0;
            if (object.clientConnectionId != null)
                message.clientConnectionId = object.clientConnectionId >>> 0;
            if (object.serverConnectionId != null)
                message.serverConnectionId = object.serverConnectionId >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsServerToRouter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {CMsgSteamDatagramConnectionStatsServerToRouter} message CMsgSteamDatagramConnectionStatsServerToRouter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ackRelay = [];
                object.legacyAckE2e = [];
            }
            if (options.defaults) {
                object.qualityRelay = null;
                object.qualityE2e = null;
                object.seqNumS2r = 0;
                object.seqNumE2e = 0;
                object.relaySessionId = 0;
                object.clientConnectionId = 0;
                object.flags = 0;
                object.serverConnectionId = 0;
            }
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay"))
                object.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityRelay, options);
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e"))
                object.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityE2e, options);
            if (message.seqNumS2r != null && message.hasOwnProperty("seqNumS2r"))
                object.seqNumS2r = message.seqNumS2r;
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                object.seqNumE2e = message.seqNumE2e;
            if (message.relaySessionId != null && message.hasOwnProperty("relaySessionId"))
                object.relaySessionId = message.relaySessionId;
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                object.clientConnectionId = message.clientConnectionId;
            if (message.ackRelay && message.ackRelay.length) {
                object.ackRelay = [];
                for (var j = 0; j < message.ackRelay.length; ++j)
                    object.ackRelay[j] = message.ackRelay[j];
            }
            if (message.legacyAckE2e && message.legacyAckE2e.length) {
                object.legacyAckE2e = [];
                for (var j = 0; j < message.legacyAckE2e.length; ++j)
                    object.legacyAckE2e[j] = message.legacyAckE2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.serverConnectionId != null && message.hasOwnProperty("serverConnectionId"))
                object.serverConnectionId = message.serverConnectionId;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsServerToRouter to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramConnectionStatsServerToRouter
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramConnectionStatsServerToRouter
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramConnectionStatsServerToRouter";
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsServerToRouter.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         */
        CMsgSteamDatagramConnectionStatsServerToRouter.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsServerToRouter;
    })();
    
    $root.CMsgSteamDatagramP2PSessionRequestBody = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PSessionRequestBody.
         * @exports ICMsgSteamDatagramP2PSessionRequestBody
         * @interface ICMsgSteamDatagramP2PSessionRequestBody
         * @property {number|null} [challengeTime] CMsgSteamDatagramP2PSessionRequestBody challengeTime
         * @property {number|Long|null} [challenge] CMsgSteamDatagramP2PSessionRequestBody challenge
         * @property {number|null} [clientConnectionId] CMsgSteamDatagramP2PSessionRequestBody clientConnectionId
         * @property {number|Long|null} [legacyPeerSteamId] CMsgSteamDatagramP2PSessionRequestBody legacyPeerSteamId
         * @property {string|null} [peerIdentityString] CMsgSteamDatagramP2PSessionRequestBody peerIdentityString
         * @property {number|null} [peerConnectionId] CMsgSteamDatagramP2PSessionRequestBody peerConnectionId
         * @property {Uint8Array|null} [encryptedData] CMsgSteamDatagramP2PSessionRequestBody encryptedData
         * @property {number|null} [encryptionYourPublicKeyLeadByte] CMsgSteamDatagramP2PSessionRequestBody encryptionYourPublicKeyLeadByte
         * @property {Uint8Array|null} [encryptionMyEphemeralPublicKey] CMsgSteamDatagramP2PSessionRequestBody encryptionMyEphemeralPublicKey
         * @property {number|null} [protocolVersion] CMsgSteamDatagramP2PSessionRequestBody protocolVersion
         * @property {number|Long|null} [networkConfigVersion] CMsgSteamDatagramP2PSessionRequestBody networkConfigVersion
         * @property {string|null} [platform] CMsgSteamDatagramP2PSessionRequestBody platform
         * @property {string|null} [build] CMsgSteamDatagramP2PSessionRequestBody build
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PSessionRequestBody.
         * @exports CMsgSteamDatagramP2PSessionRequestBody
         * @classdesc Represents a CMsgSteamDatagramP2PSessionRequestBody.
         * @implements ICMsgSteamDatagramP2PSessionRequestBody
         * @constructor
         * @param {ICMsgSteamDatagramP2PSessionRequestBody=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PSessionRequestBody(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody challengeTime.
         * @member {number} challengeTime
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.challengeTime = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody challenge.
         * @member {number|Long} challenge
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.challenge = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody clientConnectionId.
         * @member {number} clientConnectionId
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.clientConnectionId = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody legacyPeerSteamId.
         * @member {number|Long} legacyPeerSteamId
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.legacyPeerSteamId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody peerIdentityString.
         * @member {string} peerIdentityString
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.peerIdentityString = "";
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody peerConnectionId.
         * @member {number} peerConnectionId
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.peerConnectionId = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody encryptedData.
         * @member {Uint8Array} encryptedData
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.encryptedData = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody encryptionYourPublicKeyLeadByte.
         * @member {number} encryptionYourPublicKeyLeadByte
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.encryptionYourPublicKeyLeadByte = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody encryptionMyEphemeralPublicKey.
         * @member {Uint8Array} encryptionMyEphemeralPublicKey
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.encryptionMyEphemeralPublicKey = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody protocolVersion.
         * @member {number} protocolVersion
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.protocolVersion = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody networkConfigVersion.
         * @member {number|Long} networkConfigVersion
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.networkConfigVersion = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody platform.
         * @member {string} platform
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.platform = "";
    
        /**
         * CMsgSteamDatagramP2PSessionRequestBody build.
         * @member {string} build
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.build = "";
    
        /**
         * Creates a new CMsgSteamDatagramP2PSessionRequestBody instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequestBody=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PSessionRequestBody} CMsgSteamDatagramP2PSessionRequestBody instance
         */
        CMsgSteamDatagramP2PSessionRequestBody.create = function create(properties) {
            return new CMsgSteamDatagramP2PSessionRequestBody(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionRequestBody message. Does not implicitly {@link CMsgSteamDatagramP2PSessionRequestBody.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequestBody} message CMsgSteamDatagramP2PSessionRequestBody message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionRequestBody.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.challengeTime != null && Object.hasOwnProperty.call(message, "challengeTime"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.challengeTime);
            if (message.challenge != null && Object.hasOwnProperty.call(message, "challenge"))
                writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.challenge);
            if (message.clientConnectionId != null && Object.hasOwnProperty.call(message, "clientConnectionId"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.clientConnectionId);
            if (message.legacyPeerSteamId != null && Object.hasOwnProperty.call(message, "legacyPeerSteamId"))
                writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.legacyPeerSteamId);
            if (message.peerConnectionId != null && Object.hasOwnProperty.call(message, "peerConnectionId"))
                writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.peerConnectionId);
            if (message.protocolVersion != null && Object.hasOwnProperty.call(message, "protocolVersion"))
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.protocolVersion);
            if (message.networkConfigVersion != null && Object.hasOwnProperty.call(message, "networkConfigVersion"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.networkConfigVersion);
            if (message.peerIdentityString != null && Object.hasOwnProperty.call(message, "peerIdentityString"))
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.peerIdentityString);
            if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.platform);
            if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.build);
            if (message.encryptedData != null && Object.hasOwnProperty.call(message, "encryptedData"))
                writer.uint32(/* id 14, wireType 2 =*/114).bytes(message.encryptedData);
            if (message.encryptionYourPublicKeyLeadByte != null && Object.hasOwnProperty.call(message, "encryptionYourPublicKeyLeadByte"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.encryptionYourPublicKeyLeadByte);
            if (message.encryptionMyEphemeralPublicKey != null && Object.hasOwnProperty.call(message, "encryptionMyEphemeralPublicKey"))
                writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.encryptionMyEphemeralPublicKey);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionRequestBody message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PSessionRequestBody.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequestBody} message CMsgSteamDatagramP2PSessionRequestBody message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionRequestBody.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionRequestBody message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PSessionRequestBody} CMsgSteamDatagramP2PSessionRequestBody
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionRequestBody.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PSessionRequestBody();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.challengeTime = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.challenge = reader.fixed64();
                        break;
                    }
                case 3: {
                        message.clientConnectionId = reader.fixed32();
                        break;
                    }
                case 4: {
                        message.legacyPeerSteamId = reader.fixed64();
                        break;
                    }
                case 11: {
                        message.peerIdentityString = reader.string();
                        break;
                    }
                case 5: {
                        message.peerConnectionId = reader.fixed32();
                        break;
                    }
                case 14: {
                        message.encryptedData = reader.bytes();
                        break;
                    }
                case 15: {
                        message.encryptionYourPublicKeyLeadByte = reader.uint32();
                        break;
                    }
                case 16: {
                        message.encryptionMyEphemeralPublicKey = reader.bytes();
                        break;
                    }
                case 8: {
                        message.protocolVersion = reader.uint32();
                        break;
                    }
                case 9: {
                        message.networkConfigVersion = reader.uint64();
                        break;
                    }
                case 12: {
                        message.platform = reader.string();
                        break;
                    }
                case 13: {
                        message.build = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionRequestBody message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PSessionRequestBody} CMsgSteamDatagramP2PSessionRequestBody
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionRequestBody.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PSessionRequestBody message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PSessionRequestBody.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.challengeTime != null && message.hasOwnProperty("challengeTime"))
                if (!$util.isInteger(message.challengeTime))
                    return "challengeTime: integer expected";
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (!$util.isInteger(message.challenge) && !(message.challenge && $util.isInteger(message.challenge.low) && $util.isInteger(message.challenge.high)))
                    return "challenge: integer|Long expected";
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                if (!$util.isInteger(message.clientConnectionId))
                    return "clientConnectionId: integer expected";
            if (message.legacyPeerSteamId != null && message.hasOwnProperty("legacyPeerSteamId"))
                if (!$util.isInteger(message.legacyPeerSteamId) && !(message.legacyPeerSteamId && $util.isInteger(message.legacyPeerSteamId.low) && $util.isInteger(message.legacyPeerSteamId.high)))
                    return "legacyPeerSteamId: integer|Long expected";
            if (message.peerIdentityString != null && message.hasOwnProperty("peerIdentityString"))
                if (!$util.isString(message.peerIdentityString))
                    return "peerIdentityString: string expected";
            if (message.peerConnectionId != null && message.hasOwnProperty("peerConnectionId"))
                if (!$util.isInteger(message.peerConnectionId))
                    return "peerConnectionId: integer expected";
            if (message.encryptedData != null && message.hasOwnProperty("encryptedData"))
                if (!(message.encryptedData && typeof message.encryptedData.length === "number" || $util.isString(message.encryptedData)))
                    return "encryptedData: buffer expected";
            if (message.encryptionYourPublicKeyLeadByte != null && message.hasOwnProperty("encryptionYourPublicKeyLeadByte"))
                if (!$util.isInteger(message.encryptionYourPublicKeyLeadByte))
                    return "encryptionYourPublicKeyLeadByte: integer expected";
            if (message.encryptionMyEphemeralPublicKey != null && message.hasOwnProperty("encryptionMyEphemeralPublicKey"))
                if (!(message.encryptionMyEphemeralPublicKey && typeof message.encryptionMyEphemeralPublicKey.length === "number" || $util.isString(message.encryptionMyEphemeralPublicKey)))
                    return "encryptionMyEphemeralPublicKey: buffer expected";
            if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
                if (!$util.isInteger(message.protocolVersion))
                    return "protocolVersion: integer expected";
            if (message.networkConfigVersion != null && message.hasOwnProperty("networkConfigVersion"))
                if (!$util.isInteger(message.networkConfigVersion) && !(message.networkConfigVersion && $util.isInteger(message.networkConfigVersion.low) && $util.isInteger(message.networkConfigVersion.high)))
                    return "networkConfigVersion: integer|Long expected";
            if (message.platform != null && message.hasOwnProperty("platform"))
                if (!$util.isString(message.platform))
                    return "platform: string expected";
            if (message.build != null && message.hasOwnProperty("build"))
                if (!$util.isString(message.build))
                    return "build: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PSessionRequestBody message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PSessionRequestBody} CMsgSteamDatagramP2PSessionRequestBody
         */
        CMsgSteamDatagramP2PSessionRequestBody.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PSessionRequestBody)
                return object;
            var message = new $root.CMsgSteamDatagramP2PSessionRequestBody();
            if (object.challengeTime != null)
                message.challengeTime = object.challengeTime >>> 0;
            if (object.challenge != null)
                if ($util.Long)
                    (message.challenge = $util.Long.fromValue(object.challenge)).unsigned = false;
                else if (typeof object.challenge === "string")
                    message.challenge = parseInt(object.challenge, 10);
                else if (typeof object.challenge === "number")
                    message.challenge = object.challenge;
                else if (typeof object.challenge === "object")
                    message.challenge = new $util.LongBits(object.challenge.low >>> 0, object.challenge.high >>> 0).toNumber();
            if (object.clientConnectionId != null)
                message.clientConnectionId = object.clientConnectionId >>> 0;
            if (object.legacyPeerSteamId != null)
                if ($util.Long)
                    (message.legacyPeerSteamId = $util.Long.fromValue(object.legacyPeerSteamId)).unsigned = false;
                else if (typeof object.legacyPeerSteamId === "string")
                    message.legacyPeerSteamId = parseInt(object.legacyPeerSteamId, 10);
                else if (typeof object.legacyPeerSteamId === "number")
                    message.legacyPeerSteamId = object.legacyPeerSteamId;
                else if (typeof object.legacyPeerSteamId === "object")
                    message.legacyPeerSteamId = new $util.LongBits(object.legacyPeerSteamId.low >>> 0, object.legacyPeerSteamId.high >>> 0).toNumber();
            if (object.peerIdentityString != null)
                message.peerIdentityString = String(object.peerIdentityString);
            if (object.peerConnectionId != null)
                message.peerConnectionId = object.peerConnectionId >>> 0;
            if (object.encryptedData != null)
                if (typeof object.encryptedData === "string")
                    $util.base64.decode(object.encryptedData, message.encryptedData = $util.newBuffer($util.base64.length(object.encryptedData)), 0);
                else if (object.encryptedData.length >= 0)
                    message.encryptedData = object.encryptedData;
            if (object.encryptionYourPublicKeyLeadByte != null)
                message.encryptionYourPublicKeyLeadByte = object.encryptionYourPublicKeyLeadByte >>> 0;
            if (object.encryptionMyEphemeralPublicKey != null)
                if (typeof object.encryptionMyEphemeralPublicKey === "string")
                    $util.base64.decode(object.encryptionMyEphemeralPublicKey, message.encryptionMyEphemeralPublicKey = $util.newBuffer($util.base64.length(object.encryptionMyEphemeralPublicKey)), 0);
                else if (object.encryptionMyEphemeralPublicKey.length >= 0)
                    message.encryptionMyEphemeralPublicKey = object.encryptionMyEphemeralPublicKey;
            if (object.protocolVersion != null)
                message.protocolVersion = object.protocolVersion >>> 0;
            if (object.networkConfigVersion != null)
                if ($util.Long)
                    (message.networkConfigVersion = $util.Long.fromValue(object.networkConfigVersion)).unsigned = true;
                else if (typeof object.networkConfigVersion === "string")
                    message.networkConfigVersion = parseInt(object.networkConfigVersion, 10);
                else if (typeof object.networkConfigVersion === "number")
                    message.networkConfigVersion = object.networkConfigVersion;
                else if (typeof object.networkConfigVersion === "object")
                    message.networkConfigVersion = new $util.LongBits(object.networkConfigVersion.low >>> 0, object.networkConfigVersion.high >>> 0).toNumber(true);
            if (object.platform != null)
                message.platform = String(object.platform);
            if (object.build != null)
                message.build = String(object.build);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PSessionRequestBody message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {CMsgSteamDatagramP2PSessionRequestBody} message CMsgSteamDatagramP2PSessionRequestBody
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PSessionRequestBody.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.challengeTime = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.challenge = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.challenge = options.longs === String ? "0" : 0;
                object.clientConnectionId = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.legacyPeerSteamId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.legacyPeerSteamId = options.longs === String ? "0" : 0;
                object.peerConnectionId = 0;
                object.protocolVersion = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.networkConfigVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.networkConfigVersion = options.longs === String ? "0" : 0;
                object.peerIdentityString = "";
                object.platform = "";
                object.build = "";
                if (options.bytes === String)
                    object.encryptedData = "";
                else {
                    object.encryptedData = [];
                    if (options.bytes !== Array)
                        object.encryptedData = $util.newBuffer(object.encryptedData);
                }
                object.encryptionYourPublicKeyLeadByte = 0;
                if (options.bytes === String)
                    object.encryptionMyEphemeralPublicKey = "";
                else {
                    object.encryptionMyEphemeralPublicKey = [];
                    if (options.bytes !== Array)
                        object.encryptionMyEphemeralPublicKey = $util.newBuffer(object.encryptionMyEphemeralPublicKey);
                }
            }
            if (message.challengeTime != null && message.hasOwnProperty("challengeTime"))
                object.challengeTime = message.challengeTime;
            if (message.challenge != null && message.hasOwnProperty("challenge"))
                if (typeof message.challenge === "number")
                    object.challenge = options.longs === String ? String(message.challenge) : message.challenge;
                else
                    object.challenge = options.longs === String ? $util.Long.prototype.toString.call(message.challenge) : options.longs === Number ? new $util.LongBits(message.challenge.low >>> 0, message.challenge.high >>> 0).toNumber() : message.challenge;
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                object.clientConnectionId = message.clientConnectionId;
            if (message.legacyPeerSteamId != null && message.hasOwnProperty("legacyPeerSteamId"))
                if (typeof message.legacyPeerSteamId === "number")
                    object.legacyPeerSteamId = options.longs === String ? String(message.legacyPeerSteamId) : message.legacyPeerSteamId;
                else
                    object.legacyPeerSteamId = options.longs === String ? $util.Long.prototype.toString.call(message.legacyPeerSteamId) : options.longs === Number ? new $util.LongBits(message.legacyPeerSteamId.low >>> 0, message.legacyPeerSteamId.high >>> 0).toNumber() : message.legacyPeerSteamId;
            if (message.peerConnectionId != null && message.hasOwnProperty("peerConnectionId"))
                object.peerConnectionId = message.peerConnectionId;
            if (message.protocolVersion != null && message.hasOwnProperty("protocolVersion"))
                object.protocolVersion = message.protocolVersion;
            if (message.networkConfigVersion != null && message.hasOwnProperty("networkConfigVersion"))
                if (typeof message.networkConfigVersion === "number")
                    object.networkConfigVersion = options.longs === String ? String(message.networkConfigVersion) : message.networkConfigVersion;
                else
                    object.networkConfigVersion = options.longs === String ? $util.Long.prototype.toString.call(message.networkConfigVersion) : options.longs === Number ? new $util.LongBits(message.networkConfigVersion.low >>> 0, message.networkConfigVersion.high >>> 0).toNumber(true) : message.networkConfigVersion;
            if (message.peerIdentityString != null && message.hasOwnProperty("peerIdentityString"))
                object.peerIdentityString = message.peerIdentityString;
            if (message.platform != null && message.hasOwnProperty("platform"))
                object.platform = message.platform;
            if (message.build != null && message.hasOwnProperty("build"))
                object.build = message.build;
            if (message.encryptedData != null && message.hasOwnProperty("encryptedData"))
                object.encryptedData = options.bytes === String ? $util.base64.encode(message.encryptedData, 0, message.encryptedData.length) : options.bytes === Array ? Array.prototype.slice.call(message.encryptedData) : message.encryptedData;
            if (message.encryptionYourPublicKeyLeadByte != null && message.hasOwnProperty("encryptionYourPublicKeyLeadByte"))
                object.encryptionYourPublicKeyLeadByte = message.encryptionYourPublicKeyLeadByte;
            if (message.encryptionMyEphemeralPublicKey != null && message.hasOwnProperty("encryptionMyEphemeralPublicKey"))
                object.encryptionMyEphemeralPublicKey = options.bytes === String ? $util.base64.encode(message.encryptionMyEphemeralPublicKey, 0, message.encryptionMyEphemeralPublicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.encryptionMyEphemeralPublicKey) : message.encryptionMyEphemeralPublicKey;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PSessionRequestBody to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PSessionRequestBody.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramP2PSessionRequestBody
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramP2PSessionRequestBody
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramP2PSessionRequestBody.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramP2PSessionRequestBody";
        };
    
        CMsgSteamDatagramP2PSessionRequestBody.EncryptedData = (function() {
    
            /**
             * Properties of an EncryptedData.
             * @memberof CMsgSteamDatagramP2PSessionRequestBody
             * @interface IEncryptedData
             * @property {string|null} [peerIdentityString] EncryptedData peerIdentityString
             */
    
            /**
             * Constructs a new EncryptedData.
             * @memberof CMsgSteamDatagramP2PSessionRequestBody
             * @classdesc Represents an EncryptedData.
             * @implements IEncryptedData
             * @constructor
             * @param {CMsgSteamDatagramP2PSessionRequestBody.IEncryptedData=} [properties] Properties to set
             */
            function EncryptedData(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * EncryptedData peerIdentityString.
             * @member {string} peerIdentityString
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @instance
             */
            EncryptedData.prototype.peerIdentityString = "";
    
            /**
             * Creates a new EncryptedData instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @static
             * @param {CMsgSteamDatagramP2PSessionRequestBody.IEncryptedData=} [properties] Properties to set
             * @returns {CMsgSteamDatagramP2PSessionRequestBody.EncryptedData} EncryptedData instance
             */
            EncryptedData.create = function create(properties) {
                return new EncryptedData(properties);
            };
    
            /**
             * Encodes the specified EncryptedData message. Does not implicitly {@link CMsgSteamDatagramP2PSessionRequestBody.EncryptedData.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @static
             * @param {CMsgSteamDatagramP2PSessionRequestBody.IEncryptedData} message EncryptedData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EncryptedData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.peerIdentityString != null && Object.hasOwnProperty.call(message, "peerIdentityString"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.peerIdentityString);
                return writer;
            };
    
            /**
             * Encodes the specified EncryptedData message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PSessionRequestBody.EncryptedData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @static
             * @param {CMsgSteamDatagramP2PSessionRequestBody.IEncryptedData} message EncryptedData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EncryptedData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an EncryptedData message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramP2PSessionRequestBody.EncryptedData} EncryptedData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EncryptedData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PSessionRequestBody.EncryptedData();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.peerIdentityString = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an EncryptedData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramP2PSessionRequestBody.EncryptedData} EncryptedData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EncryptedData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an EncryptedData message.
             * @function verify
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EncryptedData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.peerIdentityString != null && message.hasOwnProperty("peerIdentityString"))
                    if (!$util.isString(message.peerIdentityString))
                        return "peerIdentityString: string expected";
                return null;
            };
    
            /**
             * Creates an EncryptedData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramP2PSessionRequestBody.EncryptedData} EncryptedData
             */
            EncryptedData.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
                    return object;
                var message = new $root.CMsgSteamDatagramP2PSessionRequestBody.EncryptedData();
                if (object.peerIdentityString != null)
                    message.peerIdentityString = String(object.peerIdentityString);
                return message;
            };
    
            /**
             * Creates a plain object from an EncryptedData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @static
             * @param {CMsgSteamDatagramP2PSessionRequestBody.EncryptedData} message EncryptedData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EncryptedData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.peerIdentityString = "";
                if (message.peerIdentityString != null && message.hasOwnProperty("peerIdentityString"))
                    object.peerIdentityString = message.peerIdentityString;
                return object;
            };
    
            /**
             * Converts this EncryptedData to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EncryptedData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for EncryptedData
             * @function getTypeUrl
             * @memberof CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EncryptedData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamDatagramP2PSessionRequestBody.EncryptedData";
            };
    
            return EncryptedData;
        })();
    
        return CMsgSteamDatagramP2PSessionRequestBody;
    })();
    
    $root.CMsgSteamDatagramP2PSessionRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PSessionRequest.
         * @exports ICMsgSteamDatagramP2PSessionRequest
         * @interface ICMsgSteamDatagramP2PSessionRequest
         * @property {ICMsgSteamDatagramCertificateSigned|null} [cert] CMsgSteamDatagramP2PSessionRequest cert
         * @property {Uint8Array|null} [body] CMsgSteamDatagramP2PSessionRequest body
         * @property {Uint8Array|null} [signature] CMsgSteamDatagramP2PSessionRequest signature
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PSessionRequest.
         * @exports CMsgSteamDatagramP2PSessionRequest
         * @classdesc Represents a CMsgSteamDatagramP2PSessionRequest.
         * @implements ICMsgSteamDatagramP2PSessionRequest
         * @constructor
         * @param {ICMsgSteamDatagramP2PSessionRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PSessionRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PSessionRequest cert.
         * @member {ICMsgSteamDatagramCertificateSigned|null|undefined} cert
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequest.prototype.cert = null;
    
        /**
         * CMsgSteamDatagramP2PSessionRequest body.
         * @member {Uint8Array} body
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequest.prototype.body = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramP2PSessionRequest signature.
         * @member {Uint8Array} signature
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @instance
         */
        CMsgSteamDatagramP2PSessionRequest.prototype.signature = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramP2PSessionRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PSessionRequest} CMsgSteamDatagramP2PSessionRequest instance
         */
        CMsgSteamDatagramP2PSessionRequest.create = function create(properties) {
            return new CMsgSteamDatagramP2PSessionRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionRequest message. Does not implicitly {@link CMsgSteamDatagramP2PSessionRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequest} message CMsgSteamDatagramP2PSessionRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cert != null && Object.hasOwnProperty.call(message, "cert"))
                $root.CMsgSteamDatagramCertificateSigned.encode(message.cert, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.body);
            if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.signature);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PSessionRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {ICMsgSteamDatagramP2PSessionRequest} message CMsgSteamDatagramP2PSessionRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PSessionRequest} CMsgSteamDatagramP2PSessionRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PSessionRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.cert = $root.CMsgSteamDatagramCertificateSigned.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.body = reader.bytes();
                        break;
                    }
                case 3: {
                        message.signature = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PSessionRequest} CMsgSteamDatagramP2PSessionRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PSessionRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PSessionRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cert != null && message.hasOwnProperty("cert")) {
                var error = $root.CMsgSteamDatagramCertificateSigned.verify(message.cert);
                if (error)
                    return "cert." + error;
            }
            if (message.body != null && message.hasOwnProperty("body"))
                if (!(message.body && typeof message.body.length === "number" || $util.isString(message.body)))
                    return "body: buffer expected";
            if (message.signature != null && message.hasOwnProperty("signature"))
                if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                    return "signature: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PSessionRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PSessionRequest} CMsgSteamDatagramP2PSessionRequest
         */
        CMsgSteamDatagramP2PSessionRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PSessionRequest)
                return object;
            var message = new $root.CMsgSteamDatagramP2PSessionRequest();
            if (object.cert != null) {
                if (typeof object.cert !== "object")
                    throw TypeError(".CMsgSteamDatagramP2PSessionRequest.cert: object expected");
                message.cert = $root.CMsgSteamDatagramCertificateSigned.fromObject(object.cert);
            }
            if (object.body != null)
                if (typeof object.body === "string")
                    $util.base64.decode(object.body, message.body = $util.newBuffer($util.base64.length(object.body)), 0);
                else if (object.body.length >= 0)
                    message.body = object.body;
            if (object.signature != null)
                if (typeof object.signature === "string")
                    $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                else if (object.signature.length >= 0)
                    message.signature = object.signature;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PSessionRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {CMsgSteamDatagramP2PSessionRequest} message CMsgSteamDatagramP2PSessionRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PSessionRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.cert = null;
                if (options.bytes === String)
                    object.body = "";
                else {
                    object.body = [];
                    if (options.bytes !== Array)
                        object.body = $util.newBuffer(object.body);
                }
                if (options.bytes === String)
                    object.signature = "";
                else {
                    object.signature = [];
                    if (options.bytes !== Array)
                        object.signature = $util.newBuffer(object.signature);
                }
            }
            if (message.cert != null && message.hasOwnProperty("cert"))
                object.cert = $root.CMsgSteamDatagramCertificateSigned.toObject(message.cert, options);
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = options.bytes === String ? $util.base64.encode(message.body, 0, message.body.length) : options.bytes === Array ? Array.prototype.slice.call(message.body) : message.body;
            if (message.signature != null && message.hasOwnProperty("signature"))
                object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PSessionRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PSessionRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramP2PSessionRequest
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramP2PSessionRequest
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramP2PSessionRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramP2PSessionRequest";
        };
    
        return CMsgSteamDatagramP2PSessionRequest;
    })();
    
    $root.CMsgSteamDatagramP2PSessionEstablished = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PSessionEstablished.
         * @exports ICMsgSteamDatagramP2PSessionEstablished
         * @interface ICMsgSteamDatagramP2PSessionEstablished
         * @property {number|null} [connectionId] CMsgSteamDatagramP2PSessionEstablished connectionId
         * @property {number|null} [secondsUntilShutdown] CMsgSteamDatagramP2PSessionEstablished secondsUntilShutdown
         * @property {Uint8Array|null} [relayRoutingToken] CMsgSteamDatagramP2PSessionEstablished relayRoutingToken
         * @property {number|null} [seqNumR2c] CMsgSteamDatagramP2PSessionEstablished seqNumR2c
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PSessionEstablished.
         * @exports CMsgSteamDatagramP2PSessionEstablished
         * @classdesc Represents a CMsgSteamDatagramP2PSessionEstablished.
         * @implements ICMsgSteamDatagramP2PSessionEstablished
         * @constructor
         * @param {ICMsgSteamDatagramP2PSessionEstablished=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PSessionEstablished(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PSessionEstablished connectionId.
         * @member {number} connectionId
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @instance
         */
        CMsgSteamDatagramP2PSessionEstablished.prototype.connectionId = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionEstablished secondsUntilShutdown.
         * @member {number} secondsUntilShutdown
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @instance
         */
        CMsgSteamDatagramP2PSessionEstablished.prototype.secondsUntilShutdown = 0;
    
        /**
         * CMsgSteamDatagramP2PSessionEstablished relayRoutingToken.
         * @member {Uint8Array} relayRoutingToken
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @instance
         */
        CMsgSteamDatagramP2PSessionEstablished.prototype.relayRoutingToken = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramP2PSessionEstablished seqNumR2c.
         * @member {number} seqNumR2c
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @instance
         */
        CMsgSteamDatagramP2PSessionEstablished.prototype.seqNumR2c = 0;
    
        /**
         * Creates a new CMsgSteamDatagramP2PSessionEstablished instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramP2PSessionEstablished=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PSessionEstablished} CMsgSteamDatagramP2PSessionEstablished instance
         */
        CMsgSteamDatagramP2PSessionEstablished.create = function create(properties) {
            return new CMsgSteamDatagramP2PSessionEstablished(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionEstablished message. Does not implicitly {@link CMsgSteamDatagramP2PSessionEstablished.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramP2PSessionEstablished} message CMsgSteamDatagramP2PSessionEstablished message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionEstablished.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectionId != null && Object.hasOwnProperty.call(message, "connectionId"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connectionId);
            if (message.secondsUntilShutdown != null && Object.hasOwnProperty.call(message, "secondsUntilShutdown"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.secondsUntilShutdown);
            if (message.relayRoutingToken != null && Object.hasOwnProperty.call(message, "relayRoutingToken"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.relayRoutingToken);
            if (message.seqNumR2c != null && Object.hasOwnProperty.call(message, "seqNumR2c"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.seqNumR2c);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PSessionEstablished message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PSessionEstablished.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {ICMsgSteamDatagramP2PSessionEstablished} message CMsgSteamDatagramP2PSessionEstablished message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PSessionEstablished.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionEstablished message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PSessionEstablished} CMsgSteamDatagramP2PSessionEstablished
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionEstablished.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PSessionEstablished();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.connectionId = reader.fixed32();
                        break;
                    }
                case 3: {
                        message.secondsUntilShutdown = reader.uint32();
                        break;
                    }
                case 4: {
                        message.relayRoutingToken = reader.bytes();
                        break;
                    }
                case 5: {
                        message.seqNumR2c = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PSessionEstablished message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PSessionEstablished} CMsgSteamDatagramP2PSessionEstablished
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PSessionEstablished.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PSessionEstablished message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PSessionEstablished.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                if (!$util.isInteger(message.connectionId))
                    return "connectionId: integer expected";
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                if (!$util.isInteger(message.secondsUntilShutdown))
                    return "secondsUntilShutdown: integer expected";
            if (message.relayRoutingToken != null && message.hasOwnProperty("relayRoutingToken"))
                if (!(message.relayRoutingToken && typeof message.relayRoutingToken.length === "number" || $util.isString(message.relayRoutingToken)))
                    return "relayRoutingToken: buffer expected";
            if (message.seqNumR2c != null && message.hasOwnProperty("seqNumR2c"))
                if (!$util.isInteger(message.seqNumR2c))
                    return "seqNumR2c: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PSessionEstablished message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PSessionEstablished} CMsgSteamDatagramP2PSessionEstablished
         */
        CMsgSteamDatagramP2PSessionEstablished.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PSessionEstablished)
                return object;
            var message = new $root.CMsgSteamDatagramP2PSessionEstablished();
            if (object.connectionId != null)
                message.connectionId = object.connectionId >>> 0;
            if (object.secondsUntilShutdown != null)
                message.secondsUntilShutdown = object.secondsUntilShutdown >>> 0;
            if (object.relayRoutingToken != null)
                if (typeof object.relayRoutingToken === "string")
                    $util.base64.decode(object.relayRoutingToken, message.relayRoutingToken = $util.newBuffer($util.base64.length(object.relayRoutingToken)), 0);
                else if (object.relayRoutingToken.length >= 0)
                    message.relayRoutingToken = object.relayRoutingToken;
            if (object.seqNumR2c != null)
                message.seqNumR2c = object.seqNumR2c >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PSessionEstablished message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {CMsgSteamDatagramP2PSessionEstablished} message CMsgSteamDatagramP2PSessionEstablished
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PSessionEstablished.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connectionId = 0;
                object.secondsUntilShutdown = 0;
                if (options.bytes === String)
                    object.relayRoutingToken = "";
                else {
                    object.relayRoutingToken = [];
                    if (options.bytes !== Array)
                        object.relayRoutingToken = $util.newBuffer(object.relayRoutingToken);
                }
                object.seqNumR2c = 0;
            }
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                object.connectionId = message.connectionId;
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                object.secondsUntilShutdown = message.secondsUntilShutdown;
            if (message.relayRoutingToken != null && message.hasOwnProperty("relayRoutingToken"))
                object.relayRoutingToken = options.bytes === String ? $util.base64.encode(message.relayRoutingToken, 0, message.relayRoutingToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.relayRoutingToken) : message.relayRoutingToken;
            if (message.seqNumR2c != null && message.hasOwnProperty("seqNumR2c"))
                object.seqNumR2c = message.seqNumR2c;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PSessionEstablished to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PSessionEstablished.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramP2PSessionEstablished
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramP2PSessionEstablished
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramP2PSessionEstablished.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramP2PSessionEstablished";
        };
    
        return CMsgSteamDatagramP2PSessionEstablished;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsP2PClientToRouter = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsP2PClientToRouter.
         * @exports ICMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @interface ICMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityRelay] CMsgSteamDatagramConnectionStatsP2PClientToRouter qualityRelay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityE2e] CMsgSteamDatagramConnectionStatsP2PClientToRouter qualityE2e
         * @property {ICMsgSteamDatagramP2PRoutingSummary|null} [p2pRoutingSummary] CMsgSteamDatagramConnectionStatsP2PClientToRouter p2pRoutingSummary
         * @property {Array.<number>|null} [ackRelay] CMsgSteamDatagramConnectionStatsP2PClientToRouter ackRelay
         * @property {Array.<number>|null} [legacyAckE2e] CMsgSteamDatagramConnectionStatsP2PClientToRouter legacyAckE2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsP2PClientToRouter flags
         * @property {Uint8Array|null} [forwardTargetRelayRoutingToken] CMsgSteamDatagramConnectionStatsP2PClientToRouter forwardTargetRelayRoutingToken
         * @property {number|null} [forwardTargetRevision] CMsgSteamDatagramConnectionStatsP2PClientToRouter forwardTargetRevision
         * @property {Uint8Array|null} [routes] CMsgSteamDatagramConnectionStatsP2PClientToRouter routes
         * @property {number|null} [ackPeerRoutesRevision] CMsgSteamDatagramConnectionStatsP2PClientToRouter ackPeerRoutesRevision
         * @property {number|null} [connectionId] CMsgSteamDatagramConnectionStatsP2PClientToRouter connectionId
         * @property {number|null} [seqNumC2r] CMsgSteamDatagramConnectionStatsP2PClientToRouter seqNumC2r
         * @property {number|null} [seqNumE2e] CMsgSteamDatagramConnectionStatsP2PClientToRouter seqNumE2e
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsP2PClientToRouter.
         * @exports CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsP2PClientToRouter.
         * @implements ICMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsP2PClientToRouter=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsP2PClientToRouter(properties) {
            this.ackRelay = [];
            this.legacyAckE2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter qualityRelay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityRelay
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.qualityRelay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter qualityE2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityE2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.qualityE2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter p2pRoutingSummary.
         * @member {ICMsgSteamDatagramP2PRoutingSummary|null|undefined} p2pRoutingSummary
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.p2pRoutingSummary = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter ackRelay.
         * @member {Array.<number>} ackRelay
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.ackRelay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter legacyAckE2e.
         * @member {Array.<number>} legacyAckE2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.legacyAckE2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter forwardTargetRelayRoutingToken.
         * @member {Uint8Array} forwardTargetRelayRoutingToken
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.forwardTargetRelayRoutingToken = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter forwardTargetRevision.
         * @member {number} forwardTargetRevision
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.forwardTargetRevision = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter routes.
         * @member {Uint8Array} routes
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.routes = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter ackPeerRoutesRevision.
         * @member {number} ackPeerRoutesRevision
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.ackPeerRoutesRevision = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter connectionId.
         * @member {number} connectionId
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.connectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter seqNumC2r.
         * @member {number} seqNumC2r
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.seqNumC2r = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PClientToRouter seqNumE2e.
         * @member {number} seqNumE2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.seqNumE2e = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsP2PClientToRouter instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PClientToRouter=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsP2PClientToRouter} CMsgSteamDatagramConnectionStatsP2PClientToRouter instance
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsP2PClientToRouter(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsP2PClientToRouter message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsP2PClientToRouter.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PClientToRouter} message CMsgSteamDatagramConnectionStatsP2PClientToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.qualityRelay != null && Object.hasOwnProperty.call(message, "qualityRelay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityRelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.qualityE2e != null && Object.hasOwnProperty.call(message, "qualityE2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityE2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ackRelay != null && message.ackRelay.length)
                for (var i = 0; i < message.ackRelay.length; ++i)
                    writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.ackRelay[i]);
            if (message.legacyAckE2e != null && message.legacyAckE2e.length)
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.legacyAckE2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.flags);
            if (message.forwardTargetRelayRoutingToken != null && Object.hasOwnProperty.call(message, "forwardTargetRelayRoutingToken"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.forwardTargetRelayRoutingToken);
            if (message.forwardTargetRevision != null && Object.hasOwnProperty.call(message, "forwardTargetRevision"))
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.forwardTargetRevision);
            if (message.routes != null && Object.hasOwnProperty.call(message, "routes"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.routes);
            if (message.ackPeerRoutesRevision != null && Object.hasOwnProperty.call(message, "ackPeerRoutesRevision"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.ackPeerRoutesRevision);
            if (message.connectionId != null && Object.hasOwnProperty.call(message, "connectionId"))
                writer.uint32(/* id 10, wireType 5 =*/85).fixed32(message.connectionId);
            if (message.seqNumC2r != null && Object.hasOwnProperty.call(message, "seqNumC2r"))
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.seqNumC2r);
            if (message.seqNumE2e != null && Object.hasOwnProperty.call(message, "seqNumE2e"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.seqNumE2e);
            if (message.p2pRoutingSummary != null && Object.hasOwnProperty.call(message, "p2pRoutingSummary"))
                $root.CMsgSteamDatagramP2PRoutingSummary.encode(message.p2pRoutingSummary, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsP2PClientToRouter message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsP2PClientToRouter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PClientToRouter} message CMsgSteamDatagramConnectionStatsP2PClientToRouter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsP2PClientToRouter message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsP2PClientToRouter} CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsP2PClientToRouter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 14: {
                        message.p2pRoutingSummary = $root.CMsgSteamDatagramP2PRoutingSummary.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        if (!(message.ackRelay && message.ackRelay.length))
                            message.ackRelay = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ackRelay.push(reader.fixed32());
                        } else
                            message.ackRelay.push(reader.fixed32());
                        break;
                    }
                case 4: {
                        if (!(message.legacyAckE2e && message.legacyAckE2e.length))
                            message.legacyAckE2e = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.legacyAckE2e.push(reader.fixed32());
                        } else
                            message.legacyAckE2e.push(reader.fixed32());
                        break;
                    }
                case 5: {
                        message.flags = reader.uint32();
                        break;
                    }
                case 6: {
                        message.forwardTargetRelayRoutingToken = reader.bytes();
                        break;
                    }
                case 7: {
                        message.forwardTargetRevision = reader.uint32();
                        break;
                    }
                case 8: {
                        message.routes = reader.bytes();
                        break;
                    }
                case 9: {
                        message.ackPeerRoutesRevision = reader.uint32();
                        break;
                    }
                case 10: {
                        message.connectionId = reader.fixed32();
                        break;
                    }
                case 11: {
                        message.seqNumC2r = reader.uint32();
                        break;
                    }
                case 12: {
                        message.seqNumE2e = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsP2PClientToRouter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsP2PClientToRouter} CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsP2PClientToRouter message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityRelay);
                if (error)
                    return "qualityRelay." + error;
            }
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityE2e);
                if (error)
                    return "qualityE2e." + error;
            }
            if (message.p2pRoutingSummary != null && message.hasOwnProperty("p2pRoutingSummary")) {
                var error = $root.CMsgSteamDatagramP2PRoutingSummary.verify(message.p2pRoutingSummary);
                if (error)
                    return "p2pRoutingSummary." + error;
            }
            if (message.ackRelay != null && message.hasOwnProperty("ackRelay")) {
                if (!Array.isArray(message.ackRelay))
                    return "ackRelay: array expected";
                for (var i = 0; i < message.ackRelay.length; ++i)
                    if (!$util.isInteger(message.ackRelay[i]))
                        return "ackRelay: integer[] expected";
            }
            if (message.legacyAckE2e != null && message.hasOwnProperty("legacyAckE2e")) {
                if (!Array.isArray(message.legacyAckE2e))
                    return "legacyAckE2e: array expected";
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    if (!$util.isInteger(message.legacyAckE2e[i]))
                        return "legacyAckE2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.forwardTargetRelayRoutingToken != null && message.hasOwnProperty("forwardTargetRelayRoutingToken"))
                if (!(message.forwardTargetRelayRoutingToken && typeof message.forwardTargetRelayRoutingToken.length === "number" || $util.isString(message.forwardTargetRelayRoutingToken)))
                    return "forwardTargetRelayRoutingToken: buffer expected";
            if (message.forwardTargetRevision != null && message.hasOwnProperty("forwardTargetRevision"))
                if (!$util.isInteger(message.forwardTargetRevision))
                    return "forwardTargetRevision: integer expected";
            if (message.routes != null && message.hasOwnProperty("routes"))
                if (!(message.routes && typeof message.routes.length === "number" || $util.isString(message.routes)))
                    return "routes: buffer expected";
            if (message.ackPeerRoutesRevision != null && message.hasOwnProperty("ackPeerRoutesRevision"))
                if (!$util.isInteger(message.ackPeerRoutesRevision))
                    return "ackPeerRoutesRevision: integer expected";
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                if (!$util.isInteger(message.connectionId))
                    return "connectionId: integer expected";
            if (message.seqNumC2r != null && message.hasOwnProperty("seqNumC2r"))
                if (!$util.isInteger(message.seqNumC2r))
                    return "seqNumC2r: integer expected";
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                if (!$util.isInteger(message.seqNumE2e))
                    return "seqNumE2e: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsP2PClientToRouter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsP2PClientToRouter} CMsgSteamDatagramConnectionStatsP2PClientToRouter
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsP2PClientToRouter)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsP2PClientToRouter();
            if (object.qualityRelay != null) {
                if (typeof object.qualityRelay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PClientToRouter.qualityRelay: object expected");
                message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityRelay);
            }
            if (object.qualityE2e != null) {
                if (typeof object.qualityE2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PClientToRouter.qualityE2e: object expected");
                message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityE2e);
            }
            if (object.p2pRoutingSummary != null) {
                if (typeof object.p2pRoutingSummary !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PClientToRouter.p2pRoutingSummary: object expected");
                message.p2pRoutingSummary = $root.CMsgSteamDatagramP2PRoutingSummary.fromObject(object.p2pRoutingSummary);
            }
            if (object.ackRelay) {
                if (!Array.isArray(object.ackRelay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PClientToRouter.ackRelay: array expected");
                message.ackRelay = [];
                for (var i = 0; i < object.ackRelay.length; ++i)
                    message.ackRelay[i] = object.ackRelay[i] >>> 0;
            }
            if (object.legacyAckE2e) {
                if (!Array.isArray(object.legacyAckE2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PClientToRouter.legacyAckE2e: array expected");
                message.legacyAckE2e = [];
                for (var i = 0; i < object.legacyAckE2e.length; ++i)
                    message.legacyAckE2e[i] = object.legacyAckE2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.forwardTargetRelayRoutingToken != null)
                if (typeof object.forwardTargetRelayRoutingToken === "string")
                    $util.base64.decode(object.forwardTargetRelayRoutingToken, message.forwardTargetRelayRoutingToken = $util.newBuffer($util.base64.length(object.forwardTargetRelayRoutingToken)), 0);
                else if (object.forwardTargetRelayRoutingToken.length >= 0)
                    message.forwardTargetRelayRoutingToken = object.forwardTargetRelayRoutingToken;
            if (object.forwardTargetRevision != null)
                message.forwardTargetRevision = object.forwardTargetRevision >>> 0;
            if (object.routes != null)
                if (typeof object.routes === "string")
                    $util.base64.decode(object.routes, message.routes = $util.newBuffer($util.base64.length(object.routes)), 0);
                else if (object.routes.length >= 0)
                    message.routes = object.routes;
            if (object.ackPeerRoutesRevision != null)
                message.ackPeerRoutesRevision = object.ackPeerRoutesRevision >>> 0;
            if (object.connectionId != null)
                message.connectionId = object.connectionId >>> 0;
            if (object.seqNumC2r != null)
                message.seqNumC2r = object.seqNumC2r >>> 0;
            if (object.seqNumE2e != null)
                message.seqNumE2e = object.seqNumE2e >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsP2PClientToRouter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {CMsgSteamDatagramConnectionStatsP2PClientToRouter} message CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ackRelay = [];
                object.legacyAckE2e = [];
            }
            if (options.defaults) {
                object.qualityRelay = null;
                object.qualityE2e = null;
                object.flags = 0;
                if (options.bytes === String)
                    object.forwardTargetRelayRoutingToken = "";
                else {
                    object.forwardTargetRelayRoutingToken = [];
                    if (options.bytes !== Array)
                        object.forwardTargetRelayRoutingToken = $util.newBuffer(object.forwardTargetRelayRoutingToken);
                }
                object.forwardTargetRevision = 0;
                if (options.bytes === String)
                    object.routes = "";
                else {
                    object.routes = [];
                    if (options.bytes !== Array)
                        object.routes = $util.newBuffer(object.routes);
                }
                object.ackPeerRoutesRevision = 0;
                object.connectionId = 0;
                object.seqNumC2r = 0;
                object.seqNumE2e = 0;
                object.p2pRoutingSummary = null;
            }
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay"))
                object.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityRelay, options);
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e"))
                object.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityE2e, options);
            if (message.ackRelay && message.ackRelay.length) {
                object.ackRelay = [];
                for (var j = 0; j < message.ackRelay.length; ++j)
                    object.ackRelay[j] = message.ackRelay[j];
            }
            if (message.legacyAckE2e && message.legacyAckE2e.length) {
                object.legacyAckE2e = [];
                for (var j = 0; j < message.legacyAckE2e.length; ++j)
                    object.legacyAckE2e[j] = message.legacyAckE2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.forwardTargetRelayRoutingToken != null && message.hasOwnProperty("forwardTargetRelayRoutingToken"))
                object.forwardTargetRelayRoutingToken = options.bytes === String ? $util.base64.encode(message.forwardTargetRelayRoutingToken, 0, message.forwardTargetRelayRoutingToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.forwardTargetRelayRoutingToken) : message.forwardTargetRelayRoutingToken;
            if (message.forwardTargetRevision != null && message.hasOwnProperty("forwardTargetRevision"))
                object.forwardTargetRevision = message.forwardTargetRevision;
            if (message.routes != null && message.hasOwnProperty("routes"))
                object.routes = options.bytes === String ? $util.base64.encode(message.routes, 0, message.routes.length) : options.bytes === Array ? Array.prototype.slice.call(message.routes) : message.routes;
            if (message.ackPeerRoutesRevision != null && message.hasOwnProperty("ackPeerRoutesRevision"))
                object.ackPeerRoutesRevision = message.ackPeerRoutesRevision;
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                object.connectionId = message.connectionId;
            if (message.seqNumC2r != null && message.hasOwnProperty("seqNumC2r"))
                object.seqNumC2r = message.seqNumC2r;
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                object.seqNumE2e = message.seqNumE2e;
            if (message.p2pRoutingSummary != null && message.hasOwnProperty("p2pRoutingSummary"))
                object.p2pRoutingSummary = $root.CMsgSteamDatagramP2PRoutingSummary.toObject(message.p2pRoutingSummary, options);
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsP2PClientToRouter to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramConnectionStatsP2PClientToRouter
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramConnectionStatsP2PClientToRouter";
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         * @property {number} NOT_PRIMARY_SESSION=8 NOT_PRIMARY_SESSION value
         * @property {number} NOT_PRIMARY_TRANSPORT_E2E=16 NOT_PRIMARY_TRANSPORT_E2E value
         * @property {number} CLIENT_RELAY_OVERRIDE=32 CLIENT_RELAY_OVERRIDE value
         */
        CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            values[valuesById[8] = "NOT_PRIMARY_SESSION"] = 8;
            values[valuesById[16] = "NOT_PRIMARY_TRANSPORT_E2E"] = 16;
            values[valuesById[32] = "CLIENT_RELAY_OVERRIDE"] = 32;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsP2PClientToRouter;
    })();
    
    $root.CMsgSteamDatagramConnectionStatsP2PRouterToClient = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramConnectionStatsP2PRouterToClient.
         * @exports ICMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @interface ICMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityRelay] CMsgSteamDatagramConnectionStatsP2PRouterToClient qualityRelay
         * @property {ICMsgSteamDatagramConnectionQuality|null} [qualityE2e] CMsgSteamDatagramConnectionStatsP2PRouterToClient qualityE2e
         * @property {number|null} [secondsUntilShutdown] CMsgSteamDatagramConnectionStatsP2PRouterToClient secondsUntilShutdown
         * @property {number|null} [migrateRequestIp] CMsgSteamDatagramConnectionStatsP2PRouterToClient migrateRequestIp
         * @property {number|null} [migrateRequestPort] CMsgSteamDatagramConnectionStatsP2PRouterToClient migrateRequestPort
         * @property {number|null} [scoringPenaltyRelayCluster] CMsgSteamDatagramConnectionStatsP2PRouterToClient scoringPenaltyRelayCluster
         * @property {Array.<number>|null} [ackRelay] CMsgSteamDatagramConnectionStatsP2PRouterToClient ackRelay
         * @property {Array.<number>|null} [legacyAckE2e] CMsgSteamDatagramConnectionStatsP2PRouterToClient legacyAckE2e
         * @property {number|null} [flags] CMsgSteamDatagramConnectionStatsP2PRouterToClient flags
         * @property {number|null} [ackForwardTargetRevision] CMsgSteamDatagramConnectionStatsP2PRouterToClient ackForwardTargetRevision
         * @property {Uint8Array|null} [routes] CMsgSteamDatagramConnectionStatsP2PRouterToClient routes
         * @property {number|null} [ackPeerRoutesRevision] CMsgSteamDatagramConnectionStatsP2PRouterToClient ackPeerRoutesRevision
         * @property {number|null} [connectionId] CMsgSteamDatagramConnectionStatsP2PRouterToClient connectionId
         * @property {number|null} [seqNumR2c] CMsgSteamDatagramConnectionStatsP2PRouterToClient seqNumR2c
         * @property {number|null} [seqNumE2e] CMsgSteamDatagramConnectionStatsP2PRouterToClient seqNumE2e
         */
    
        /**
         * Constructs a new CMsgSteamDatagramConnectionStatsP2PRouterToClient.
         * @exports CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @classdesc Represents a CMsgSteamDatagramConnectionStatsP2PRouterToClient.
         * @implements ICMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @constructor
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToClient=} [properties] Properties to set
         */
        function CMsgSteamDatagramConnectionStatsP2PRouterToClient(properties) {
            this.ackRelay = [];
            this.legacyAckE2e = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient qualityRelay.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityRelay
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.qualityRelay = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient qualityE2e.
         * @member {ICMsgSteamDatagramConnectionQuality|null|undefined} qualityE2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.qualityE2e = null;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient secondsUntilShutdown.
         * @member {number} secondsUntilShutdown
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.secondsUntilShutdown = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient migrateRequestIp.
         * @member {number} migrateRequestIp
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.migrateRequestIp = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient migrateRequestPort.
         * @member {number} migrateRequestPort
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.migrateRequestPort = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient scoringPenaltyRelayCluster.
         * @member {number} scoringPenaltyRelayCluster
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.scoringPenaltyRelayCluster = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient ackRelay.
         * @member {Array.<number>} ackRelay
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.ackRelay = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient legacyAckE2e.
         * @member {Array.<number>} legacyAckE2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.legacyAckE2e = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient flags.
         * @member {number} flags
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.flags = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient ackForwardTargetRevision.
         * @member {number} ackForwardTargetRevision
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.ackForwardTargetRevision = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient routes.
         * @member {Uint8Array} routes
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.routes = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient ackPeerRoutesRevision.
         * @member {number} ackPeerRoutesRevision
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.ackPeerRoutesRevision = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient connectionId.
         * @member {number} connectionId
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.connectionId = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient seqNumR2c.
         * @member {number} seqNumR2c
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.seqNumR2c = 0;
    
        /**
         * CMsgSteamDatagramConnectionStatsP2PRouterToClient seqNumE2e.
         * @member {number} seqNumE2e
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.seqNumE2e = 0;
    
        /**
         * Creates a new CMsgSteamDatagramConnectionStatsP2PRouterToClient instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToClient=} [properties] Properties to set
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToClient} CMsgSteamDatagramConnectionStatsP2PRouterToClient instance
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.create = function create(properties) {
            return new CMsgSteamDatagramConnectionStatsP2PRouterToClient(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsP2PRouterToClient message. Does not implicitly {@link CMsgSteamDatagramConnectionStatsP2PRouterToClient.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToClient} message CMsgSteamDatagramConnectionStatsP2PRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.qualityRelay != null && Object.hasOwnProperty.call(message, "qualityRelay"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityRelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.qualityE2e != null && Object.hasOwnProperty.call(message, "qualityE2e"))
                $root.CMsgSteamDatagramConnectionQuality.encode(message.qualityE2e, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.secondsUntilShutdown != null && Object.hasOwnProperty.call(message, "secondsUntilShutdown"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.secondsUntilShutdown);
            if (message.migrateRequestIp != null && Object.hasOwnProperty.call(message, "migrateRequestIp"))
                writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.migrateRequestIp);
            if (message.migrateRequestPort != null && Object.hasOwnProperty.call(message, "migrateRequestPort"))
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.migrateRequestPort);
            if (message.scoringPenaltyRelayCluster != null && Object.hasOwnProperty.call(message, "scoringPenaltyRelayCluster"))
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.scoringPenaltyRelayCluster);
            if (message.ackRelay != null && message.ackRelay.length)
                for (var i = 0; i < message.ackRelay.length; ++i)
                    writer.uint32(/* id 7, wireType 5 =*/61).fixed32(message.ackRelay[i]);
            if (message.legacyAckE2e != null && message.legacyAckE2e.length)
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.legacyAckE2e[i]);
            if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.flags);
            if (message.ackForwardTargetRevision != null && Object.hasOwnProperty.call(message, "ackForwardTargetRevision"))
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.ackForwardTargetRevision);
            if (message.routes != null && Object.hasOwnProperty.call(message, "routes"))
                writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.routes);
            if (message.ackPeerRoutesRevision != null && Object.hasOwnProperty.call(message, "ackPeerRoutesRevision"))
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.ackPeerRoutesRevision);
            if (message.connectionId != null && Object.hasOwnProperty.call(message, "connectionId"))
                writer.uint32(/* id 13, wireType 5 =*/109).fixed32(message.connectionId);
            if (message.seqNumR2c != null && Object.hasOwnProperty.call(message, "seqNumR2c"))
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.seqNumR2c);
            if (message.seqNumE2e != null && Object.hasOwnProperty.call(message, "seqNumE2e"))
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.seqNumE2e);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramConnectionStatsP2PRouterToClient message, length delimited. Does not implicitly {@link CMsgSteamDatagramConnectionStatsP2PRouterToClient.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {ICMsgSteamDatagramConnectionStatsP2PRouterToClient} message CMsgSteamDatagramConnectionStatsP2PRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsP2PRouterToClient message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToClient} CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramConnectionStatsP2PRouterToClient();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 2: {
                        message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
                        break;
                    }
                case 3: {
                        message.secondsUntilShutdown = reader.uint32();
                        break;
                    }
                case 4: {
                        message.migrateRequestIp = reader.fixed32();
                        break;
                    }
                case 5: {
                        message.migrateRequestPort = reader.uint32();
                        break;
                    }
                case 6: {
                        message.scoringPenaltyRelayCluster = reader.uint32();
                        break;
                    }
                case 7: {
                        if (!(message.ackRelay && message.ackRelay.length))
                            message.ackRelay = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.ackRelay.push(reader.fixed32());
                        } else
                            message.ackRelay.push(reader.fixed32());
                        break;
                    }
                case 8: {
                        if (!(message.legacyAckE2e && message.legacyAckE2e.length))
                            message.legacyAckE2e = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.legacyAckE2e.push(reader.fixed32());
                        } else
                            message.legacyAckE2e.push(reader.fixed32());
                        break;
                    }
                case 9: {
                        message.flags = reader.uint32();
                        break;
                    }
                case 10: {
                        message.ackForwardTargetRevision = reader.uint32();
                        break;
                    }
                case 11: {
                        message.routes = reader.bytes();
                        break;
                    }
                case 12: {
                        message.ackPeerRoutesRevision = reader.uint32();
                        break;
                    }
                case 13: {
                        message.connectionId = reader.fixed32();
                        break;
                    }
                case 14: {
                        message.seqNumR2c = reader.uint32();
                        break;
                    }
                case 15: {
                        message.seqNumE2e = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramConnectionStatsP2PRouterToClient message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToClient} CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramConnectionStatsP2PRouterToClient message.
         * @function verify
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityRelay);
                if (error)
                    return "qualityRelay." + error;
            }
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e")) {
                var error = $root.CMsgSteamDatagramConnectionQuality.verify(message.qualityE2e);
                if (error)
                    return "qualityE2e." + error;
            }
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                if (!$util.isInteger(message.secondsUntilShutdown))
                    return "secondsUntilShutdown: integer expected";
            if (message.migrateRequestIp != null && message.hasOwnProperty("migrateRequestIp"))
                if (!$util.isInteger(message.migrateRequestIp))
                    return "migrateRequestIp: integer expected";
            if (message.migrateRequestPort != null && message.hasOwnProperty("migrateRequestPort"))
                if (!$util.isInteger(message.migrateRequestPort))
                    return "migrateRequestPort: integer expected";
            if (message.scoringPenaltyRelayCluster != null && message.hasOwnProperty("scoringPenaltyRelayCluster"))
                if (!$util.isInteger(message.scoringPenaltyRelayCluster))
                    return "scoringPenaltyRelayCluster: integer expected";
            if (message.ackRelay != null && message.hasOwnProperty("ackRelay")) {
                if (!Array.isArray(message.ackRelay))
                    return "ackRelay: array expected";
                for (var i = 0; i < message.ackRelay.length; ++i)
                    if (!$util.isInteger(message.ackRelay[i]))
                        return "ackRelay: integer[] expected";
            }
            if (message.legacyAckE2e != null && message.hasOwnProperty("legacyAckE2e")) {
                if (!Array.isArray(message.legacyAckE2e))
                    return "legacyAckE2e: array expected";
                for (var i = 0; i < message.legacyAckE2e.length; ++i)
                    if (!$util.isInteger(message.legacyAckE2e[i]))
                        return "legacyAckE2e: integer[] expected";
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                if (!$util.isInteger(message.flags))
                    return "flags: integer expected";
            if (message.ackForwardTargetRevision != null && message.hasOwnProperty("ackForwardTargetRevision"))
                if (!$util.isInteger(message.ackForwardTargetRevision))
                    return "ackForwardTargetRevision: integer expected";
            if (message.routes != null && message.hasOwnProperty("routes"))
                if (!(message.routes && typeof message.routes.length === "number" || $util.isString(message.routes)))
                    return "routes: buffer expected";
            if (message.ackPeerRoutesRevision != null && message.hasOwnProperty("ackPeerRoutesRevision"))
                if (!$util.isInteger(message.ackPeerRoutesRevision))
                    return "ackPeerRoutesRevision: integer expected";
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                if (!$util.isInteger(message.connectionId))
                    return "connectionId: integer expected";
            if (message.seqNumR2c != null && message.hasOwnProperty("seqNumR2c"))
                if (!$util.isInteger(message.seqNumR2c))
                    return "seqNumR2c: integer expected";
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                if (!$util.isInteger(message.seqNumE2e))
                    return "seqNumE2e: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramConnectionStatsP2PRouterToClient message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramConnectionStatsP2PRouterToClient} CMsgSteamDatagramConnectionStatsP2PRouterToClient
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramConnectionStatsP2PRouterToClient)
                return object;
            var message = new $root.CMsgSteamDatagramConnectionStatsP2PRouterToClient();
            if (object.qualityRelay != null) {
                if (typeof object.qualityRelay !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToClient.qualityRelay: object expected");
                message.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityRelay);
            }
            if (object.qualityE2e != null) {
                if (typeof object.qualityE2e !== "object")
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToClient.qualityE2e: object expected");
                message.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.fromObject(object.qualityE2e);
            }
            if (object.secondsUntilShutdown != null)
                message.secondsUntilShutdown = object.secondsUntilShutdown >>> 0;
            if (object.migrateRequestIp != null)
                message.migrateRequestIp = object.migrateRequestIp >>> 0;
            if (object.migrateRequestPort != null)
                message.migrateRequestPort = object.migrateRequestPort >>> 0;
            if (object.scoringPenaltyRelayCluster != null)
                message.scoringPenaltyRelayCluster = object.scoringPenaltyRelayCluster >>> 0;
            if (object.ackRelay) {
                if (!Array.isArray(object.ackRelay))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToClient.ackRelay: array expected");
                message.ackRelay = [];
                for (var i = 0; i < object.ackRelay.length; ++i)
                    message.ackRelay[i] = object.ackRelay[i] >>> 0;
            }
            if (object.legacyAckE2e) {
                if (!Array.isArray(object.legacyAckE2e))
                    throw TypeError(".CMsgSteamDatagramConnectionStatsP2PRouterToClient.legacyAckE2e: array expected");
                message.legacyAckE2e = [];
                for (var i = 0; i < object.legacyAckE2e.length; ++i)
                    message.legacyAckE2e[i] = object.legacyAckE2e[i] >>> 0;
            }
            if (object.flags != null)
                message.flags = object.flags >>> 0;
            if (object.ackForwardTargetRevision != null)
                message.ackForwardTargetRevision = object.ackForwardTargetRevision >>> 0;
            if (object.routes != null)
                if (typeof object.routes === "string")
                    $util.base64.decode(object.routes, message.routes = $util.newBuffer($util.base64.length(object.routes)), 0);
                else if (object.routes.length >= 0)
                    message.routes = object.routes;
            if (object.ackPeerRoutesRevision != null)
                message.ackPeerRoutesRevision = object.ackPeerRoutesRevision >>> 0;
            if (object.connectionId != null)
                message.connectionId = object.connectionId >>> 0;
            if (object.seqNumR2c != null)
                message.seqNumR2c = object.seqNumR2c >>> 0;
            if (object.seqNumE2e != null)
                message.seqNumE2e = object.seqNumE2e >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramConnectionStatsP2PRouterToClient message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {CMsgSteamDatagramConnectionStatsP2PRouterToClient} message CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.ackRelay = [];
                object.legacyAckE2e = [];
            }
            if (options.defaults) {
                object.qualityRelay = null;
                object.qualityE2e = null;
                object.secondsUntilShutdown = 0;
                object.migrateRequestIp = 0;
                object.migrateRequestPort = 0;
                object.scoringPenaltyRelayCluster = 0;
                object.flags = 0;
                object.ackForwardTargetRevision = 0;
                if (options.bytes === String)
                    object.routes = "";
                else {
                    object.routes = [];
                    if (options.bytes !== Array)
                        object.routes = $util.newBuffer(object.routes);
                }
                object.ackPeerRoutesRevision = 0;
                object.connectionId = 0;
                object.seqNumR2c = 0;
                object.seqNumE2e = 0;
            }
            if (message.qualityRelay != null && message.hasOwnProperty("qualityRelay"))
                object.qualityRelay = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityRelay, options);
            if (message.qualityE2e != null && message.hasOwnProperty("qualityE2e"))
                object.qualityE2e = $root.CMsgSteamDatagramConnectionQuality.toObject(message.qualityE2e, options);
            if (message.secondsUntilShutdown != null && message.hasOwnProperty("secondsUntilShutdown"))
                object.secondsUntilShutdown = message.secondsUntilShutdown;
            if (message.migrateRequestIp != null && message.hasOwnProperty("migrateRequestIp"))
                object.migrateRequestIp = message.migrateRequestIp;
            if (message.migrateRequestPort != null && message.hasOwnProperty("migrateRequestPort"))
                object.migrateRequestPort = message.migrateRequestPort;
            if (message.scoringPenaltyRelayCluster != null && message.hasOwnProperty("scoringPenaltyRelayCluster"))
                object.scoringPenaltyRelayCluster = message.scoringPenaltyRelayCluster;
            if (message.ackRelay && message.ackRelay.length) {
                object.ackRelay = [];
                for (var j = 0; j < message.ackRelay.length; ++j)
                    object.ackRelay[j] = message.ackRelay[j];
            }
            if (message.legacyAckE2e && message.legacyAckE2e.length) {
                object.legacyAckE2e = [];
                for (var j = 0; j < message.legacyAckE2e.length; ++j)
                    object.legacyAckE2e[j] = message.legacyAckE2e[j];
            }
            if (message.flags != null && message.hasOwnProperty("flags"))
                object.flags = message.flags;
            if (message.ackForwardTargetRevision != null && message.hasOwnProperty("ackForwardTargetRevision"))
                object.ackForwardTargetRevision = message.ackForwardTargetRevision;
            if (message.routes != null && message.hasOwnProperty("routes"))
                object.routes = options.bytes === String ? $util.base64.encode(message.routes, 0, message.routes.length) : options.bytes === Array ? Array.prototype.slice.call(message.routes) : message.routes;
            if (message.ackPeerRoutesRevision != null && message.hasOwnProperty("ackPeerRoutesRevision"))
                object.ackPeerRoutesRevision = message.ackPeerRoutesRevision;
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                object.connectionId = message.connectionId;
            if (message.seqNumR2c != null && message.hasOwnProperty("seqNumR2c"))
                object.seqNumR2c = message.seqNumR2c;
            if (message.seqNumE2e != null && message.hasOwnProperty("seqNumE2e"))
                object.seqNumE2e = message.seqNumE2e;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramConnectionStatsP2PRouterToClient to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramConnectionStatsP2PRouterToClient
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramConnectionStatsP2PRouterToClient";
        };
    
        /**
         * Flags enum.
         * @name CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags
         * @enum {number}
         * @property {number} ACK_REQUEST_RELAY=1 ACK_REQUEST_RELAY value
         * @property {number} ACK_REQUEST_E2E=2 ACK_REQUEST_E2E value
         * @property {number} ACK_REQUEST_IMMEDIATE=4 ACK_REQUEST_IMMEDIATE value
         * @property {number} NOT_PRIMARY_TRANSPORT_E2E=16 NOT_PRIMARY_TRANSPORT_E2E value
         */
        CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACK_REQUEST_RELAY"] = 1;
            values[valuesById[2] = "ACK_REQUEST_E2E"] = 2;
            values[valuesById[4] = "ACK_REQUEST_IMMEDIATE"] = 4;
            values[valuesById[16] = "NOT_PRIMARY_TRANSPORT_E2E"] = 16;
            return values;
        })();
    
        return CMsgSteamDatagramConnectionStatsP2PRouterToClient;
    })();
    
    $root.CMsgSteamDatagramP2PBadRouteRouterToClient = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PBadRouteRouterToClient.
         * @exports ICMsgSteamDatagramP2PBadRouteRouterToClient
         * @interface ICMsgSteamDatagramP2PBadRouteRouterToClient
         * @property {number|null} [connectionId] CMsgSteamDatagramP2PBadRouteRouterToClient connectionId
         * @property {Uint8Array|null} [failedRelayRoutingToken] CMsgSteamDatagramP2PBadRouteRouterToClient failedRelayRoutingToken
         * @property {number|null} [ackForwardTargetRevision] CMsgSteamDatagramP2PBadRouteRouterToClient ackForwardTargetRevision
         * @property {number|Long|null} [kludgePad] CMsgSteamDatagramP2PBadRouteRouterToClient kludgePad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PBadRouteRouterToClient.
         * @exports CMsgSteamDatagramP2PBadRouteRouterToClient
         * @classdesc Represents a CMsgSteamDatagramP2PBadRouteRouterToClient.
         * @implements ICMsgSteamDatagramP2PBadRouteRouterToClient
         * @constructor
         * @param {ICMsgSteamDatagramP2PBadRouteRouterToClient=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PBadRouteRouterToClient(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PBadRouteRouterToClient connectionId.
         * @member {number} connectionId
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @instance
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.prototype.connectionId = 0;
    
        /**
         * CMsgSteamDatagramP2PBadRouteRouterToClient failedRelayRoutingToken.
         * @member {Uint8Array} failedRelayRoutingToken
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @instance
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.prototype.failedRelayRoutingToken = $util.newBuffer([]);
    
        /**
         * CMsgSteamDatagramP2PBadRouteRouterToClient ackForwardTargetRevision.
         * @member {number} ackForwardTargetRevision
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @instance
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.prototype.ackForwardTargetRevision = 0;
    
        /**
         * CMsgSteamDatagramP2PBadRouteRouterToClient kludgePad.
         * @member {number|Long} kludgePad
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @instance
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.prototype.kludgePad = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
        /**
         * Creates a new CMsgSteamDatagramP2PBadRouteRouterToClient instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {ICMsgSteamDatagramP2PBadRouteRouterToClient=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PBadRouteRouterToClient} CMsgSteamDatagramP2PBadRouteRouterToClient instance
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.create = function create(properties) {
            return new CMsgSteamDatagramP2PBadRouteRouterToClient(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PBadRouteRouterToClient message. Does not implicitly {@link CMsgSteamDatagramP2PBadRouteRouterToClient.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {ICMsgSteamDatagramP2PBadRouteRouterToClient} message CMsgSteamDatagramP2PBadRouteRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectionId != null && Object.hasOwnProperty.call(message, "connectionId"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.connectionId);
            if (message.failedRelayRoutingToken != null && Object.hasOwnProperty.call(message, "failedRelayRoutingToken"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.failedRelayRoutingToken);
            if (message.ackForwardTargetRevision != null && Object.hasOwnProperty.call(message, "ackForwardTargetRevision"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ackForwardTargetRevision);
            if (message.kludgePad != null && Object.hasOwnProperty.call(message, "kludgePad"))
                writer.uint32(/* id 99, wireType 1 =*/793).fixed64(message.kludgePad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PBadRouteRouterToClient message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PBadRouteRouterToClient.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {ICMsgSteamDatagramP2PBadRouteRouterToClient} message CMsgSteamDatagramP2PBadRouteRouterToClient message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PBadRouteRouterToClient message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PBadRouteRouterToClient} CMsgSteamDatagramP2PBadRouteRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PBadRouteRouterToClient();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.connectionId = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.failedRelayRoutingToken = reader.bytes();
                        break;
                    }
                case 3: {
                        message.ackForwardTargetRevision = reader.uint32();
                        break;
                    }
                case 99: {
                        message.kludgePad = reader.fixed64();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PBadRouteRouterToClient message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PBadRouteRouterToClient} CMsgSteamDatagramP2PBadRouteRouterToClient
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PBadRouteRouterToClient message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                if (!$util.isInteger(message.connectionId))
                    return "connectionId: integer expected";
            if (message.failedRelayRoutingToken != null && message.hasOwnProperty("failedRelayRoutingToken"))
                if (!(message.failedRelayRoutingToken && typeof message.failedRelayRoutingToken.length === "number" || $util.isString(message.failedRelayRoutingToken)))
                    return "failedRelayRoutingToken: buffer expected";
            if (message.ackForwardTargetRevision != null && message.hasOwnProperty("ackForwardTargetRevision"))
                if (!$util.isInteger(message.ackForwardTargetRevision))
                    return "ackForwardTargetRevision: integer expected";
            if (message.kludgePad != null && message.hasOwnProperty("kludgePad"))
                if (!$util.isInteger(message.kludgePad) && !(message.kludgePad && $util.isInteger(message.kludgePad.low) && $util.isInteger(message.kludgePad.high)))
                    return "kludgePad: integer|Long expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PBadRouteRouterToClient message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PBadRouteRouterToClient} CMsgSteamDatagramP2PBadRouteRouterToClient
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PBadRouteRouterToClient)
                return object;
            var message = new $root.CMsgSteamDatagramP2PBadRouteRouterToClient();
            if (object.connectionId != null)
                message.connectionId = object.connectionId >>> 0;
            if (object.failedRelayRoutingToken != null)
                if (typeof object.failedRelayRoutingToken === "string")
                    $util.base64.decode(object.failedRelayRoutingToken, message.failedRelayRoutingToken = $util.newBuffer($util.base64.length(object.failedRelayRoutingToken)), 0);
                else if (object.failedRelayRoutingToken.length >= 0)
                    message.failedRelayRoutingToken = object.failedRelayRoutingToken;
            if (object.ackForwardTargetRevision != null)
                message.ackForwardTargetRevision = object.ackForwardTargetRevision >>> 0;
            if (object.kludgePad != null)
                if ($util.Long)
                    (message.kludgePad = $util.Long.fromValue(object.kludgePad)).unsigned = false;
                else if (typeof object.kludgePad === "string")
                    message.kludgePad = parseInt(object.kludgePad, 10);
                else if (typeof object.kludgePad === "number")
                    message.kludgePad = object.kludgePad;
                else if (typeof object.kludgePad === "object")
                    message.kludgePad = new $util.LongBits(object.kludgePad.low >>> 0, object.kludgePad.high >>> 0).toNumber();
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PBadRouteRouterToClient message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {CMsgSteamDatagramP2PBadRouteRouterToClient} message CMsgSteamDatagramP2PBadRouteRouterToClient
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connectionId = 0;
                if (options.bytes === String)
                    object.failedRelayRoutingToken = "";
                else {
                    object.failedRelayRoutingToken = [];
                    if (options.bytes !== Array)
                        object.failedRelayRoutingToken = $util.newBuffer(object.failedRelayRoutingToken);
                }
                object.ackForwardTargetRevision = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.kludgePad = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.kludgePad = options.longs === String ? "0" : 0;
            }
            if (message.connectionId != null && message.hasOwnProperty("connectionId"))
                object.connectionId = message.connectionId;
            if (message.failedRelayRoutingToken != null && message.hasOwnProperty("failedRelayRoutingToken"))
                object.failedRelayRoutingToken = options.bytes === String ? $util.base64.encode(message.failedRelayRoutingToken, 0, message.failedRelayRoutingToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.failedRelayRoutingToken) : message.failedRelayRoutingToken;
            if (message.ackForwardTargetRevision != null && message.hasOwnProperty("ackForwardTargetRevision"))
                object.ackForwardTargetRevision = message.ackForwardTargetRevision;
            if (message.kludgePad != null && message.hasOwnProperty("kludgePad"))
                if (typeof message.kludgePad === "number")
                    object.kludgePad = options.longs === String ? String(message.kludgePad) : message.kludgePad;
                else
                    object.kludgePad = options.longs === String ? $util.Long.prototype.toString.call(message.kludgePad) : options.longs === Number ? new $util.LongBits(message.kludgePad.low >>> 0, message.kludgePad.high >>> 0).toNumber() : message.kludgePad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PBadRouteRouterToClient to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramP2PBadRouteRouterToClient
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramP2PBadRouteRouterToClient
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramP2PBadRouteRouterToClient.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramP2PBadRouteRouterToClient";
        };
    
        return CMsgSteamDatagramP2PBadRouteRouterToClient;
    })();
    
    $root.CMsgSteamDatagramP2PRoutes = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramP2PRoutes.
         * @exports ICMsgSteamDatagramP2PRoutes
         * @interface ICMsgSteamDatagramP2PRoutes
         * @property {Array.<CMsgSteamDatagramP2PRoutes.IRelayCluster>|null} [relayClusters] CMsgSteamDatagramP2PRoutes relayClusters
         * @property {Array.<CMsgSteamDatagramP2PRoutes.IRoute>|null} [routes] CMsgSteamDatagramP2PRoutes routes
         * @property {number|null} [revision] CMsgSteamDatagramP2PRoutes revision
         */
    
        /**
         * Constructs a new CMsgSteamDatagramP2PRoutes.
         * @exports CMsgSteamDatagramP2PRoutes
         * @classdesc Represents a CMsgSteamDatagramP2PRoutes.
         * @implements ICMsgSteamDatagramP2PRoutes
         * @constructor
         * @param {ICMsgSteamDatagramP2PRoutes=} [properties] Properties to set
         */
        function CMsgSteamDatagramP2PRoutes(properties) {
            this.relayClusters = [];
            this.routes = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramP2PRoutes relayClusters.
         * @member {Array.<CMsgSteamDatagramP2PRoutes.IRelayCluster>} relayClusters
         * @memberof CMsgSteamDatagramP2PRoutes
         * @instance
         */
        CMsgSteamDatagramP2PRoutes.prototype.relayClusters = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramP2PRoutes routes.
         * @member {Array.<CMsgSteamDatagramP2PRoutes.IRoute>} routes
         * @memberof CMsgSteamDatagramP2PRoutes
         * @instance
         */
        CMsgSteamDatagramP2PRoutes.prototype.routes = $util.emptyArray;
    
        /**
         * CMsgSteamDatagramP2PRoutes revision.
         * @member {number} revision
         * @memberof CMsgSteamDatagramP2PRoutes
         * @instance
         */
        CMsgSteamDatagramP2PRoutes.prototype.revision = 0;
    
        /**
         * Creates a new CMsgSteamDatagramP2PRoutes instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {ICMsgSteamDatagramP2PRoutes=} [properties] Properties to set
         * @returns {CMsgSteamDatagramP2PRoutes} CMsgSteamDatagramP2PRoutes instance
         */
        CMsgSteamDatagramP2PRoutes.create = function create(properties) {
            return new CMsgSteamDatagramP2PRoutes(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PRoutes message. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {ICMsgSteamDatagramP2PRoutes} message CMsgSteamDatagramP2PRoutes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PRoutes.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.relayClusters != null && message.relayClusters.length)
                for (var i = 0; i < message.relayClusters.length; ++i)
                    $root.CMsgSteamDatagramP2PRoutes.RelayCluster.encode(message.relayClusters[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.routes != null && message.routes.length)
                for (var i = 0; i < message.routes.length; ++i)
                    $root.CMsgSteamDatagramP2PRoutes.Route.encode(message.routes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.revision != null && Object.hasOwnProperty.call(message, "revision"))
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.revision);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramP2PRoutes message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {ICMsgSteamDatagramP2PRoutes} message CMsgSteamDatagramP2PRoutes message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramP2PRoutes.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PRoutes message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramP2PRoutes} CMsgSteamDatagramP2PRoutes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PRoutes.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PRoutes();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        if (!(message.relayClusters && message.relayClusters.length))
                            message.relayClusters = [];
                        message.relayClusters.push($root.CMsgSteamDatagramP2PRoutes.RelayCluster.decode(reader, reader.uint32()));
                        break;
                    }
                case 2: {
                        if (!(message.routes && message.routes.length))
                            message.routes = [];
                        message.routes.push($root.CMsgSteamDatagramP2PRoutes.Route.decode(reader, reader.uint32()));
                        break;
                    }
                case 3: {
                        message.revision = reader.uint32();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramP2PRoutes message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramP2PRoutes} CMsgSteamDatagramP2PRoutes
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramP2PRoutes.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramP2PRoutes message.
         * @function verify
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramP2PRoutes.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.relayClusters != null && message.hasOwnProperty("relayClusters")) {
                if (!Array.isArray(message.relayClusters))
                    return "relayClusters: array expected";
                for (var i = 0; i < message.relayClusters.length; ++i) {
                    var error = $root.CMsgSteamDatagramP2PRoutes.RelayCluster.verify(message.relayClusters[i]);
                    if (error)
                        return "relayClusters." + error;
                }
            }
            if (message.routes != null && message.hasOwnProperty("routes")) {
                if (!Array.isArray(message.routes))
                    return "routes: array expected";
                for (var i = 0; i < message.routes.length; ++i) {
                    var error = $root.CMsgSteamDatagramP2PRoutes.Route.verify(message.routes[i]);
                    if (error)
                        return "routes." + error;
                }
            }
            if (message.revision != null && message.hasOwnProperty("revision"))
                if (!$util.isInteger(message.revision))
                    return "revision: integer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramP2PRoutes message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramP2PRoutes} CMsgSteamDatagramP2PRoutes
         */
        CMsgSteamDatagramP2PRoutes.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramP2PRoutes)
                return object;
            var message = new $root.CMsgSteamDatagramP2PRoutes();
            if (object.relayClusters) {
                if (!Array.isArray(object.relayClusters))
                    throw TypeError(".CMsgSteamDatagramP2PRoutes.relayClusters: array expected");
                message.relayClusters = [];
                for (var i = 0; i < object.relayClusters.length; ++i) {
                    if (typeof object.relayClusters[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramP2PRoutes.relayClusters: object expected");
                    message.relayClusters[i] = $root.CMsgSteamDatagramP2PRoutes.RelayCluster.fromObject(object.relayClusters[i]);
                }
            }
            if (object.routes) {
                if (!Array.isArray(object.routes))
                    throw TypeError(".CMsgSteamDatagramP2PRoutes.routes: array expected");
                message.routes = [];
                for (var i = 0; i < object.routes.length; ++i) {
                    if (typeof object.routes[i] !== "object")
                        throw TypeError(".CMsgSteamDatagramP2PRoutes.routes: object expected");
                    message.routes[i] = $root.CMsgSteamDatagramP2PRoutes.Route.fromObject(object.routes[i]);
                }
            }
            if (object.revision != null)
                message.revision = object.revision >>> 0;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramP2PRoutes message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {CMsgSteamDatagramP2PRoutes} message CMsgSteamDatagramP2PRoutes
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramP2PRoutes.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.relayClusters = [];
                object.routes = [];
            }
            if (options.defaults)
                object.revision = 0;
            if (message.relayClusters && message.relayClusters.length) {
                object.relayClusters = [];
                for (var j = 0; j < message.relayClusters.length; ++j)
                    object.relayClusters[j] = $root.CMsgSteamDatagramP2PRoutes.RelayCluster.toObject(message.relayClusters[j], options);
            }
            if (message.routes && message.routes.length) {
                object.routes = [];
                for (var j = 0; j < message.routes.length; ++j)
                    object.routes[j] = $root.CMsgSteamDatagramP2PRoutes.Route.toObject(message.routes[j], options);
            }
            if (message.revision != null && message.hasOwnProperty("revision"))
                object.revision = message.revision;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramP2PRoutes to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramP2PRoutes
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramP2PRoutes.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramP2PRoutes
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramP2PRoutes
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramP2PRoutes.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramP2PRoutes";
        };
    
        CMsgSteamDatagramP2PRoutes.RelayCluster = (function() {
    
            /**
             * Properties of a RelayCluster.
             * @memberof CMsgSteamDatagramP2PRoutes
             * @interface IRelayCluster
             * @property {number|null} [popId] RelayCluster popId
             * @property {number|null} [pingMs] RelayCluster pingMs
             * @property {number|null} [scorePenalty] RelayCluster scorePenalty
             * @property {Uint8Array|null} [sessionRelayRoutingToken] RelayCluster sessionRelayRoutingToken
             */
    
            /**
             * Constructs a new RelayCluster.
             * @memberof CMsgSteamDatagramP2PRoutes
             * @classdesc Represents a RelayCluster.
             * @implements IRelayCluster
             * @constructor
             * @param {CMsgSteamDatagramP2PRoutes.IRelayCluster=} [properties] Properties to set
             */
            function RelayCluster(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * RelayCluster popId.
             * @member {number} popId
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @instance
             */
            RelayCluster.prototype.popId = 0;
    
            /**
             * RelayCluster pingMs.
             * @member {number} pingMs
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @instance
             */
            RelayCluster.prototype.pingMs = 0;
    
            /**
             * RelayCluster scorePenalty.
             * @member {number} scorePenalty
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @instance
             */
            RelayCluster.prototype.scorePenalty = 0;
    
            /**
             * RelayCluster sessionRelayRoutingToken.
             * @member {Uint8Array} sessionRelayRoutingToken
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @instance
             */
            RelayCluster.prototype.sessionRelayRoutingToken = $util.newBuffer([]);
    
            /**
             * Creates a new RelayCluster instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRelayCluster=} [properties] Properties to set
             * @returns {CMsgSteamDatagramP2PRoutes.RelayCluster} RelayCluster instance
             */
            RelayCluster.create = function create(properties) {
                return new RelayCluster(properties);
            };
    
            /**
             * Encodes the specified RelayCluster message. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.RelayCluster.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRelayCluster} message RelayCluster message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RelayCluster.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.popId != null && Object.hasOwnProperty.call(message, "popId"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.popId);
                if (message.pingMs != null && Object.hasOwnProperty.call(message, "pingMs"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.pingMs);
                if (message.scorePenalty != null && Object.hasOwnProperty.call(message, "scorePenalty"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.scorePenalty);
                if (message.sessionRelayRoutingToken != null && Object.hasOwnProperty.call(message, "sessionRelayRoutingToken"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.sessionRelayRoutingToken);
                return writer;
            };
    
            /**
             * Encodes the specified RelayCluster message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.RelayCluster.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRelayCluster} message RelayCluster message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RelayCluster.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a RelayCluster message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramP2PRoutes.RelayCluster} RelayCluster
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RelayCluster.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PRoutes.RelayCluster();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.popId = reader.fixed32();
                            break;
                        }
                    case 2: {
                            message.pingMs = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.scorePenalty = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.sessionRelayRoutingToken = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a RelayCluster message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramP2PRoutes.RelayCluster} RelayCluster
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RelayCluster.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a RelayCluster message.
             * @function verify
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RelayCluster.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.popId != null && message.hasOwnProperty("popId"))
                    if (!$util.isInteger(message.popId))
                        return "popId: integer expected";
                if (message.pingMs != null && message.hasOwnProperty("pingMs"))
                    if (!$util.isInteger(message.pingMs))
                        return "pingMs: integer expected";
                if (message.scorePenalty != null && message.hasOwnProperty("scorePenalty"))
                    if (!$util.isInteger(message.scorePenalty))
                        return "scorePenalty: integer expected";
                if (message.sessionRelayRoutingToken != null && message.hasOwnProperty("sessionRelayRoutingToken"))
                    if (!(message.sessionRelayRoutingToken && typeof message.sessionRelayRoutingToken.length === "number" || $util.isString(message.sessionRelayRoutingToken)))
                        return "sessionRelayRoutingToken: buffer expected";
                return null;
            };
    
            /**
             * Creates a RelayCluster message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramP2PRoutes.RelayCluster} RelayCluster
             */
            RelayCluster.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramP2PRoutes.RelayCluster)
                    return object;
                var message = new $root.CMsgSteamDatagramP2PRoutes.RelayCluster();
                if (object.popId != null)
                    message.popId = object.popId >>> 0;
                if (object.pingMs != null)
                    message.pingMs = object.pingMs >>> 0;
                if (object.scorePenalty != null)
                    message.scorePenalty = object.scorePenalty >>> 0;
                if (object.sessionRelayRoutingToken != null)
                    if (typeof object.sessionRelayRoutingToken === "string")
                        $util.base64.decode(object.sessionRelayRoutingToken, message.sessionRelayRoutingToken = $util.newBuffer($util.base64.length(object.sessionRelayRoutingToken)), 0);
                    else if (object.sessionRelayRoutingToken.length >= 0)
                        message.sessionRelayRoutingToken = object.sessionRelayRoutingToken;
                return message;
            };
    
            /**
             * Creates a plain object from a RelayCluster message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.RelayCluster} message RelayCluster
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RelayCluster.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.popId = 0;
                    object.pingMs = 0;
                    object.scorePenalty = 0;
                    if (options.bytes === String)
                        object.sessionRelayRoutingToken = "";
                    else {
                        object.sessionRelayRoutingToken = [];
                        if (options.bytes !== Array)
                            object.sessionRelayRoutingToken = $util.newBuffer(object.sessionRelayRoutingToken);
                    }
                }
                if (message.popId != null && message.hasOwnProperty("popId"))
                    object.popId = message.popId;
                if (message.pingMs != null && message.hasOwnProperty("pingMs"))
                    object.pingMs = message.pingMs;
                if (message.scorePenalty != null && message.hasOwnProperty("scorePenalty"))
                    object.scorePenalty = message.scorePenalty;
                if (message.sessionRelayRoutingToken != null && message.hasOwnProperty("sessionRelayRoutingToken"))
                    object.sessionRelayRoutingToken = options.bytes === String ? $util.base64.encode(message.sessionRelayRoutingToken, 0, message.sessionRelayRoutingToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.sessionRelayRoutingToken) : message.sessionRelayRoutingToken;
                return object;
            };
    
            /**
             * Converts this RelayCluster to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RelayCluster.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for RelayCluster
             * @function getTypeUrl
             * @memberof CMsgSteamDatagramP2PRoutes.RelayCluster
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RelayCluster.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamDatagramP2PRoutes.RelayCluster";
            };
    
            return RelayCluster;
        })();
    
        CMsgSteamDatagramP2PRoutes.Route = (function() {
    
            /**
             * Properties of a Route.
             * @memberof CMsgSteamDatagramP2PRoutes
             * @interface IRoute
             * @property {number|null} [myPopId] Route myPopId
             * @property {number|null} [yourPopId] Route yourPopId
             * @property {number|null} [legacyScore] Route legacyScore
             * @property {number|null} [interiorScore] Route interiorScore
             */
    
            /**
             * Constructs a new Route.
             * @memberof CMsgSteamDatagramP2PRoutes
             * @classdesc Represents a Route.
             * @implements IRoute
             * @constructor
             * @param {CMsgSteamDatagramP2PRoutes.IRoute=} [properties] Properties to set
             */
            function Route(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * Route myPopId.
             * @member {number} myPopId
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @instance
             */
            Route.prototype.myPopId = 0;
    
            /**
             * Route yourPopId.
             * @member {number} yourPopId
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @instance
             */
            Route.prototype.yourPopId = 0;
    
            /**
             * Route legacyScore.
             * @member {number} legacyScore
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @instance
             */
            Route.prototype.legacyScore = 0;
    
            /**
             * Route interiorScore.
             * @member {number} interiorScore
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @instance
             */
            Route.prototype.interiorScore = 0;
    
            /**
             * Creates a new Route instance using the specified properties.
             * @function create
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRoute=} [properties] Properties to set
             * @returns {CMsgSteamDatagramP2PRoutes.Route} Route instance
             */
            Route.create = function create(properties) {
                return new Route(properties);
            };
    
            /**
             * Encodes the specified Route message. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.Route.verify|verify} messages.
             * @function encode
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRoute} message Route message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Route.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.myPopId != null && Object.hasOwnProperty.call(message, "myPopId"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.myPopId);
                if (message.yourPopId != null && Object.hasOwnProperty.call(message, "yourPopId"))
                    writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.yourPopId);
                if (message.legacyScore != null && Object.hasOwnProperty.call(message, "legacyScore"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.legacyScore);
                if (message.interiorScore != null && Object.hasOwnProperty.call(message, "interiorScore"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.interiorScore);
                return writer;
            };
    
            /**
             * Encodes the specified Route message, length delimited. Does not implicitly {@link CMsgSteamDatagramP2PRoutes.Route.verify|verify} messages.
             * @function encodeDelimited
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.IRoute} message Route message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Route.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a Route message from the specified reader or buffer.
             * @function decode
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {CMsgSteamDatagramP2PRoutes.Route} Route
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Route.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramP2PRoutes.Route();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.myPopId = reader.fixed32();
                            break;
                        }
                    case 2: {
                            message.yourPopId = reader.fixed32();
                            break;
                        }
                    case 3: {
                            message.legacyScore = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.interiorScore = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a Route message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {CMsgSteamDatagramP2PRoutes.Route} Route
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Route.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a Route message.
             * @function verify
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Route.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.myPopId != null && message.hasOwnProperty("myPopId"))
                    if (!$util.isInteger(message.myPopId))
                        return "myPopId: integer expected";
                if (message.yourPopId != null && message.hasOwnProperty("yourPopId"))
                    if (!$util.isInteger(message.yourPopId))
                        return "yourPopId: integer expected";
                if (message.legacyScore != null && message.hasOwnProperty("legacyScore"))
                    if (!$util.isInteger(message.legacyScore))
                        return "legacyScore: integer expected";
                if (message.interiorScore != null && message.hasOwnProperty("interiorScore"))
                    if (!$util.isInteger(message.interiorScore))
                        return "interiorScore: integer expected";
                return null;
            };
    
            /**
             * Creates a Route message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {CMsgSteamDatagramP2PRoutes.Route} Route
             */
            Route.fromObject = function fromObject(object) {
                if (object instanceof $root.CMsgSteamDatagramP2PRoutes.Route)
                    return object;
                var message = new $root.CMsgSteamDatagramP2PRoutes.Route();
                if (object.myPopId != null)
                    message.myPopId = object.myPopId >>> 0;
                if (object.yourPopId != null)
                    message.yourPopId = object.yourPopId >>> 0;
                if (object.legacyScore != null)
                    message.legacyScore = object.legacyScore >>> 0;
                if (object.interiorScore != null)
                    message.interiorScore = object.interiorScore >>> 0;
                return message;
            };
    
            /**
             * Creates a plain object from a Route message. Also converts values to other types if specified.
             * @function toObject
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {CMsgSteamDatagramP2PRoutes.Route} message Route
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Route.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.myPopId = 0;
                    object.yourPopId = 0;
                    object.legacyScore = 0;
                    object.interiorScore = 0;
                }
                if (message.myPopId != null && message.hasOwnProperty("myPopId"))
                    object.myPopId = message.myPopId;
                if (message.yourPopId != null && message.hasOwnProperty("yourPopId"))
                    object.yourPopId = message.yourPopId;
                if (message.legacyScore != null && message.hasOwnProperty("legacyScore"))
                    object.legacyScore = message.legacyScore;
                if (message.interiorScore != null && message.hasOwnProperty("interiorScore"))
                    object.interiorScore = message.interiorScore;
                return object;
            };
    
            /**
             * Converts this Route to JSON.
             * @function toJSON
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Route.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            /**
             * Gets the default type url for Route
             * @function getTypeUrl
             * @memberof CMsgSteamDatagramP2PRoutes.Route
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Route.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/CMsgSteamDatagramP2PRoutes.Route";
            };
    
            return Route;
        })();
    
        return CMsgSteamDatagramP2PRoutes;
    })();
    
    $root.CMsgSteamDatagramSetSecondaryAddressRequest = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramSetSecondaryAddressRequest.
         * @exports ICMsgSteamDatagramSetSecondaryAddressRequest
         * @interface ICMsgSteamDatagramSetSecondaryAddressRequest
         * @property {number|null} [clientMainIp] CMsgSteamDatagramSetSecondaryAddressRequest clientMainIp
         * @property {number|null} [clientMainPort] CMsgSteamDatagramSetSecondaryAddressRequest clientMainPort
         * @property {number|null} [clientConnectionId] CMsgSteamDatagramSetSecondaryAddressRequest clientConnectionId
         * @property {string|null} [clientIdentity] CMsgSteamDatagramSetSecondaryAddressRequest clientIdentity
         * @property {boolean|null} [requestSendDuplication] CMsgSteamDatagramSetSecondaryAddressRequest requestSendDuplication
         * @property {Uint8Array|null} [kludgePad] CMsgSteamDatagramSetSecondaryAddressRequest kludgePad
         */
    
        /**
         * Constructs a new CMsgSteamDatagramSetSecondaryAddressRequest.
         * @exports CMsgSteamDatagramSetSecondaryAddressRequest
         * @classdesc Represents a CMsgSteamDatagramSetSecondaryAddressRequest.
         * @implements ICMsgSteamDatagramSetSecondaryAddressRequest
         * @constructor
         * @param {ICMsgSteamDatagramSetSecondaryAddressRequest=} [properties] Properties to set
         */
        function CMsgSteamDatagramSetSecondaryAddressRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramSetSecondaryAddressRequest clientMainIp.
         * @member {number} clientMainIp
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @instance
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.prototype.clientMainIp = 0;
    
        /**
         * CMsgSteamDatagramSetSecondaryAddressRequest clientMainPort.
         * @member {number} clientMainPort
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @instance
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.prototype.clientMainPort = 0;
    
        /**
         * CMsgSteamDatagramSetSecondaryAddressRequest clientConnectionId.
         * @member {number} clientConnectionId
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @instance
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.prototype.clientConnectionId = 0;
    
        /**
         * CMsgSteamDatagramSetSecondaryAddressRequest clientIdentity.
         * @member {string} clientIdentity
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @instance
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.prototype.clientIdentity = "";
    
        /**
         * CMsgSteamDatagramSetSecondaryAddressRequest requestSendDuplication.
         * @member {boolean} requestSendDuplication
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @instance
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.prototype.requestSendDuplication = false;
    
        /**
         * CMsgSteamDatagramSetSecondaryAddressRequest kludgePad.
         * @member {Uint8Array} kludgePad
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @instance
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.prototype.kludgePad = $util.newBuffer([]);
    
        /**
         * Creates a new CMsgSteamDatagramSetSecondaryAddressRequest instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @static
         * @param {ICMsgSteamDatagramSetSecondaryAddressRequest=} [properties] Properties to set
         * @returns {CMsgSteamDatagramSetSecondaryAddressRequest} CMsgSteamDatagramSetSecondaryAddressRequest instance
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.create = function create(properties) {
            return new CMsgSteamDatagramSetSecondaryAddressRequest(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSetSecondaryAddressRequest message. Does not implicitly {@link CMsgSteamDatagramSetSecondaryAddressRequest.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @static
         * @param {ICMsgSteamDatagramSetSecondaryAddressRequest} message CMsgSteamDatagramSetSecondaryAddressRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.clientMainIp != null && Object.hasOwnProperty.call(message, "clientMainIp"))
                writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.clientMainIp);
            if (message.clientMainPort != null && Object.hasOwnProperty.call(message, "clientMainPort"))
                writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.clientMainPort);
            if (message.clientConnectionId != null && Object.hasOwnProperty.call(message, "clientConnectionId"))
                writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.clientConnectionId);
            if (message.clientIdentity != null && Object.hasOwnProperty.call(message, "clientIdentity"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.clientIdentity);
            if (message.requestSendDuplication != null && Object.hasOwnProperty.call(message, "requestSendDuplication"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.requestSendDuplication);
            if (message.kludgePad != null && Object.hasOwnProperty.call(message, "kludgePad"))
                writer.uint32(/* id 99, wireType 2 =*/794).bytes(message.kludgePad);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSetSecondaryAddressRequest message, length delimited. Does not implicitly {@link CMsgSteamDatagramSetSecondaryAddressRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @static
         * @param {ICMsgSteamDatagramSetSecondaryAddressRequest} message CMsgSteamDatagramSetSecondaryAddressRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramSetSecondaryAddressRequest message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramSetSecondaryAddressRequest} CMsgSteamDatagramSetSecondaryAddressRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramSetSecondaryAddressRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.clientMainIp = reader.fixed32();
                        break;
                    }
                case 2: {
                        message.clientMainPort = reader.fixed32();
                        break;
                    }
                case 3: {
                        message.clientConnectionId = reader.fixed32();
                        break;
                    }
                case 4: {
                        message.clientIdentity = reader.string();
                        break;
                    }
                case 5: {
                        message.requestSendDuplication = reader.bool();
                        break;
                    }
                case 99: {
                        message.kludgePad = reader.bytes();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramSetSecondaryAddressRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramSetSecondaryAddressRequest} CMsgSteamDatagramSetSecondaryAddressRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramSetSecondaryAddressRequest message.
         * @function verify
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.clientMainIp != null && message.hasOwnProperty("clientMainIp"))
                if (!$util.isInteger(message.clientMainIp))
                    return "clientMainIp: integer expected";
            if (message.clientMainPort != null && message.hasOwnProperty("clientMainPort"))
                if (!$util.isInteger(message.clientMainPort))
                    return "clientMainPort: integer expected";
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                if (!$util.isInteger(message.clientConnectionId))
                    return "clientConnectionId: integer expected";
            if (message.clientIdentity != null && message.hasOwnProperty("clientIdentity"))
                if (!$util.isString(message.clientIdentity))
                    return "clientIdentity: string expected";
            if (message.requestSendDuplication != null && message.hasOwnProperty("requestSendDuplication"))
                if (typeof message.requestSendDuplication !== "boolean")
                    return "requestSendDuplication: boolean expected";
            if (message.kludgePad != null && message.hasOwnProperty("kludgePad"))
                if (!(message.kludgePad && typeof message.kludgePad.length === "number" || $util.isString(message.kludgePad)))
                    return "kludgePad: buffer expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramSetSecondaryAddressRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramSetSecondaryAddressRequest} CMsgSteamDatagramSetSecondaryAddressRequest
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramSetSecondaryAddressRequest)
                return object;
            var message = new $root.CMsgSteamDatagramSetSecondaryAddressRequest();
            if (object.clientMainIp != null)
                message.clientMainIp = object.clientMainIp >>> 0;
            if (object.clientMainPort != null)
                message.clientMainPort = object.clientMainPort >>> 0;
            if (object.clientConnectionId != null)
                message.clientConnectionId = object.clientConnectionId >>> 0;
            if (object.clientIdentity != null)
                message.clientIdentity = String(object.clientIdentity);
            if (object.requestSendDuplication != null)
                message.requestSendDuplication = Boolean(object.requestSendDuplication);
            if (object.kludgePad != null)
                if (typeof object.kludgePad === "string")
                    $util.base64.decode(object.kludgePad, message.kludgePad = $util.newBuffer($util.base64.length(object.kludgePad)), 0);
                else if (object.kludgePad.length >= 0)
                    message.kludgePad = object.kludgePad;
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramSetSecondaryAddressRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @static
         * @param {CMsgSteamDatagramSetSecondaryAddressRequest} message CMsgSteamDatagramSetSecondaryAddressRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.clientMainIp = 0;
                object.clientMainPort = 0;
                object.clientConnectionId = 0;
                object.clientIdentity = "";
                object.requestSendDuplication = false;
                if (options.bytes === String)
                    object.kludgePad = "";
                else {
                    object.kludgePad = [];
                    if (options.bytes !== Array)
                        object.kludgePad = $util.newBuffer(object.kludgePad);
                }
            }
            if (message.clientMainIp != null && message.hasOwnProperty("clientMainIp"))
                object.clientMainIp = message.clientMainIp;
            if (message.clientMainPort != null && message.hasOwnProperty("clientMainPort"))
                object.clientMainPort = message.clientMainPort;
            if (message.clientConnectionId != null && message.hasOwnProperty("clientConnectionId"))
                object.clientConnectionId = message.clientConnectionId;
            if (message.clientIdentity != null && message.hasOwnProperty("clientIdentity"))
                object.clientIdentity = message.clientIdentity;
            if (message.requestSendDuplication != null && message.hasOwnProperty("requestSendDuplication"))
                object.requestSendDuplication = message.requestSendDuplication;
            if (message.kludgePad != null && message.hasOwnProperty("kludgePad"))
                object.kludgePad = options.bytes === String ? $util.base64.encode(message.kludgePad, 0, message.kludgePad.length) : options.bytes === Array ? Array.prototype.slice.call(message.kludgePad) : message.kludgePad;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramSetSecondaryAddressRequest to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramSetSecondaryAddressRequest
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramSetSecondaryAddressRequest
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramSetSecondaryAddressRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramSetSecondaryAddressRequest";
        };
    
        return CMsgSteamDatagramSetSecondaryAddressRequest;
    })();
    
    $root.CMsgSteamDatagramSetSecondaryAddressResult = (function() {
    
        /**
         * Properties of a CMsgSteamDatagramSetSecondaryAddressResult.
         * @exports ICMsgSteamDatagramSetSecondaryAddressResult
         * @interface ICMsgSteamDatagramSetSecondaryAddressResult
         * @property {boolean|null} [success] CMsgSteamDatagramSetSecondaryAddressResult success
         * @property {string|null} [message] CMsgSteamDatagramSetSecondaryAddressResult message
         */
    
        /**
         * Constructs a new CMsgSteamDatagramSetSecondaryAddressResult.
         * @exports CMsgSteamDatagramSetSecondaryAddressResult
         * @classdesc Represents a CMsgSteamDatagramSetSecondaryAddressResult.
         * @implements ICMsgSteamDatagramSetSecondaryAddressResult
         * @constructor
         * @param {ICMsgSteamDatagramSetSecondaryAddressResult=} [properties] Properties to set
         */
        function CMsgSteamDatagramSetSecondaryAddressResult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }
    
        /**
         * CMsgSteamDatagramSetSecondaryAddressResult success.
         * @member {boolean} success
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @instance
         */
        CMsgSteamDatagramSetSecondaryAddressResult.prototype.success = false;
    
        /**
         * CMsgSteamDatagramSetSecondaryAddressResult message.
         * @member {string} message
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @instance
         */
        CMsgSteamDatagramSetSecondaryAddressResult.prototype.message = "";
    
        /**
         * Creates a new CMsgSteamDatagramSetSecondaryAddressResult instance using the specified properties.
         * @function create
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @static
         * @param {ICMsgSteamDatagramSetSecondaryAddressResult=} [properties] Properties to set
         * @returns {CMsgSteamDatagramSetSecondaryAddressResult} CMsgSteamDatagramSetSecondaryAddressResult instance
         */
        CMsgSteamDatagramSetSecondaryAddressResult.create = function create(properties) {
            return new CMsgSteamDatagramSetSecondaryAddressResult(properties);
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSetSecondaryAddressResult message. Does not implicitly {@link CMsgSteamDatagramSetSecondaryAddressResult.verify|verify} messages.
         * @function encode
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @static
         * @param {ICMsgSteamDatagramSetSecondaryAddressResult} message CMsgSteamDatagramSetSecondaryAddressResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSetSecondaryAddressResult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.success != null && Object.hasOwnProperty.call(message, "success"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
            return writer;
        };
    
        /**
         * Encodes the specified CMsgSteamDatagramSetSecondaryAddressResult message, length delimited. Does not implicitly {@link CMsgSteamDatagramSetSecondaryAddressResult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @static
         * @param {ICMsgSteamDatagramSetSecondaryAddressResult} message CMsgSteamDatagramSetSecondaryAddressResult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMsgSteamDatagramSetSecondaryAddressResult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };
    
        /**
         * Decodes a CMsgSteamDatagramSetSecondaryAddressResult message from the specified reader or buffer.
         * @function decode
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {CMsgSteamDatagramSetSecondaryAddressResult} CMsgSteamDatagramSetSecondaryAddressResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSetSecondaryAddressResult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CMsgSteamDatagramSetSecondaryAddressResult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1: {
                        message.success = reader.bool();
                        break;
                    }
                case 2: {
                        message.message = reader.string();
                        break;
                    }
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };
    
        /**
         * Decodes a CMsgSteamDatagramSetSecondaryAddressResult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {CMsgSteamDatagramSetSecondaryAddressResult} CMsgSteamDatagramSetSecondaryAddressResult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMsgSteamDatagramSetSecondaryAddressResult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };
    
        /**
         * Verifies a CMsgSteamDatagramSetSecondaryAddressResult message.
         * @function verify
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMsgSteamDatagramSetSecondaryAddressResult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.success != null && message.hasOwnProperty("success"))
                if (typeof message.success !== "boolean")
                    return "success: boolean expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            return null;
        };
    
        /**
         * Creates a CMsgSteamDatagramSetSecondaryAddressResult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {CMsgSteamDatagramSetSecondaryAddressResult} CMsgSteamDatagramSetSecondaryAddressResult
         */
        CMsgSteamDatagramSetSecondaryAddressResult.fromObject = function fromObject(object) {
            if (object instanceof $root.CMsgSteamDatagramSetSecondaryAddressResult)
                return object;
            var message = new $root.CMsgSteamDatagramSetSecondaryAddressResult();
            if (object.success != null)
                message.success = Boolean(object.success);
            if (object.message != null)
                message.message = String(object.message);
            return message;
        };
    
        /**
         * Creates a plain object from a CMsgSteamDatagramSetSecondaryAddressResult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @static
         * @param {CMsgSteamDatagramSetSecondaryAddressResult} message CMsgSteamDatagramSetSecondaryAddressResult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMsgSteamDatagramSetSecondaryAddressResult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.success = false;
                object.message = "";
            }
            if (message.success != null && message.hasOwnProperty("success"))
                object.success = message.success;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            return object;
        };
    
        /**
         * Converts this CMsgSteamDatagramSetSecondaryAddressResult to JSON.
         * @function toJSON
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMsgSteamDatagramSetSecondaryAddressResult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
    
        /**
         * Gets the default type url for CMsgSteamDatagramSetSecondaryAddressResult
         * @function getTypeUrl
         * @memberof CMsgSteamDatagramSetSecondaryAddressResult
         * @static
         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
         * @returns {string} The default type url
         */
        CMsgSteamDatagramSetSecondaryAddressResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === undefined) {
                typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/CMsgSteamDatagramSetSecondaryAddressResult";
        };
    
        return CMsgSteamDatagramSetSecondaryAddressResult;
    })();

    return $root;
});
